{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar RestException = require('./RestException');\n\n/**\n * @constructor\n *\n * @description Base page object to maintain request state.\n *\n * @param {Version} version - A twilio version instance\n * @param {Object} response - The http response\n * @param {Object} solution - path solution\n */\nfunction Page(version, response, solution) {\n  var payload = this.processResponse(response);\n  this._version = version;\n  this._payload = payload;\n  this._solution = solution;\n  this.nextPageUrl = this.getNextPageUrl();\n  this.previousPageUrl = this.getPreviousPageUrl();\n  this.instances = this.loadInstances(this.loadPage(payload));\n}\n\n/**\n * @constant META_KEYS\n * @description meta keys returned in a list request\n */\nPage.prototype.META_KEYS = ['end', 'first_page_uri', 'last_page_uri', 'next_page_uri', 'num_pages', 'page', 'page_size', 'previous_page_uri', 'start', 'total', 'uri'];\n\n/**\n * Get the url of the previous page of records\n *\n * @return {string|undefined} url of the previous page\n */\nPage.prototype.getPreviousPageUrl = function () {\n  if ('meta' in this._payload && 'previous_page_url' in this._payload.meta && this._payload.meta.previous_page_url) {\n    // jshint ignore:line\n    return this._payload.meta.previous_page_url; // jshint ignore:line\n  }\n\n  if ('previous_page_uri' in this._payload && this._payload.previous_page_uri) {\n    // jshint ignore:line\n    return this._version._domain.absoluteUrl(this._payload.previous_page_uri); // jshint ignore:line\n  }\n\n  return undefined;\n};\n\n/**\n * Get the url of the next page of records\n *\n * @return {string|undefined} url of the next page\n */\nPage.prototype.getNextPageUrl = function () {\n  if ('meta' in this._payload && 'next_page_url' in this._payload.meta && this._payload.meta.next_page_url) {\n    // jshint ignore:line\n    return this._payload.meta.next_page_url; // jshint ignore:line\n  }\n\n  if ('next_page_uri' in this._payload && this._payload.next_page_uri) {\n    // jshint ignore:line\n    return this._version._domain.absoluteUrl(this._payload.next_page_uri); // jshint ignore:line\n  }\n\n  return undefined;\n};\n\n/**\n * Build a new instance given a json payload\n * @abstract\n *\n * @param {object} payload - Payload response from the API\n * @return {object} instance of a resource\n */\nPage.prototype.getInstance = function (payload) {\n  throw new Error('Page.get_instance() must be implemented in the derived class');\n};\n\n/**\n * Load a list of records\n *\n * @param  {object} resources json payload of records\n * @return {Array} list of resources\n */\nPage.prototype.loadInstances = function (resources) {\n  return _.map(resources, function (resource) {\n    return this.getInstance(resource);\n  }.bind(this));\n};\n\n/**\n * Fetch the next page of records\n *\n * @return {promise} promise that resolves to next page of results\n */\nPage.prototype.nextPage = function () {\n  if (!this.nextPageUrl) {\n    return undefined;\n  }\n  var promise = this._version._domain.twilio.request({\n    method: 'GET',\n    uri: this.nextPageUrl\n  });\n  promise = promise.then(function (response) {\n    return new this.constructor(this._version, response, this._solution);\n  }.bind(this));\n  return promise;\n};\n\n/**\n * Fetch the previous page of records\n *\n * @return {promise} promise that resolves to previous page of results\n */\nPage.prototype.previousPage = function () {\n  if (!this.previousPageUrl) {\n    return undefined;\n  }\n  var promise = this._version._domain.twilio.request({\n    method: 'GET',\n    uri: this.previousPageUrl\n  });\n  promise = promise.then(function (response) {\n    return new this.constructor(this._version, response, this._solution);\n  }.bind(this));\n  return promise;\n};\n\n/**\n * Parse json response from API\n * @throws {Error} If non 200 status code is returned\n *\n * @param  {object} response API response\n * @return {object} json parsed response\n */\nPage.prototype.processResponse = function (response) {\n  if (response.statusCode !== 200) {\n    throw new RestException(response);\n  }\n  return JSON.parse(response.body);\n};\n\n/**\n * Load a page of records\n * @throws {Error} If records cannot be deserialized\n *\n * @param  {object} payload json payload\n * @return {array} the page of records\n */\nPage.prototype.loadPage = function (payload) {\n  if ('meta' in payload && 'key' in payload.meta) {\n    return payload[payload.meta.key];\n  }\n  var keys = _.chain(payload).keys().difference(this.META_KEYS).value();\n  if (keys.length === 1) {\n    return payload[keys[0]];\n  }\n  throw new Error('Page Records cannot be deserialized');\n};\nmodule.exports = Page;","map":{"version":3,"names":["_","require","RestException","Page","version","response","solution","payload","processResponse","_version","_payload","_solution","nextPageUrl","getNextPageUrl","previousPageUrl","getPreviousPageUrl","instances","loadInstances","loadPage","prototype","META_KEYS","meta","previous_page_url","previous_page_uri","_domain","absoluteUrl","undefined","next_page_url","next_page_uri","getInstance","Error","resources","map","resource","bind","nextPage","promise","twilio","request","method","uri","then","constructor","previousPage","statusCode","JSON","parse","body","key","keys","chain","difference","value","length","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/base/Page.js"],"sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar RestException = require('./RestException');\n\n/**\n * @constructor\n *\n * @description Base page object to maintain request state.\n *\n * @param {Version} version - A twilio version instance\n * @param {Object} response - The http response\n * @param {Object} solution - path solution\n */\nfunction Page(version, response, solution) {\n  var payload = this.processResponse(response);\n\n  this._version = version;\n  this._payload = payload;\n  this._solution = solution;\n\n  this.nextPageUrl = this.getNextPageUrl();\n  this.previousPageUrl = this.getPreviousPageUrl();\n\n  this.instances = this.loadInstances(this.loadPage(payload));\n}\n\n/**\n * @constant META_KEYS\n * @description meta keys returned in a list request\n */\nPage.prototype.META_KEYS = [\n  'end',\n  'first_page_uri',\n  'last_page_uri',\n  'next_page_uri',\n  'num_pages',\n  'page',\n  'page_size',\n  'previous_page_uri',\n  'start',\n  'total',\n  'uri',\n];\n\n/**\n * Get the url of the previous page of records\n *\n * @return {string|undefined} url of the previous page\n */\nPage.prototype.getPreviousPageUrl = function() {\n  if ('meta' in this._payload && 'previous_page_url' in this._payload.meta && this._payload.meta.previous_page_url) { // jshint ignore:line\n    return this._payload.meta.previous_page_url; // jshint ignore:line\n  }\n\n  if ('previous_page_uri' in this._payload && this._payload.previous_page_uri) { // jshint ignore:line\n    return this._version._domain.absoluteUrl(this._payload.previous_page_uri); // jshint ignore:line\n  }\n\n  return undefined;\n};\n\n/**\n * Get the url of the next page of records\n *\n * @return {string|undefined} url of the next page\n */\nPage.prototype.getNextPageUrl = function() {\n  if ('meta' in this._payload && 'next_page_url' in this._payload.meta && this._payload.meta.next_page_url) { // jshint ignore:line\n    return this._payload.meta.next_page_url; // jshint ignore:line\n  }\n\n  if ('next_page_uri' in this._payload && this._payload.next_page_uri) { // jshint ignore:line\n    return this._version._domain.absoluteUrl(this._payload.next_page_uri); // jshint ignore:line\n  }\n\n  return undefined;\n};\n\n/**\n * Build a new instance given a json payload\n * @abstract\n *\n * @param {object} payload - Payload response from the API\n * @return {object} instance of a resource\n */\nPage.prototype.getInstance = function(payload) {\n  throw new Error('Page.get_instance() must be implemented in the derived class');\n};\n\n/**\n * Load a list of records\n *\n * @param  {object} resources json payload of records\n * @return {Array} list of resources\n */\nPage.prototype.loadInstances = function(resources) {\n  return _.map(resources, function(resource) {\n    return this.getInstance(resource);\n  }.bind(this));\n};\n\n/**\n * Fetch the next page of records\n *\n * @return {promise} promise that resolves to next page of results\n */\nPage.prototype.nextPage = function() {\n  if (!this.nextPageUrl) {\n    return undefined;\n  }\n\n  var promise = this._version._domain.twilio.request({\n    method: 'GET',\n    uri: this.nextPageUrl,\n  });\n\n  promise = promise.then(function(response) {\n    return new this.constructor(this._version, response, this._solution);\n  }.bind(this));\n\n  return promise;\n};\n\n/**\n * Fetch the previous page of records\n *\n * @return {promise} promise that resolves to previous page of results\n */\nPage.prototype.previousPage = function() {\n  if (!this.previousPageUrl) {\n    return undefined;\n  }\n\n  var promise = this._version._domain.twilio.request({\n    method: 'GET',\n    uri: this.previousPageUrl,\n  });\n\n  promise = promise.then(function(response) {\n    return new this.constructor(this._version, response, this._solution);\n  }.bind(this));\n\n  return promise;\n};\n\n/**\n * Parse json response from API\n * @throws {Error} If non 200 status code is returned\n *\n * @param  {object} response API response\n * @return {object} json parsed response\n */\nPage.prototype.processResponse = function(response) {\n  if (response.statusCode !== 200) {\n    throw new RestException(response);\n  }\n\n  return JSON.parse(response.body);\n};\n\n/**\n * Load a page of records\n * @throws {Error} If records cannot be deserialized\n *\n * @param  {object} payload json payload\n * @return {array} the page of records\n */\nPage.prototype.loadPage = function(payload) {\n  if ('meta' in payload && 'key' in payload.meta) {\n    return payload[payload.meta.key];\n  }\n\n  var keys = _.chain(payload)\n    .keys()\n    .difference(this.META_KEYS)\n    .value();\n\n  if (keys.length === 1) {\n    return payload[keys[0]];\n  }\n\n  throw new Error('Page Records cannot be deserialized');\n};\n\nmodule.exports = Page;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}