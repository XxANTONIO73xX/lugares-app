{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../../base/values'); /* jshint ignore:line */\n\nvar NotificationList;\nvar NotificationPage;\nvar NotificationInstance;\nvar NotificationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationList\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallContext.NotificationList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n * @param {string} callSid - The SID of the Call the resource is associated with\n */\n/* jshint ignore:end */\nNotificationList = function NotificationList(version, accountSid, callSid) {\n  /* jshint ignore:start */\n  /**\n   * @function notifications\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.CallContext.NotificationContext}\n   */\n  /* jshint ignore:end */\n  function NotificationListInstance(sid) {\n    return NotificationListInstance.get(sid);\n  }\n  NotificationListInstance._version = version;\n  // Path Solution\n  NotificationListInstance._solution = {\n    accountSid: accountSid,\n    callSid: callSid\n  };\n  NotificationListInstance._uri = _.template('/Accounts/<%= accountSid %>/Calls/<%= callSid %>/Notifications.json' // jshint ignore:line\n  )(NotificationListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams NotificationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.log] - Filter by log level\n   * @param {Date} [opts.messageDateBefore] - Filter by date\n   * @param {Date} [opts.messageDate] - Filter by date\n   * @param {Date} [opts.messageDateAfter] - Filter by date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists NotificationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.log] - Filter by log level\n   * @param {Date} [opts.messageDateBefore] - Filter by date\n   * @param {Date} [opts.messageDate] - Filter by date\n   * @param {Date} [opts.messageDateAfter] - Filter by date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of NotificationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.log] - Filter by log level\n   * @param {Date} [opts.messageDateBefore] - Filter by date\n   * @param {Date} [opts.messageDate] - Filter by date\n   * @param {Date} [opts.messageDateAfter] - Filter by date\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Log': _.get(opts, 'log'),\n      'MessageDate<': serialize.iso8601Date(_.get(opts, 'messageDateBefore')),\n      'MessageDate': serialize.iso8601Date(_.get(opts, 'messageDate')),\n      'MessageDate>': serialize.iso8601Date(_.get(opts, 'messageDateAfter')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new NotificationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of NotificationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new NotificationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a notification\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.CallContext.NotificationContext}\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.get = function get(sid) {\n    return new NotificationContext(this._version, this._solution.accountSid, this._solution.callSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  NotificationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return NotificationListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallContext.NotificationPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {NotificationSolution} solution - Path solution\n *\n * @returns NotificationPage\n */\n/* jshint ignore:end */\nNotificationPage = function NotificationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(NotificationPage.prototype, Page.prototype);\nNotificationPage.prototype.constructor = NotificationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of NotificationInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationPage#\n *\n * @param {NotificationPayload} payload - Payload response from the API\n *\n * @returns NotificationInstance\n */\n/* jshint ignore:end */\nNotificationPage.prototype.getInstance = function getInstance(payload) {\n  return new NotificationInstance(this._version, payload, this._solution.accountSid, this._solution.callSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nNotificationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallContext.NotificationInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} apiVersion -\n *          The API version used to create the Call Notification resource\n * @property {string} callSid - The SID of the Call the resource is associated with\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} errorCode -\n *          A unique error code corresponding to the notification\n * @property {string} log - An integer log level\n * @property {Date} messageDate - The date the notification was generated\n * @property {string} messageText - The text of the notification\n * @property {string} moreInfo - A URL for more information about the error code\n * @property {string} requestMethod - HTTP method used with the request url\n * @property {string} requestUrl -\n *          URL of the resource that generated the notification\n * @property {string} requestVariables -\n *          Twilio-generated HTTP variables sent to the server\n * @property {string} responseBody - The HTTP body returned by your server\n * @property {string} responseHeaders - The HTTP headers returned by your server\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n *\n * @param {V2010} version - Version of the resource\n * @param {NotificationPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} callSid - The SID of the Call the resource is associated with\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nNotificationInstance = function NotificationInstance(version, payload, accountSid, callSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.callSid = payload.call_sid; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.errorCode = payload.error_code; // jshint ignore:line\n  this.log = payload.log; // jshint ignore:line\n  this.messageDate = deserialize.rfc2822DateTime(payload.message_date); // jshint ignore:line\n  this.messageText = payload.message_text; // jshint ignore:line\n  this.moreInfo = payload.more_info; // jshint ignore:line\n  this.requestMethod = payload.request_method; // jshint ignore:line\n  this.requestUrl = payload.request_url; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.requestVariables = payload.request_variables; // jshint ignore:line\n  this.responseBody = payload.response_body; // jshint ignore:line\n  this.responseHeaders = payload.response_headers; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    callSid: callSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(NotificationInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new NotificationContext(this._version, this._solution.accountSid, this._solution.callSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a NotificationInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a NotificationInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nNotificationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallContext.NotificationContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} callSid - The Call SID of the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nNotificationContext = function NotificationContext(version, accountSid, callSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    accountSid: accountSid,\n    callSid: callSid,\n    sid: sid\n  };\n  this._uri = _.template('/Accounts/<%= accountSid %>/Calls/<%= callSid %>/Notifications/<%= sid %>.json' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a NotificationInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new NotificationInstance(this._version, payload, this._solution.accountSid, this._solution.callSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a NotificationInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nNotificationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  NotificationList: NotificationList,\n  NotificationPage: NotificationPage,\n  NotificationInstance: NotificationInstance,\n  NotificationContext: NotificationContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","NotificationList","NotificationPage","NotificationInstance","NotificationContext","version","accountSid","callSid","NotificationListInstance","sid","get","_version","_solution","_uri","template","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601Date","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","apiVersion","api_version","call_sid","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","errorCode","error_code","log","messageDate","message_date","messageText","message_text","moreInfo","more_info","requestMethod","request_method","requestUrl","request_url","requestVariables","request_variables","responseBody","response_body","responseHeaders","response_headers","_context","undefined","Object","defineProperty","fetch","_proxy","remove","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/api/v2010/account/call/notification.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar NotificationList;\nvar NotificationPage;\nvar NotificationInstance;\nvar NotificationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationList\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallContext.NotificationList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n * @param {string} callSid - The SID of the Call the resource is associated with\n */\n/* jshint ignore:end */\nNotificationList = function NotificationList(version, accountSid, callSid) {\n  /* jshint ignore:start */\n  /**\n   * @function notifications\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.CallContext.NotificationContext}\n   */\n  /* jshint ignore:end */\n  function NotificationListInstance(sid) {\n    return NotificationListInstance.get(sid);\n  }\n\n  NotificationListInstance._version = version;\n  // Path Solution\n  NotificationListInstance._solution = {accountSid: accountSid, callSid: callSid};\n  NotificationListInstance._uri = _.template(\n    '/Accounts/<%= accountSid %>/Calls/<%= callSid %>/Notifications.json' // jshint ignore:line\n  )(NotificationListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams NotificationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.log] - Filter by log level\n   * @param {Date} [opts.messageDateBefore] - Filter by date\n   * @param {Date} [opts.messageDate] - Filter by date\n   * @param {Date} [opts.messageDateAfter] - Filter by date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists NotificationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.log] - Filter by log level\n   * @param {Date} [opts.messageDateBefore] - Filter by date\n   * @param {Date} [opts.messageDate] - Filter by date\n   * @param {Date} [opts.messageDateAfter] - Filter by date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of NotificationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.log] - Filter by log level\n   * @param {Date} [opts.messageDateBefore] - Filter by date\n   * @param {Date} [opts.messageDate] - Filter by date\n   * @param {Date} [opts.messageDateAfter] - Filter by date\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Log': _.get(opts, 'log'),\n      'MessageDate<': serialize.iso8601Date(_.get(opts, 'messageDateBefore')),\n      'MessageDate': serialize.iso8601Date(_.get(opts, 'messageDate')),\n      'MessageDate>': serialize.iso8601Date(_.get(opts, 'messageDateAfter')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new NotificationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of NotificationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new NotificationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a notification\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.CallContext.NotificationContext}\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.get = function get(sid) {\n    return new NotificationContext(\n      this._version,\n      this._solution.accountSid,\n      this._solution.callSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  NotificationListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return NotificationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallContext.NotificationPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {NotificationSolution} solution - Path solution\n *\n * @returns NotificationPage\n */\n/* jshint ignore:end */\nNotificationPage = function NotificationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(NotificationPage.prototype, Page.prototype);\nNotificationPage.prototype.constructor = NotificationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of NotificationInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationPage#\n *\n * @param {NotificationPayload} payload - Payload response from the API\n *\n * @returns NotificationInstance\n */\n/* jshint ignore:end */\nNotificationPage.prototype.getInstance = function getInstance(payload) {\n  return new NotificationInstance(\n    this._version,\n    payload,\n    this._solution.accountSid,\n    this._solution.callSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nNotificationPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallContext.NotificationInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} apiVersion -\n *          The API version used to create the Call Notification resource\n * @property {string} callSid - The SID of the Call the resource is associated with\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} errorCode -\n *          A unique error code corresponding to the notification\n * @property {string} log - An integer log level\n * @property {Date} messageDate - The date the notification was generated\n * @property {string} messageText - The text of the notification\n * @property {string} moreInfo - A URL for more information about the error code\n * @property {string} requestMethod - HTTP method used with the request url\n * @property {string} requestUrl -\n *          URL of the resource that generated the notification\n * @property {string} requestVariables -\n *          Twilio-generated HTTP variables sent to the server\n * @property {string} responseBody - The HTTP body returned by your server\n * @property {string} responseHeaders - The HTTP headers returned by your server\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n *\n * @param {V2010} version - Version of the resource\n * @param {NotificationPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} callSid - The SID of the Call the resource is associated with\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nNotificationInstance = function NotificationInstance(version, payload,\n                                                      accountSid, callSid, sid)\n                                                      {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.callSid = payload.call_sid; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.errorCode = payload.error_code; // jshint ignore:line\n  this.log = payload.log; // jshint ignore:line\n  this.messageDate = deserialize.rfc2822DateTime(payload.message_date); // jshint ignore:line\n  this.messageText = payload.message_text; // jshint ignore:line\n  this.moreInfo = payload.more_info; // jshint ignore:line\n  this.requestMethod = payload.request_method; // jshint ignore:line\n  this.requestUrl = payload.request_url; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.requestVariables = payload.request_variables; // jshint ignore:line\n  this.responseBody = payload.response_body; // jshint ignore:line\n  this.responseHeaders = payload.response_headers; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, callSid: callSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(NotificationInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new NotificationContext(\n        this._version,\n        this._solution.accountSid,\n        this._solution.callSid,\n        this._solution.sid\n      );\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a NotificationInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a NotificationInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nNotificationInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallContext.NotificationContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} callSid - The Call SID of the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nNotificationContext = function NotificationContext(version, accountSid, callSid,\n                                                    sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, callSid: callSid, sid: sid, };\n  this._uri = _.template(\n    '/Accounts/<%= accountSid %>/Calls/<%= callSid %>/Notifications/<%= sid %>.json' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a NotificationInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new NotificationInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.callSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a NotificationInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.CallContext.NotificationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nNotificationContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  NotificationList: NotificationList,\n  NotificationPage: NotificationPage,\n  NotificationInstance: NotificationInstance,\n  NotificationContext: NotificationContext\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAE;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC,CAAC,CAAE;AAC7B,IAAIG,IAAI,GAAGH,OAAO,CAAC,0BAA0B,CAAC,CAAC,CAAE;AACjD,IAAII,WAAW,GAAGJ,OAAO,CACrB,iCAAiC,CAAC,CAAC,CAAE;AACzC,IAAIK,SAAS,GAAGL,OAAO,CACnB,+BAA+B,CAAC,CAAC,CAAE;AACvC,IAAIM,MAAM,GAAGN,OAAO,CAAC,4BAA4B,CAAC,CAAC,CAAE;;AAErD,IAAIO,gBAAgB;AACpB,IAAIC,gBAAgB;AACpB,IAAIC,oBAAoB;AACxB,IAAIC,mBAAmB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,gBAAgB,GAAG,SAASA,gBAAgBA,CAACI,OAAO,EAAEC,UAAU,EAAEC,OAAO,EAAE;EACzE;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA,SAASC,wBAAwBA,CAACC,GAAG,EAAE;IACrC,OAAOD,wBAAwB,CAACE,GAAG,CAACD,GAAG,CAAC;EAC1C;EAEAD,wBAAwB,CAACG,QAAQ,GAAGN,OAAO;EAC3C;EACAG,wBAAwB,CAACI,SAAS,GAAG;IAACN,UAAU,EAAEA,UAAU;IAAEC,OAAO,EAAEA;EAAO,CAAC;EAC/EC,wBAAwB,CAACK,IAAI,GAAGlB,CAAC,CAACmB,QAAQ,CACxC,qEAAqE,CAAC;EACxE,CAAC,CAACN,wBAAwB,CAACI,SAAS,CAAC;EACrC;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAJ,wBAAwB,CAACO,IAAI,GAAG,SAASA,IAAIA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IAC5D,IAAItB,CAAC,CAACuB,UAAU,CAACF,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAIA,IAAI,CAACC,QAAQ,EAAE;MACjBA,QAAQ,GAAGD,IAAI,CAACC,QAAQ;IAC1B;IACA,IAAItB,CAAC,CAACwB,WAAW,CAACF,QAAQ,CAAC,EAAE;MAC3B,MAAM,IAAIG,KAAK,CAAC,oCAAoC,CAAC;IACvD;IAEA,IAAIC,IAAI,GAAG,KAAK;IAChB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIC,MAAM,GAAG,IAAI,CAACb,QAAQ,CAACc,UAAU,CAAC;MACpCC,KAAK,EAAEV,IAAI,CAACU,KAAK;MACjBC,QAAQ,EAAEX,IAAI,CAACW;IACjB,CAAC,CAAC;IAEF,SAASC,UAAUA,CAACC,KAAK,EAAE;MACzBR,IAAI,GAAG,IAAI;MACX,IAAI1B,CAAC,CAACuB,UAAU,CAACF,IAAI,CAACK,IAAI,CAAC,EAAE;QAC3BL,IAAI,CAACK,IAAI,CAACQ,KAAK,CAAC;MAClB;IACF;IAEA,SAASC,aAAaA,CAACC,EAAE,EAAE;MACzB,IAAIC,OAAO,GAAGD,EAAE,CAAC,CAAC;MAClB,IAAIpC,CAAC,CAACwB,WAAW,CAACa,OAAO,CAAC,EAAE;QAC1BJ,UAAU,CAAC,CAAC;QACZ;MACF;MAEAI,OAAO,CAACC,IAAI,CAAC,UAASC,IAAI,EAAE;QAC1BvC,CAAC,CAACoB,IAAI,CAACmB,IAAI,CAACC,SAAS,EAAE,UAASC,QAAQ,EAAE;UACxC,IAAIf,IAAI,IAAK,CAAC1B,CAAC,CAACwB,WAAW,CAACH,IAAI,CAACU,KAAK,CAAC,IAAIH,eAAe,IAAIP,IAAI,CAACU,KAAM,EAAE;YACzEL,IAAI,GAAG,IAAI;YACX,OAAO,KAAK;UACd;UAEAE,eAAe,EAAE;UACjBN,QAAQ,CAACmB,QAAQ,EAAER,UAAU,CAAC;QAChC,CAAC,CAAC;QAEF,IAAKJ,MAAM,CAACa,SAAS,IAAIb,MAAM,CAACa,SAAS,IAAIf,WAAW,EAAG;UACzDM,UAAU,CAAC,CAAC;QACd,CAAC,MAAM,IAAI,CAACP,IAAI,EAAE;UAChBC,WAAW,EAAE;UACbQ,aAAa,CAACnC,CAAC,CAAC2C,IAAI,CAACJ,IAAI,CAACK,QAAQ,EAAEL,IAAI,CAAC,CAAC;QAC5C;MACF,CAAC,CAAC;MAEFF,OAAO,CAACQ,KAAK,CAACZ,UAAU,CAAC;IAC3B;IAEAE,aAAa,CAACnC,CAAC,CAAC2C,IAAI,CAAC,IAAI,CAACJ,IAAI,EAAE,IAAI,EAAEvC,CAAC,CAAC8C,KAAK,CAACzB,IAAI,EAAEQ,MAAM,CAAC,CAAC,CAAC;EAC/D,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAhB,wBAAwB,CAACkC,IAAI,GAAG,SAASA,IAAIA,CAAC1B,IAAI,EAAEC,QAAQ,EAAE;IAC5D,IAAItB,CAAC,CAACuB,UAAU,CAACF,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAI2B,QAAQ,GAAGlD,CAAC,CAACmD,KAAK,CAAC,CAAC;IACxB,IAAIC,YAAY,GAAG,EAAE;IACrB7B,IAAI,CAACC,QAAQ,GAAG,UAAS6B,QAAQ,EAAEzB,IAAI,EAAE;MACvCwB,YAAY,CAACE,IAAI,CAACD,QAAQ,CAAC;MAE3B,IAAI,CAACnD,CAAC,CAACwB,WAAW,CAACH,IAAI,CAACU,KAAK,CAAC,IAAImB,YAAY,CAACG,MAAM,KAAKhC,IAAI,CAACU,KAAK,EAAE;QACpEL,IAAI,CAAC,CAAC;MACR;IACF,CAAC;IAEDL,IAAI,CAACK,IAAI,GAAG,UAASQ,KAAK,EAAE;MAC1B,IAAIlC,CAAC,CAACwB,WAAW,CAACU,KAAK,CAAC,EAAE;QACxBc,QAAQ,CAACM,OAAO,CAACJ,YAAY,CAAC;MAChC,CAAC,MAAM;QACLF,QAAQ,CAACO,MAAM,CAACrB,KAAK,CAAC;MACxB;IACF,CAAC;IAED,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;MAC1B0B,QAAQ,CAACX,OAAO,CAACmB,OAAO,CAAClC,QAAQ,CAAC;IACpC;IAEA,IAAI,CAACF,IAAI,CAACC,IAAI,CAAC;IACf,OAAO2B,QAAQ,CAACX,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAxB,wBAAwB,CAAC0B,IAAI,GAAG,SAASA,IAAIA,CAAClB,IAAI,EAAEC,QAAQ,EAAE;IAC5D,IAAItB,CAAC,CAACuB,UAAU,CAACF,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IAEjB,IAAI2B,QAAQ,GAAGlD,CAAC,CAACmD,KAAK,CAAC,CAAC;IACxB,IAAIQ,IAAI,GAAGpD,MAAM,CAACqD,EAAE,CAAC;MACnB,KAAK,EAAE1D,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,KAAK,CAAC;MACzB,cAAc,EAAEjB,SAAS,CAACuD,WAAW,CAAC3D,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,mBAAmB,CAAC,CAAC;MACvE,aAAa,EAAEjB,SAAS,CAACuD,WAAW,CAAC3D,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,aAAa,CAAC,CAAC;MAChE,cAAc,EAAEjB,SAAS,CAACuD,WAAW,CAAC3D,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,kBAAkB,CAAC,CAAC;MACtE,WAAW,EAAEA,IAAI,CAACuC,SAAS;MAC3B,MAAM,EAAEvC,IAAI,CAACwC,UAAU;MACvB,UAAU,EAAExC,IAAI,CAACW;IACnB,CAAC,CAAC;IAEF,IAAIK,OAAO,GAAG,IAAI,CAACrB,QAAQ,CAACuB,IAAI,CAAC;MAACuB,GAAG,EAAE,IAAI,CAAC5C,IAAI;MAAE6C,MAAM,EAAE,KAAK;MAAEC,MAAM,EAAEP;IAAI,CAAC,CAAC;IAE/EpB,OAAO,GAAGA,OAAO,CAACC,IAAI,CAAC,UAAS2B,OAAO,EAAE;MACvCjB,QAAQ,CAACM,OAAO,CAAC,IAAI/C,gBAAgB,CAAC,IAAI,CAACS,QAAQ,EAAEiD,OAAO,EAAE,IAAI,CAAChD,SAAS,CAAC,CAAC;IAChF,CAAC,CAAC0B,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACQ,KAAK,CAAC,UAASX,KAAK,EAAE;MAC5Bc,QAAQ,CAACO,MAAM,CAACrB,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;MAC1B0B,QAAQ,CAACX,OAAO,CAACmB,OAAO,CAAClC,QAAQ,CAAC;IACpC;IAEA,OAAO0B,QAAQ,CAACX,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAxB,wBAAwB,CAACqD,OAAO,GAAG,SAASA,OAAOA,CAACC,SAAS,EAAE7C,QAAQ,EAAE;IACvE,IAAI0B,QAAQ,GAAGlD,CAAC,CAACmD,KAAK,CAAC,CAAC;IAExB,IAAIZ,OAAO,GAAG,IAAI,CAACrB,QAAQ,CAACoD,OAAO,CAACC,MAAM,CAACC,OAAO,CAAC;MAACP,MAAM,EAAE,KAAK;MAAED,GAAG,EAAEK;IAAS,CAAC,CAAC;IAEnF9B,OAAO,GAAGA,OAAO,CAACC,IAAI,CAAC,UAAS2B,OAAO,EAAE;MACvCjB,QAAQ,CAACM,OAAO,CAAC,IAAI/C,gBAAgB,CAAC,IAAI,CAACS,QAAQ,EAAEiD,OAAO,EAAE,IAAI,CAAChD,SAAS,CAAC,CAAC;IAChF,CAAC,CAAC0B,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACQ,KAAK,CAAC,UAASX,KAAK,EAAE;MAC5Bc,QAAQ,CAACO,MAAM,CAACrB,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;MAC1B0B,QAAQ,CAACX,OAAO,CAACmB,OAAO,CAAClC,QAAQ,CAAC;IACpC;IAEA,OAAO0B,QAAQ,CAACX,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAxB,wBAAwB,CAACE,GAAG,GAAG,SAASA,GAAGA,CAACD,GAAG,EAAE;IAC/C,OAAO,IAAIL,mBAAmB,CAC5B,IAAI,CAACO,QAAQ,EACb,IAAI,CAACC,SAAS,CAACN,UAAU,EACzB,IAAI,CAACM,SAAS,CAACL,OAAO,EACtBE,GACF,CAAC;EACH,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAD,wBAAwB,CAAC0D,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;IAClD,OAAO,IAAI,CAACtD,SAAS;EACvB,CAAC;EAEDJ,wBAAwB,CAACZ,IAAI,CAACuE,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EAAEC,OAAO,EAC3E;IACF,OAAO1E,IAAI,CAACuE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;EAC7C,CAAC;EAED,OAAO9D,wBAAwB;AACjC,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAN,gBAAgB,GAAG,SAASA,gBAAgBA,CAACG,OAAO,EAAEkE,QAAQ,EAAEC,QAAQ,EAAE;EACxE;EACA,IAAI,CAAC5D,SAAS,GAAG4D,QAAQ;EAEzB3E,IAAI,CAAC4E,SAAS,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI,EAAEtE,OAAO,EAAEkE,QAAQ,EAAE,IAAI,CAAC3D,SAAS,CAAC;AAC1E,CAAC;AAEDjB,CAAC,CAACiF,MAAM,CAAC1E,gBAAgB,CAACuE,SAAS,EAAE5E,IAAI,CAAC4E,SAAS,CAAC;AACpDvE,gBAAgB,CAACuE,SAAS,CAACC,WAAW,GAAGxE,gBAAgB;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,gBAAgB,CAACuE,SAAS,CAACI,WAAW,GAAG,SAASA,WAAWA,CAACjB,OAAO,EAAE;EACrE,OAAO,IAAIzD,oBAAoB,CAC7B,IAAI,CAACQ,QAAQ,EACbiD,OAAO,EACP,IAAI,CAAChD,SAAS,CAACN,UAAU,EACzB,IAAI,CAACM,SAAS,CAACL,OACjB,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,gBAAgB,CAACuE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EACpD,IAAIY,KAAK,GAAG,CAAC,CAAC;EACdnF,CAAC,CAACoF,MAAM,CAAC,IAAI,EAAE,UAASC,KAAK,EAAEC,GAAG,EAAE;IAClC,IAAI,CAACtF,CAAC,CAACuF,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,IAAI,CAAEtF,CAAC,CAACuB,UAAU,CAAC8D,KAAK,CAAC,EAAE;MACpDF,KAAK,CAACG,GAAG,CAAC,GAAGD,KAAK;IACpB;EACF,CAAC,CAAC;EACF,OAAOF,KAAK;AACd,CAAC;AAED5E,gBAAgB,CAACuE,SAAS,CAAC7E,IAAI,CAACuE,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EACpEC,OAAO,EAAE;EACX,OAAO1E,IAAI,CAACuE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnE,oBAAoB,GAAG,SAASA,oBAAoBA,CAACE,OAAO,EAAEuD,OAAO,EACftD,UAAU,EAAEC,OAAO,EAAEE,GAAG,EACxB;EACpD,IAAI,CAACE,QAAQ,GAAGN,OAAO;;EAEvB;EACA,IAAI,CAACC,UAAU,GAAGsD,OAAO,CAACuB,WAAW,CAAC,CAAC;EACvC,IAAI,CAACC,UAAU,GAAGxB,OAAO,CAACyB,WAAW,CAAC,CAAC;EACvC,IAAI,CAAC9E,OAAO,GAAGqD,OAAO,CAAC0B,QAAQ,CAAC,CAAC;EACjC,IAAI,CAACC,WAAW,GAAGzF,WAAW,CAAC0F,eAAe,CAAC5B,OAAO,CAAC6B,YAAY,CAAC,CAAC,CAAC;EACtE,IAAI,CAACC,WAAW,GAAG5F,WAAW,CAAC0F,eAAe,CAAC5B,OAAO,CAAC+B,YAAY,CAAC,CAAC,CAAC;EACtE,IAAI,CAACC,SAAS,GAAGhC,OAAO,CAACiC,UAAU,CAAC,CAAC;EACrC,IAAI,CAACC,GAAG,GAAGlC,OAAO,CAACkC,GAAG,CAAC,CAAC;EACxB,IAAI,CAACC,WAAW,GAAGjG,WAAW,CAAC0F,eAAe,CAAC5B,OAAO,CAACoC,YAAY,CAAC,CAAC,CAAC;EACtE,IAAI,CAACC,WAAW,GAAGrC,OAAO,CAACsC,YAAY,CAAC,CAAC;EACzC,IAAI,CAACC,QAAQ,GAAGvC,OAAO,CAACwC,SAAS,CAAC,CAAC;EACnC,IAAI,CAACC,aAAa,GAAGzC,OAAO,CAAC0C,cAAc,CAAC,CAAC;EAC7C,IAAI,CAACC,UAAU,GAAG3C,OAAO,CAAC4C,WAAW,CAAC,CAAC;EACvC,IAAI,CAAC/F,GAAG,GAAGmD,OAAO,CAACnD,GAAG,CAAC,CAAC;EACxB,IAAI,CAACgD,GAAG,GAAGG,OAAO,CAACH,GAAG,CAAC,CAAC;EACxB,IAAI,CAACgD,gBAAgB,GAAG7C,OAAO,CAAC8C,iBAAiB,CAAC,CAAC;EACnD,IAAI,CAACC,YAAY,GAAG/C,OAAO,CAACgD,aAAa,CAAC,CAAC;EAC3C,IAAI,CAACC,eAAe,GAAGjD,OAAO,CAACkD,gBAAgB,CAAC,CAAC;;EAEjD;EACA,IAAI,CAACC,QAAQ,GAAGC,SAAS;EACzB,IAAI,CAACpG,SAAS,GAAG;IAACN,UAAU,EAAEA,UAAU;IAAEC,OAAO,EAAEA,OAAO;IAAEE,GAAG,EAAEA,GAAG,IAAI,IAAI,CAACA;EAAK,CAAC;AACrF,CAAC;AAEDwG,MAAM,CAACC,cAAc,CAAC/G,oBAAoB,CAACsE,SAAS,EAClD,QAAQ,EAAE;EACV/D,GAAG,EAAE,SAAAA,CAAA,EAAW;IACd,IAAI,CAAC,IAAI,CAACqG,QAAQ,EAAE;MAClB,IAAI,CAACA,QAAQ,GAAG,IAAI3G,mBAAmB,CACrC,IAAI,CAACO,QAAQ,EACb,IAAI,CAACC,SAAS,CAACN,UAAU,EACzB,IAAI,CAACM,SAAS,CAACL,OAAO,EACtB,IAAI,CAACK,SAAS,CAACH,GACjB,CAAC;IACH;IAEA,OAAO,IAAI,CAACsG,QAAQ;EACtB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5G,oBAAoB,CAACsE,SAAS,CAAC0C,KAAK,GAAG,SAASA,KAAKA,CAAClG,QAAQ,EAAE;EAC9D,OAAO,IAAI,CAACmG,MAAM,CAACD,KAAK,CAAClG,QAAQ,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,oBAAoB,CAACsE,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAMA,CAACpG,QAAQ,EAAE;EAChE,OAAO,IAAI,CAACmG,MAAM,CAACC,MAAM,CAACpG,QAAQ,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,oBAAoB,CAACsE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EACxD,IAAIY,KAAK,GAAG,CAAC,CAAC;EACdnF,CAAC,CAACoF,MAAM,CAAC,IAAI,EAAE,UAASC,KAAK,EAAEC,GAAG,EAAE;IAClC,IAAI,CAACtF,CAAC,CAACuF,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,IAAI,CAAEtF,CAAC,CAACuB,UAAU,CAAC8D,KAAK,CAAC,EAAE;MACpDF,KAAK,CAACG,GAAG,CAAC,GAAGD,KAAK;IACpB;EACF,CAAC,CAAC;EACF,OAAOF,KAAK;AACd,CAAC;AAED3E,oBAAoB,CAACsE,SAAS,CAAC7E,IAAI,CAACuE,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EACxEC,OAAO,EAAE;EACX,OAAO1E,IAAI,CAACuE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAlE,mBAAmB,GAAG,SAASA,mBAAmBA,CAACC,OAAO,EAAEC,UAAU,EAAEC,OAAO,EAC3BE,GAAG,EAAE;EACvD,IAAI,CAACE,QAAQ,GAAGN,OAAO;;EAEvB;EACA,IAAI,CAACO,SAAS,GAAG;IAACN,UAAU,EAAEA,UAAU;IAAEC,OAAO,EAAEA,OAAO;IAAEE,GAAG,EAAEA;EAAK,CAAC;EACvE,IAAI,CAACI,IAAI,GAAGlB,CAAC,CAACmB,QAAQ,CACpB,gFAAgF,CAAC;EACnF,CAAC,CAAC,IAAI,CAACF,SAAS,CAAC;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,mBAAmB,CAACqE,SAAS,CAAC0C,KAAK,GAAG,SAASA,KAAKA,CAAClG,QAAQ,EAAE;EAC7D,IAAI0B,QAAQ,GAAGlD,CAAC,CAACmD,KAAK,CAAC,CAAC;EACxB,IAAIZ,OAAO,GAAG,IAAI,CAACrB,QAAQ,CAACwG,KAAK,CAAC;IAAC1D,GAAG,EAAE,IAAI,CAAC5C,IAAI;IAAE6C,MAAM,EAAE;EAAK,CAAC,CAAC;EAElE1B,OAAO,GAAGA,OAAO,CAACC,IAAI,CAAC,UAAS2B,OAAO,EAAE;IACvCjB,QAAQ,CAACM,OAAO,CAAC,IAAI9C,oBAAoB,CACvC,IAAI,CAACQ,QAAQ,EACbiD,OAAO,EACP,IAAI,CAAChD,SAAS,CAACN,UAAU,EACzB,IAAI,CAACM,SAAS,CAACL,OAAO,EACtB,IAAI,CAACK,SAAS,CAACH,GACjB,CAAC,CAAC;EACJ,CAAC,CAAC6B,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbN,OAAO,CAACQ,KAAK,CAAC,UAASX,KAAK,EAAE;IAC5Bc,QAAQ,CAACO,MAAM,CAACrB,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;IAC1B0B,QAAQ,CAACX,OAAO,CAACmB,OAAO,CAAClC,QAAQ,CAAC;EACpC;EAEA,OAAO0B,QAAQ,CAACX,OAAO;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5B,mBAAmB,CAACqE,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAMA,CAACpG,QAAQ,EAAE;EAC/D,IAAI0B,QAAQ,GAAGlD,CAAC,CAACmD,KAAK,CAAC,CAAC;EACxB,IAAIZ,OAAO,GAAG,IAAI,CAACrB,QAAQ,CAAC0G,MAAM,CAAC;IAAC5D,GAAG,EAAE,IAAI,CAAC5C,IAAI;IAAE6C,MAAM,EAAE;EAAQ,CAAC,CAAC;EAEtE1B,OAAO,GAAGA,OAAO,CAACC,IAAI,CAAC,UAAS2B,OAAO,EAAE;IACvCjB,QAAQ,CAACM,OAAO,CAACW,OAAO,CAAC;EAC3B,CAAC,CAACtB,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbN,OAAO,CAACQ,KAAK,CAAC,UAASX,KAAK,EAAE;IAC5Bc,QAAQ,CAACO,MAAM,CAACrB,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;IAC1B0B,QAAQ,CAACX,OAAO,CAACmB,OAAO,CAAClC,QAAQ,CAAC;EACpC;EAEA,OAAO0B,QAAQ,CAACX,OAAO;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5B,mBAAmB,CAACqE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EACvD,OAAO,IAAI,CAACtD,SAAS;AACvB,CAAC;AAEDR,mBAAmB,CAACqE,SAAS,CAAC7E,IAAI,CAACuE,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EACvEC,OAAO,EAAE;EACX,OAAO1E,IAAI,CAACuE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;AAEDgD,MAAM,CAACC,OAAO,GAAG;EACftH,gBAAgB,EAAEA,gBAAgB;EAClCC,gBAAgB,EAAEA,gBAAgB;EAClCC,oBAAoB,EAAEA,oBAAoB;EAC1CC,mBAAmB,EAAEA;AACvB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}