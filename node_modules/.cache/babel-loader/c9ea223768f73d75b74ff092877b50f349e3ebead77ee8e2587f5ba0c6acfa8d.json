{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar SyncMapItemList = require('./syncMap/syncMapItem').SyncMapItemList;\nvar SyncMapPermissionList = require('./syncMap/syncMapPermission').SyncMapPermissionList;\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar SyncMapList;\nvar SyncMapPage;\nvar SyncMapInstance;\nvar SyncMapContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SyncMapList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Sync.V1.ServiceContext.SyncMapList\n *\n * @param {Twilio.Sync.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The unique SID identifier of the Service Instance that hosts this Map object.\n */\n/* jshint ignore:end */\nSyncMapList = function SyncMapList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function syncMaps\n   * @memberof Twilio.Sync.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Sync.V1.ServiceContext.SyncMapContext}\n   */\n  /* jshint ignore:end */\n  function SyncMapListInstance(sid) {\n    return SyncMapListInstance.get(sid);\n  }\n  SyncMapListInstance._version = version;\n  // Path Solution\n  SyncMapListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  SyncMapListInstance._uri = _.template('/Services/<%= serviceSid %>/Maps' // jshint ignore:line\n  )(SyncMapListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a SyncMapInstance\n   *\n   * @function create\n   * @memberof Twilio.Sync.V1.ServiceContext.SyncMapList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] - Human-readable name for this map\n   * @param {number} [opts.ttl] - Alias for collection_ttl\n   * @param {number} [opts.collectionTtl] -\n   *          Time-to-live of this Map in seconds, defaults to no expiration.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SyncMapInstance\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'Ttl': _.get(opts, 'ttl'),\n      'CollectionTtl': _.get(opts, 'collectionTtl')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SyncMapInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams SyncMapInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Sync.V1.ServiceContext.SyncMapList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SyncMapInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Sync.V1.ServiceContext.SyncMapList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SyncMapInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Sync.V1.ServiceContext.SyncMapList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SyncMapPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SyncMapInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Sync.V1.ServiceContext.SyncMapList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SyncMapPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a sync_map\n   *\n   * @function get\n   * @memberof Twilio.Sync.V1.ServiceContext.SyncMapList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.Sync.V1.ServiceContext.SyncMapContext}\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.get = function get(sid) {\n    return new SyncMapContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Sync.V1.ServiceContext.SyncMapList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  SyncMapListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return SyncMapListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SyncMapPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Sync.V1.ServiceContext.SyncMapPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SyncMapSolution} solution - Path solution\n *\n * @returns SyncMapPage\n */\n/* jshint ignore:end */\nSyncMapPage = function SyncMapPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(SyncMapPage.prototype, Page.prototype);\nSyncMapPage.prototype.constructor = SyncMapPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SyncMapInstance\n *\n * @function getInstance\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapPage#\n *\n * @param {SyncMapPayload} payload - Payload response from the API\n *\n * @returns SyncMapInstance\n */\n/* jshint ignore:end */\nSyncMapPage.prototype.getInstance = function getInstance(payload) {\n  return new SyncMapInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSyncMapPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nSyncMapPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SyncMapContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Sync.V1.ServiceContext.SyncMapInstance\n *\n * @property {string} sid - The unique 34-character SID identifier of the Map.\n * @property {string} uniqueName - The unique and addressable name of this Map.\n * @property {string} accountSid - The unique SID identifier of the Twilio Account.\n * @property {string} serviceSid -\n *          The unique SID identifier of the Service Instance that hosts this Map object.\n * @property {string} url - The absolute URL for this Map.\n * @property {string} links -\n *          A dictionary of URL links to nested resources of this Map.\n * @property {string} revision -\n *          Contains the current revision of this Map, represented by a string identifier.\n * @property {Date} dateExpires -\n *          Contains the date this Map expires and gets deleted automatically.\n * @property {Date} dateCreated -\n *          The date this Map was created, given in UTC ISO 8601 format.\n * @property {Date} dateUpdated -\n *          Specifies the date this Map was last updated, given in UTC ISO 8601 format.\n * @property {string} createdBy - The identity of the Map creator.\n *\n * @param {V1} version - Version of the resource\n * @param {SyncMapPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The unique SID identifier of the Service Instance that hosts this Map object.\n * @param {sid_like} sid - The sid\n */\n/* jshint ignore:end */\nSyncMapInstance = function SyncMapInstance(version, payload, serviceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.revision = payload.revision; // jshint ignore:line\n  this.dateExpires = deserialize.iso8601DateTime(payload.date_expires); // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.createdBy = payload.created_by; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(SyncMapInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new SyncMapContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SyncMapInstance\n *\n * @function fetch\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n/* jshint ignore:end */\nSyncMapInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a SyncMapInstance\n *\n * @function remove\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n/* jshint ignore:end */\nSyncMapInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a SyncMapInstance\n *\n * @function update\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.ttl] - Alias for collection_ttl\n * @param {number} [opts.collectionTtl] - New time-to-live of this Map in seconds.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n/* jshint ignore:end */\nSyncMapInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the syncMapItems\n *\n * @function syncMapItems\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapInstance#\n *\n * @returns {Twilio.Sync.V1.ServiceContext.SyncMapContext.SyncMapItemList}\n */\n/* jshint ignore:end */\nSyncMapInstance.prototype.syncMapItems = function syncMapItems() {\n  return this._proxy.syncMapItems;\n};\n\n/* jshint ignore:start */\n/**\n * Access the syncMapPermissions\n *\n * @function syncMapPermissions\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapInstance#\n *\n * @returns {Twilio.Sync.V1.ServiceContext.SyncMapContext.SyncMapPermissionList}\n */\n/* jshint ignore:end */\nSyncMapInstance.prototype.syncMapPermissions = function syncMapPermissions() {\n  return this._proxy.syncMapPermissions;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSyncMapInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nSyncMapInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SyncMapContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Sync.V1.ServiceContext.SyncMapContext\n *\n * @property {Twilio.Sync.V1.ServiceContext.SyncMapContext.SyncMapItemList} syncMapItems -\n *          syncMapItems resource\n * @property {Twilio.Sync.V1.ServiceContext.SyncMapContext.SyncMapPermissionList} syncMapPermissions -\n *          syncMapPermissions resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} serviceSid - The service_sid\n * @param {sid_like} sid - The sid\n */\n/* jshint ignore:end */\nSyncMapContext = function SyncMapContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid\n  };\n  this._uri = _.template('/Services/<%= serviceSid %>/Maps/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._syncMapItems = undefined;\n  this._syncMapPermissions = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SyncMapInstance\n *\n * @function fetch\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n/* jshint ignore:end */\nSyncMapContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SyncMapInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a SyncMapInstance\n *\n * @function remove\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n/* jshint ignore:end */\nSyncMapContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a SyncMapInstance\n *\n * @function update\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapContext#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.ttl] - Alias for collection_ttl\n * @param {number} [opts.collectionTtl] - New time-to-live of this Map in seconds.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n/* jshint ignore:end */\nSyncMapContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Ttl': _.get(opts, 'ttl'),\n    'CollectionTtl': _.get(opts, 'collectionTtl')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SyncMapInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(SyncMapContext.prototype, 'syncMapItems', {\n  get: function () {\n    if (!this._syncMapItems) {\n      this._syncMapItems = new SyncMapItemList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n    return this._syncMapItems;\n  }\n});\nObject.defineProperty(SyncMapContext.prototype, 'syncMapPermissions', {\n  get: function () {\n    if (!this._syncMapPermissions) {\n      this._syncMapPermissions = new SyncMapPermissionList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n    return this._syncMapPermissions;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSyncMapContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nSyncMapContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  SyncMapList: SyncMapList,\n  SyncMapPage: SyncMapPage,\n  SyncMapInstance: SyncMapInstance,\n  SyncMapContext: SyncMapContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","SyncMapItemList","SyncMapPermissionList","deserialize","values","SyncMapList","SyncMapPage","SyncMapInstance","SyncMapContext","version","serviceSid","SyncMapListInstance","sid","get","_version","_solution","_uri","template","create","opts","callback","isFunction","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","pageLimit","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","uniqueName","unique_name","accountSid","account_sid","service_sid","url","links","revision","dateExpires","iso8601DateTime","date_expires","dateCreated","date_created","dateUpdated","date_updated","createdBy","created_by","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","syncMapItems","syncMapPermissions","_syncMapItems","_syncMapPermissions","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/sync/v1/service/syncMap.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar SyncMapItemList = require('./syncMap/syncMapItem').SyncMapItemList;\nvar SyncMapPermissionList = require(\n    './syncMap/syncMapPermission').SyncMapPermissionList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar SyncMapList;\nvar SyncMapPage;\nvar SyncMapInstance;\nvar SyncMapContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SyncMapList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Sync.V1.ServiceContext.SyncMapList\n *\n * @param {Twilio.Sync.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The unique SID identifier of the Service Instance that hosts this Map object.\n */\n/* jshint ignore:end */\nSyncMapList = function SyncMapList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function syncMaps\n   * @memberof Twilio.Sync.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Sync.V1.ServiceContext.SyncMapContext}\n   */\n  /* jshint ignore:end */\n  function SyncMapListInstance(sid) {\n    return SyncMapListInstance.get(sid);\n  }\n\n  SyncMapListInstance._version = version;\n  // Path Solution\n  SyncMapListInstance._solution = {serviceSid: serviceSid};\n  SyncMapListInstance._uri = _.template(\n    '/Services/<%= serviceSid %>/Maps' // jshint ignore:line\n  )(SyncMapListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a SyncMapInstance\n   *\n   * @function create\n   * @memberof Twilio.Sync.V1.ServiceContext.SyncMapList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] - Human-readable name for this map\n   * @param {number} [opts.ttl] - Alias for collection_ttl\n   * @param {number} [opts.collectionTtl] -\n   *          Time-to-live of this Map in seconds, defaults to no expiration.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SyncMapInstance\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'Ttl': _.get(opts, 'ttl'),\n      'CollectionTtl': _.get(opts, 'collectionTtl')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SyncMapInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams SyncMapInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Sync.V1.ServiceContext.SyncMapList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SyncMapInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Sync.V1.ServiceContext.SyncMapList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SyncMapInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Sync.V1.ServiceContext.SyncMapList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SyncMapPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SyncMapInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Sync.V1.ServiceContext.SyncMapList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SyncMapPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a sync_map\n   *\n   * @function get\n   * @memberof Twilio.Sync.V1.ServiceContext.SyncMapList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.Sync.V1.ServiceContext.SyncMapContext}\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.get = function get(sid) {\n    return new SyncMapContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Sync.V1.ServiceContext.SyncMapList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SyncMapListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SyncMapListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SyncMapPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Sync.V1.ServiceContext.SyncMapPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SyncMapSolution} solution - Path solution\n *\n * @returns SyncMapPage\n */\n/* jshint ignore:end */\nSyncMapPage = function SyncMapPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SyncMapPage.prototype, Page.prototype);\nSyncMapPage.prototype.constructor = SyncMapPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SyncMapInstance\n *\n * @function getInstance\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapPage#\n *\n * @param {SyncMapPayload} payload - Payload response from the API\n *\n * @returns SyncMapInstance\n */\n/* jshint ignore:end */\nSyncMapPage.prototype.getInstance = function getInstance(payload) {\n  return new SyncMapInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSyncMapPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSyncMapPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SyncMapContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Sync.V1.ServiceContext.SyncMapInstance\n *\n * @property {string} sid - The unique 34-character SID identifier of the Map.\n * @property {string} uniqueName - The unique and addressable name of this Map.\n * @property {string} accountSid - The unique SID identifier of the Twilio Account.\n * @property {string} serviceSid -\n *          The unique SID identifier of the Service Instance that hosts this Map object.\n * @property {string} url - The absolute URL for this Map.\n * @property {string} links -\n *          A dictionary of URL links to nested resources of this Map.\n * @property {string} revision -\n *          Contains the current revision of this Map, represented by a string identifier.\n * @property {Date} dateExpires -\n *          Contains the date this Map expires and gets deleted automatically.\n * @property {Date} dateCreated -\n *          The date this Map was created, given in UTC ISO 8601 format.\n * @property {Date} dateUpdated -\n *          Specifies the date this Map was last updated, given in UTC ISO 8601 format.\n * @property {string} createdBy - The identity of the Map creator.\n *\n * @param {V1} version - Version of the resource\n * @param {SyncMapPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The unique SID identifier of the Service Instance that hosts this Map object.\n * @param {sid_like} sid - The sid\n */\n/* jshint ignore:end */\nSyncMapInstance = function SyncMapInstance(version, payload, serviceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.revision = payload.revision; // jshint ignore:line\n  this.dateExpires = deserialize.iso8601DateTime(payload.date_expires); // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.createdBy = payload.created_by; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(SyncMapInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new SyncMapContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SyncMapInstance\n *\n * @function fetch\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n/* jshint ignore:end */\nSyncMapInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a SyncMapInstance\n *\n * @function remove\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n/* jshint ignore:end */\nSyncMapInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a SyncMapInstance\n *\n * @function update\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.ttl] - Alias for collection_ttl\n * @param {number} [opts.collectionTtl] - New time-to-live of this Map in seconds.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n/* jshint ignore:end */\nSyncMapInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the syncMapItems\n *\n * @function syncMapItems\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapInstance#\n *\n * @returns {Twilio.Sync.V1.ServiceContext.SyncMapContext.SyncMapItemList}\n */\n/* jshint ignore:end */\nSyncMapInstance.prototype.syncMapItems = function syncMapItems() {\n  return this._proxy.syncMapItems;\n};\n\n/* jshint ignore:start */\n/**\n * Access the syncMapPermissions\n *\n * @function syncMapPermissions\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapInstance#\n *\n * @returns {Twilio.Sync.V1.ServiceContext.SyncMapContext.SyncMapPermissionList}\n */\n/* jshint ignore:end */\nSyncMapInstance.prototype.syncMapPermissions = function syncMapPermissions() {\n  return this._proxy.syncMapPermissions;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSyncMapInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSyncMapInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SyncMapContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Sync.V1.ServiceContext.SyncMapContext\n *\n * @property {Twilio.Sync.V1.ServiceContext.SyncMapContext.SyncMapItemList} syncMapItems -\n *          syncMapItems resource\n * @property {Twilio.Sync.V1.ServiceContext.SyncMapContext.SyncMapPermissionList} syncMapPermissions -\n *          syncMapPermissions resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} serviceSid - The service_sid\n * @param {sid_like} sid - The sid\n */\n/* jshint ignore:end */\nSyncMapContext = function SyncMapContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, sid: sid, };\n  this._uri = _.template(\n    '/Services/<%= serviceSid %>/Maps/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._syncMapItems = undefined;\n  this._syncMapPermissions = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SyncMapInstance\n *\n * @function fetch\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n/* jshint ignore:end */\nSyncMapContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SyncMapInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a SyncMapInstance\n *\n * @function remove\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n/* jshint ignore:end */\nSyncMapContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a SyncMapInstance\n *\n * @function update\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapContext#\n *\n * @param {object} [opts] - Options for request\n * @param {number} [opts.ttl] - Alias for collection_ttl\n * @param {number} [opts.collectionTtl] - New time-to-live of this Map in seconds.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n/* jshint ignore:end */\nSyncMapContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'Ttl': _.get(opts, 'ttl'), 'CollectionTtl': _.get(opts, 'collectionTtl')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SyncMapInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(SyncMapContext.prototype,\n  'syncMapItems', {\n  get: function() {\n    if (!this._syncMapItems) {\n      this._syncMapItems = new SyncMapItemList(\n        this._version,\n        this._solution.serviceSid,\n        this._solution.sid\n      );\n    }\n    return this._syncMapItems;\n  }\n});\n\nObject.defineProperty(SyncMapContext.prototype,\n  'syncMapPermissions', {\n  get: function() {\n    if (!this._syncMapPermissions) {\n      this._syncMapPermissions = new SyncMapPermissionList(\n        this._version,\n        this._solution.serviceSid,\n        this._solution.sid\n      );\n    }\n    return this._syncMapPermissions;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Sync.V1.ServiceContext.SyncMapContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSyncMapContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSyncMapContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SyncMapList: SyncMapList,\n  SyncMapPage: SyncMapPage,\n  SyncMapInstance: SyncMapInstance,\n  SyncMapContext: SyncMapContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}