{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar AuthTypesList = require('./domain/authTypes').AuthTypesList;\nvar CredentialListMappingList = require('./domain/credentialListMapping').CredentialListMappingList;\nvar IpAccessControlListMappingList = require('./domain/ipAccessControlListMapping').IpAccessControlListMappingList;\nvar Page = require('../../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../../base/values'); /* jshint ignore:line */\n\nvar DomainList;\nvar DomainPage;\nvar DomainInstance;\nvar DomainContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the DomainList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nDomainList = function DomainList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function domains\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext}\n   */\n  /* jshint ignore:end */\n  function DomainListInstance(sid) {\n    return DomainListInstance.get(sid);\n  }\n  DomainListInstance._version = version;\n  // Path Solution\n  DomainListInstance._solution = {\n    accountSid: accountSid\n  };\n  DomainListInstance._uri = _.template('/Accounts/<%= accountSid %>/SIP/Domains.json' // jshint ignore:line\n  )(DomainListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams DomainInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  DomainListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists DomainInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DomainListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of DomainInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DomainListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DomainPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of DomainInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DomainListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DomainPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a DomainInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.domainName -\n   *          The unique address on Twilio to route SIP traffic\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {string} [opts.voiceUrl] - The URL we should call when receiving a call\n   * @param {string} [opts.voiceMethod] - The HTTP method to use with voice_url\n   * @param {string} [opts.voiceFallbackUrl] -\n   *          The URL we should call when an error occurs in executing TwiML\n   * @param {string} [opts.voiceFallbackMethod] -\n   *          The HTTP method to use with voice_fallback_url\n   * @param {string} [opts.voiceStatusCallbackUrl] -\n   *          The URL that we should call to pass status updates\n   * @param {string} [opts.voiceStatusCallbackMethod] -\n   *          The HTTP method we should use to call `voice_status_callback_url`\n   * @param {boolean} [opts.sipRegistration] - Whether SIP registration is allowed\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed DomainInstance\n   */\n  /* jshint ignore:end */\n  DomainListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.domainName)) {\n      throw new Error('Required parameter \"opts.domainName\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'DomainName': _.get(opts, 'domainName'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'VoiceUrl': _.get(opts, 'voiceUrl'),\n      'VoiceMethod': _.get(opts, 'voiceMethod'),\n      'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),\n      'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),\n      'VoiceStatusCallbackUrl': _.get(opts, 'voiceStatusCallbackUrl'),\n      'VoiceStatusCallbackMethod': _.get(opts, 'voiceStatusCallbackMethod'),\n      'SipRegistration': serialize.bool(_.get(opts, 'sipRegistration'))\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DomainInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a domain\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext}\n   */\n  /* jshint ignore:end */\n  DomainListInstance.get = function get(sid) {\n    return new DomainContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  DomainListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  DomainListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return DomainListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the DomainPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {DomainSolution} solution - Path solution\n *\n * @returns DomainPage\n */\n/* jshint ignore:end */\nDomainPage = function DomainPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(DomainPage.prototype, Page.prototype);\nDomainPage.prototype.constructor = DomainPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of DomainInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainPage#\n *\n * @param {DomainPayload} payload - Payload response from the API\n *\n * @returns DomainInstance\n */\n/* jshint ignore:end */\nDomainPage.prototype.getInstance = function getInstance(payload) {\n  return new DomainInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDomainPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nDomainPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the DomainContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} apiVersion - The API version used to process the call\n * @property {string} authType - The types of authentication mapped to the domain\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} domainName -\n *          The unique address on Twilio to route SIP traffic\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {string} voiceFallbackMethod -\n *          The HTTP method used with voice_fallback_url\n * @property {string} voiceFallbackUrl -\n *          The URL we call when an error occurs while executing TwiML\n * @property {string} voiceMethod - The HTTP method to use with voice_url\n * @property {string} voiceStatusCallbackMethod -\n *          The HTTP method we use to call voice_status_callback_url\n * @property {string} voiceStatusCallbackUrl -\n *          The URL that we call with status updates\n * @property {string} voiceUrl - The URL we call when receiving a call\n * @property {string} subresourceUris -\n *          A list mapping resources associated with the SIP Domain resource\n * @property {boolean} sipRegistration - Whether SIP registration is allowed\n *\n * @param {V2010} version - Version of the resource\n * @param {DomainPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nDomainInstance = function DomainInstance(version, payload, accountSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.authType = payload.auth_type; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.domainName = payload.domain_name; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.voiceFallbackMethod = payload.voice_fallback_method; // jshint ignore:line\n  this.voiceFallbackUrl = payload.voice_fallback_url; // jshint ignore:line\n  this.voiceMethod = payload.voice_method; // jshint ignore:line\n  this.voiceStatusCallbackMethod = payload.voice_status_callback_method; // jshint ignore:line\n  this.voiceStatusCallbackUrl = payload.voice_status_callback_url; // jshint ignore:line\n  this.voiceUrl = payload.voice_url; // jshint ignore:line\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n  this.sipRegistration = payload.sip_registration; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(DomainInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new DomainContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a DomainInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n/* jshint ignore:end */\nDomainInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a DomainInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.voiceFallbackMethod] -\n *          The HTTP method used with voice_fallback_url\n * @param {string} [opts.voiceFallbackUrl] -\n *          The URL we should call when an error occurs in executing TwiML\n * @param {string} [opts.voiceMethod] -\n *          The HTTP method we should use with voice_url\n * @param {string} [opts.voiceStatusCallbackMethod] -\n *          The HTTP method we should use to call voice_status_callback_url\n * @param {string} [opts.voiceStatusCallbackUrl] -\n *          The URL that we should call to pass status updates\n * @param {string} [opts.voiceUrl] - The URL we should call when receiving a call\n * @param {boolean} [opts.sipRegistration] - Whether SIP registration is allowed\n * @param {string} [opts.domainName] -\n *          The unique address on Twilio to route SIP traffic\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n/* jshint ignore:end */\nDomainInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a DomainInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n/* jshint ignore:end */\nDomainInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the ipAccessControlListMappings\n *\n * @function ipAccessControlListMappings\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList}\n */\n/* jshint ignore:end */\nDomainInstance.prototype.ipAccessControlListMappings = function ipAccessControlListMappings() {\n  return this._proxy.ipAccessControlListMappings;\n};\n\n/* jshint ignore:start */\n/**\n * Access the credentialListMappings\n *\n * @function credentialListMappings\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.CredentialListMappingList}\n */\n/* jshint ignore:end */\nDomainInstance.prototype.credentialListMappings = function credentialListMappings() {\n  return this._proxy.credentialListMappings;\n};\n\n/* jshint ignore:start */\n/**\n * Access the auth\n *\n * @function auth\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesList}\n */\n/* jshint ignore:end */\nDomainInstance.prototype.auth = function auth() {\n  return this._proxy.auth;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDomainInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nDomainInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the DomainContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext\n *\n * @property {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList} ipAccessControlListMappings -\n *          ipAccessControlListMappings resource\n * @property {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.CredentialListMappingList} credentialListMappings -\n *          credentialListMappings resource\n * @property {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesList} auth -\n *          auth resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nDomainContext = function DomainContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = _.template('/Accounts/<%= accountSid %>/SIP/Domains/<%= sid %>.json' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._ipAccessControlListMappings = undefined;\n  this._credentialListMappings = undefined;\n  this._auth = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a DomainInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n/* jshint ignore:end */\nDomainContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new DomainInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a DomainInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.voiceFallbackMethod] -\n *          The HTTP method used with voice_fallback_url\n * @param {string} [opts.voiceFallbackUrl] -\n *          The URL we should call when an error occurs in executing TwiML\n * @param {string} [opts.voiceMethod] -\n *          The HTTP method we should use with voice_url\n * @param {string} [opts.voiceStatusCallbackMethod] -\n *          The HTTP method we should use to call voice_status_callback_url\n * @param {string} [opts.voiceStatusCallbackUrl] -\n *          The URL that we should call to pass status updates\n * @param {string} [opts.voiceUrl] - The URL we should call when receiving a call\n * @param {boolean} [opts.sipRegistration] - Whether SIP registration is allowed\n * @param {string} [opts.domainName] -\n *          The unique address on Twilio to route SIP traffic\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n/* jshint ignore:end */\nDomainContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),\n    'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),\n    'VoiceMethod': _.get(opts, 'voiceMethod'),\n    'VoiceStatusCallbackMethod': _.get(opts, 'voiceStatusCallbackMethod'),\n    'VoiceStatusCallbackUrl': _.get(opts, 'voiceStatusCallbackUrl'),\n    'VoiceUrl': _.get(opts, 'voiceUrl'),\n    'SipRegistration': serialize.bool(_.get(opts, 'sipRegistration')),\n    'DomainName': _.get(opts, 'domainName')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new DomainInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a DomainInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n/* jshint ignore:end */\nDomainContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(DomainContext.prototype, 'ipAccessControlListMappings', {\n  get: function () {\n    if (!this._ipAccessControlListMappings) {\n      this._ipAccessControlListMappings = new IpAccessControlListMappingList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n    return this._ipAccessControlListMappings;\n  }\n});\nObject.defineProperty(DomainContext.prototype, 'credentialListMappings', {\n  get: function () {\n    if (!this._credentialListMappings) {\n      this._credentialListMappings = new CredentialListMappingList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n    return this._credentialListMappings;\n  }\n});\nObject.defineProperty(DomainContext.prototype, 'auth', {\n  get: function () {\n    if (!this._auth) {\n      this._auth = new AuthTypesList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n    return this._auth;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDomainContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nDomainContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  DomainList: DomainList,\n  DomainPage: DomainPage,\n  DomainInstance: DomainInstance,\n  DomainContext: DomainContext\n};","map":{"version":3,"names":["Q","require","_","util","AuthTypesList","CredentialListMappingList","IpAccessControlListMappingList","Page","deserialize","serialize","values","DomainList","DomainPage","DomainInstance","DomainContext","version","accountSid","DomainListInstance","sid","get","_version","_solution","_uri","template","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","domainName","bool","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","apiVersion","api_version","authType","auth_type","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","domain_name","friendlyName","friendly_name","voiceFallbackMethod","voice_fallback_method","voiceFallbackUrl","voice_fallback_url","voiceMethod","voice_method","voiceStatusCallbackMethod","voice_status_callback_method","voiceStatusCallbackUrl","voice_status_callback_url","voiceUrl","voice_url","subresourceUris","subresource_uris","sipRegistration","sip_registration","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","ipAccessControlListMappings","credentialListMappings","auth","_ipAccessControlListMappings","_credentialListMappings","_auth","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/api/v2010/account/sip/domain.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar AuthTypesList = require('./domain/authTypes').AuthTypesList;\nvar CredentialListMappingList = require(\n    './domain/credentialListMapping').CredentialListMappingList;\nvar IpAccessControlListMappingList = require(\n    './domain/ipAccessControlListMapping').IpAccessControlListMappingList;\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar DomainList;\nvar DomainPage;\nvar DomainInstance;\nvar DomainContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the DomainList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nDomainList = function DomainList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function domains\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext}\n   */\n  /* jshint ignore:end */\n  function DomainListInstance(sid) {\n    return DomainListInstance.get(sid);\n  }\n\n  DomainListInstance._version = version;\n  // Path Solution\n  DomainListInstance._solution = {accountSid: accountSid};\n  DomainListInstance._uri = _.template(\n    '/Accounts/<%= accountSid %>/SIP/Domains.json' // jshint ignore:line\n  )(DomainListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams DomainInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  DomainListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists DomainInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DomainListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of DomainInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DomainListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DomainPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of DomainInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DomainListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DomainPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a DomainInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.domainName -\n   *          The unique address on Twilio to route SIP traffic\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {string} [opts.voiceUrl] - The URL we should call when receiving a call\n   * @param {string} [opts.voiceMethod] - The HTTP method to use with voice_url\n   * @param {string} [opts.voiceFallbackUrl] -\n   *          The URL we should call when an error occurs in executing TwiML\n   * @param {string} [opts.voiceFallbackMethod] -\n   *          The HTTP method to use with voice_fallback_url\n   * @param {string} [opts.voiceStatusCallbackUrl] -\n   *          The URL that we should call to pass status updates\n   * @param {string} [opts.voiceStatusCallbackMethod] -\n   *          The HTTP method we should use to call `voice_status_callback_url`\n   * @param {boolean} [opts.sipRegistration] - Whether SIP registration is allowed\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed DomainInstance\n   */\n  /* jshint ignore:end */\n  DomainListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.domainName)) {\n      throw new Error('Required parameter \"opts.domainName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'DomainName': _.get(opts, 'domainName'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'VoiceUrl': _.get(opts, 'voiceUrl'),\n      'VoiceMethod': _.get(opts, 'voiceMethod'),\n      'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),\n      'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),\n      'VoiceStatusCallbackUrl': _.get(opts, 'voiceStatusCallbackUrl'),\n      'VoiceStatusCallbackMethod': _.get(opts, 'voiceStatusCallbackMethod'),\n      'SipRegistration': serialize.bool(_.get(opts, 'sipRegistration'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DomainInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a domain\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext}\n   */\n  /* jshint ignore:end */\n  DomainListInstance.get = function get(sid) {\n    return new DomainContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  DomainListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  DomainListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return DomainListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DomainPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {DomainSolution} solution - Path solution\n *\n * @returns DomainPage\n */\n/* jshint ignore:end */\nDomainPage = function DomainPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(DomainPage.prototype, Page.prototype);\nDomainPage.prototype.constructor = DomainPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of DomainInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainPage#\n *\n * @param {DomainPayload} payload - Payload response from the API\n *\n * @returns DomainInstance\n */\n/* jshint ignore:end */\nDomainPage.prototype.getInstance = function getInstance(payload) {\n  return new DomainInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDomainPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nDomainPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DomainContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} apiVersion - The API version used to process the call\n * @property {string} authType - The types of authentication mapped to the domain\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} domainName -\n *          The unique address on Twilio to route SIP traffic\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {string} voiceFallbackMethod -\n *          The HTTP method used with voice_fallback_url\n * @property {string} voiceFallbackUrl -\n *          The URL we call when an error occurs while executing TwiML\n * @property {string} voiceMethod - The HTTP method to use with voice_url\n * @property {string} voiceStatusCallbackMethod -\n *          The HTTP method we use to call voice_status_callback_url\n * @property {string} voiceStatusCallbackUrl -\n *          The URL that we call with status updates\n * @property {string} voiceUrl - The URL we call when receiving a call\n * @property {string} subresourceUris -\n *          A list mapping resources associated with the SIP Domain resource\n * @property {boolean} sipRegistration - Whether SIP registration is allowed\n *\n * @param {V2010} version - Version of the resource\n * @param {DomainPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nDomainInstance = function DomainInstance(version, payload, accountSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.authType = payload.auth_type; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.domainName = payload.domain_name; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.voiceFallbackMethod = payload.voice_fallback_method; // jshint ignore:line\n  this.voiceFallbackUrl = payload.voice_fallback_url; // jshint ignore:line\n  this.voiceMethod = payload.voice_method; // jshint ignore:line\n  this.voiceStatusCallbackMethod = payload.voice_status_callback_method; // jshint ignore:line\n  this.voiceStatusCallbackUrl = payload.voice_status_callback_url; // jshint ignore:line\n  this.voiceUrl = payload.voice_url; // jshint ignore:line\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n  this.sipRegistration = payload.sip_registration; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(DomainInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new DomainContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a DomainInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n/* jshint ignore:end */\nDomainInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a DomainInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.voiceFallbackMethod] -\n *          The HTTP method used with voice_fallback_url\n * @param {string} [opts.voiceFallbackUrl] -\n *          The URL we should call when an error occurs in executing TwiML\n * @param {string} [opts.voiceMethod] -\n *          The HTTP method we should use with voice_url\n * @param {string} [opts.voiceStatusCallbackMethod] -\n *          The HTTP method we should use to call voice_status_callback_url\n * @param {string} [opts.voiceStatusCallbackUrl] -\n *          The URL that we should call to pass status updates\n * @param {string} [opts.voiceUrl] - The URL we should call when receiving a call\n * @param {boolean} [opts.sipRegistration] - Whether SIP registration is allowed\n * @param {string} [opts.domainName] -\n *          The unique address on Twilio to route SIP traffic\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n/* jshint ignore:end */\nDomainInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a DomainInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n/* jshint ignore:end */\nDomainInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the ipAccessControlListMappings\n *\n * @function ipAccessControlListMappings\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList}\n */\n/* jshint ignore:end */\nDomainInstance.prototype.ipAccessControlListMappings = function\n    ipAccessControlListMappings() {\n  return this._proxy.ipAccessControlListMappings;\n};\n\n/* jshint ignore:start */\n/**\n * Access the credentialListMappings\n *\n * @function credentialListMappings\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.CredentialListMappingList}\n */\n/* jshint ignore:end */\nDomainInstance.prototype.credentialListMappings = function\n    credentialListMappings() {\n  return this._proxy.credentialListMappings;\n};\n\n/* jshint ignore:start */\n/**\n * Access the auth\n *\n * @function auth\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesList}\n */\n/* jshint ignore:end */\nDomainInstance.prototype.auth = function auth() {\n  return this._proxy.auth;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDomainInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nDomainInstance.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DomainContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext\n *\n * @property {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList} ipAccessControlListMappings -\n *          ipAccessControlListMappings resource\n * @property {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.CredentialListMappingList} credentialListMappings -\n *          credentialListMappings resource\n * @property {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesList} auth -\n *          auth resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nDomainContext = function DomainContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, sid: sid, };\n  this._uri = _.template(\n    '/Accounts/<%= accountSid %>/SIP/Domains/<%= sid %>.json' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._ipAccessControlListMappings = undefined;\n  this._credentialListMappings = undefined;\n  this._auth = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a DomainInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n/* jshint ignore:end */\nDomainContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new DomainInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a DomainInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.voiceFallbackMethod] -\n *          The HTTP method used with voice_fallback_url\n * @param {string} [opts.voiceFallbackUrl] -\n *          The URL we should call when an error occurs in executing TwiML\n * @param {string} [opts.voiceMethod] -\n *          The HTTP method we should use with voice_url\n * @param {string} [opts.voiceStatusCallbackMethod] -\n *          The HTTP method we should use to call voice_status_callback_url\n * @param {string} [opts.voiceStatusCallbackUrl] -\n *          The URL that we should call to pass status updates\n * @param {string} [opts.voiceUrl] - The URL we should call when receiving a call\n * @param {boolean} [opts.sipRegistration] - Whether SIP registration is allowed\n * @param {string} [opts.domainName] -\n *          The unique address on Twilio to route SIP traffic\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n/* jshint ignore:end */\nDomainContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),\n    'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),\n    'VoiceMethod': _.get(opts, 'voiceMethod'),\n    'VoiceStatusCallbackMethod': _.get(opts, 'voiceStatusCallbackMethod'),\n    'VoiceStatusCallbackUrl': _.get(opts, 'voiceStatusCallbackUrl'),\n    'VoiceUrl': _.get(opts, 'voiceUrl'),\n    'SipRegistration': serialize.bool(_.get(opts, 'sipRegistration')),\n    'DomainName': _.get(opts, 'domainName')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new DomainInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a DomainInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DomainInstance\n */\n/* jshint ignore:end */\nDomainContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(DomainContext.prototype,\n  'ipAccessControlListMappings', {\n  get: function() {\n    if (!this._ipAccessControlListMappings) {\n      this._ipAccessControlListMappings = new IpAccessControlListMappingList(\n        this._version,\n        this._solution.accountSid,\n        this._solution.sid\n      );\n    }\n    return this._ipAccessControlListMappings;\n  }\n});\n\nObject.defineProperty(DomainContext.prototype,\n  'credentialListMappings', {\n  get: function() {\n    if (!this._credentialListMappings) {\n      this._credentialListMappings = new CredentialListMappingList(\n        this._version,\n        this._solution.accountSid,\n        this._solution.sid\n      );\n    }\n    return this._credentialListMappings;\n  }\n});\n\nObject.defineProperty(DomainContext.prototype,\n  'auth', {\n  get: function() {\n    if (!this._auth) {\n      this._auth = new AuthTypesList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n    return this._auth;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDomainContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nDomainContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  DomainList: DomainList,\n  DomainPage: DomainPage,\n  DomainInstance: DomainInstance,\n  DomainContext: DomainContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}