{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar DeviceList;\nvar DevicePage;\nvar DeviceInstance;\nvar DeviceContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the DeviceList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeviceList\n *\n * @param {Twilio.Preview.DeployedDevices} version - Version of the resource\n * @param {string} fleetSid - The unique identifier of the Fleet.\n */\n/* jshint ignore:end */\nDeviceList = function DeviceList(version, fleetSid) {\n  /* jshint ignore:start */\n  /**\n   * @function devices\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.DeployedDevices.FleetContext.DeviceContext}\n   */\n  /* jshint ignore:end */\n  function DeviceListInstance(sid) {\n    return DeviceListInstance.get(sid);\n  }\n  DeviceListInstance._version = version;\n  // Path Solution\n  DeviceListInstance._solution = {\n    fleetSid: fleetSid\n  };\n  DeviceListInstance._uri = _.template('/Fleets/<%= fleetSid %>/Devices' // jshint ignore:line\n  )(DeviceListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a DeviceInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] - A unique, addressable name of this Device.\n   * @param {string} [opts.friendlyName] -\n   *          A human readable description for this Device.\n   * @param {string} [opts.identity] - An identifier of the Device user.\n   * @param {string} [opts.deploymentSid] - The unique SID of the Deployment group.\n   * @param {boolean} [opts.enabled] - The enabled\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed DeviceInstance\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Identity': _.get(opts, 'identity'),\n      'DeploymentSid': _.get(opts, 'deploymentSid'),\n      'Enabled': serialize.bool(_.get(opts, 'enabled'))\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DeviceInstance(this._version, payload, this._solution.fleetSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams DeviceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.deploymentSid] -\n   *          Find all Devices grouped under the specified Deployment.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists DeviceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.deploymentSid] -\n   *          Find all Devices grouped under the specified Deployment.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of DeviceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.deploymentSid] -\n   *          Find all Devices grouped under the specified Deployment.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'DeploymentSid': _.get(opts, 'deploymentSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DevicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of DeviceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DevicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a device\n   *\n   * @function get\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {string} sid - A string that uniquely identifies the Device.\n   *\n   * @returns {Twilio.Preview.DeployedDevices.FleetContext.DeviceContext}\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.get = function get(sid) {\n    return new DeviceContext(this._version, this._solution.fleetSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  DeviceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return DeviceListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the DevicePage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DevicePage\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {DeviceSolution} solution - Path solution\n *\n * @returns DevicePage\n */\n/* jshint ignore:end */\nDevicePage = function DevicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(DevicePage.prototype, Page.prototype);\nDevicePage.prototype.constructor = DevicePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of DeviceInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DevicePage#\n *\n * @param {DevicePayload} payload - Payload response from the API\n *\n * @returns DeviceInstance\n */\n/* jshint ignore:end */\nDevicePage.prototype.getInstance = function getInstance(payload) {\n  return new DeviceInstance(this._version, payload, this._solution.fleetSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DevicePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDevicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nDevicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the DeviceContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance\n *\n * @property {string} sid - A string that uniquely identifies this Device.\n * @property {string} url - URL of this Device.\n * @property {string} uniqueName - A unique, addressable name of this Device.\n * @property {string} friendlyName - A human readable description for this Device\n * @property {string} fleetSid - The unique identifier of the Fleet.\n * @property {boolean} enabled - Device enabled flag.\n * @property {string} accountSid - The unique SID that identifies this Account.\n * @property {string} identity - An identifier of the Device user.\n * @property {string} deploymentSid - The unique SID of the Deployment group.\n * @property {Date} dateCreated - The date this Device was created.\n * @property {Date} dateUpdated - The date this Device was updated.\n * @property {Date} dateAuthenticated - The date this Device was authenticated.\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {DevicePayload} payload - The instance payload\n * @param {sid_like} fleetSid - The unique identifier of the Fleet.\n * @param {sid_like} sid - A string that uniquely identifies the Device.\n */\n/* jshint ignore:end */\nDeviceInstance = function DeviceInstance(version, payload, fleetSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.fleetSid = payload.fleet_sid; // jshint ignore:line\n  this.enabled = payload.enabled; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.deploymentSid = payload.deployment_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.dateAuthenticated = deserialize.iso8601DateTime(payload.date_authenticated); // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    fleetSid: fleetSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(DeviceInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new DeviceContext(this._version, this._solution.fleetSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a DeviceInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n/* jshint ignore:end */\nDeviceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a DeviceInstance\n *\n * @function remove\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n/* jshint ignore:end */\nDeviceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a DeviceInstance\n *\n * @function update\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A human readable description for this Device.\n * @param {string} [opts.identity] - An identifier of the Device user.\n * @param {string} [opts.deploymentSid] - The unique SID of the Deployment group.\n * @param {boolean} [opts.enabled] - The enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n/* jshint ignore:end */\nDeviceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDeviceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nDeviceInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the DeviceContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeviceContext\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {sid_like} fleetSid - The fleet_sid\n * @param {sid_like} sid - A string that uniquely identifies the Device.\n */\n/* jshint ignore:end */\nDeviceContext = function DeviceContext(version, fleetSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    fleetSid: fleetSid,\n    sid: sid\n  };\n  this._uri = _.template('/Fleets/<%= fleetSid %>/Devices/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a DeviceInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n/* jshint ignore:end */\nDeviceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new DeviceInstance(this._version, payload, this._solution.fleetSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a DeviceInstance\n *\n * @function remove\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n/* jshint ignore:end */\nDeviceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a DeviceInstance\n *\n * @function update\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A human readable description for this Device.\n * @param {string} [opts.identity] - An identifier of the Device user.\n * @param {string} [opts.deploymentSid] - The unique SID of the Deployment group.\n * @param {boolean} [opts.enabled] - The enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n/* jshint ignore:end */\nDeviceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Identity': _.get(opts, 'identity'),\n    'DeploymentSid': _.get(opts, 'deploymentSid'),\n    'Enabled': serialize.bool(_.get(opts, 'enabled'))\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new DeviceInstance(this._version, payload, this._solution.fleetSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDeviceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nDeviceContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  DeviceList: DeviceList,\n  DevicePage: DevicePage,\n  DeviceInstance: DeviceInstance,\n  DeviceContext: DeviceContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","DeviceList","DevicePage","DeviceInstance","DeviceContext","version","fleetSid","DeviceListInstance","sid","get","_version","_solution","_uri","template","create","opts","callback","isFunction","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","pageLimit","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","url","uniqueName","unique_name","friendlyName","friendly_name","fleet_sid","enabled","accountSid","account_sid","identity","deploymentSid","deployment_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","dateAuthenticated","date_authenticated","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/preview/deployed_devices/fleet/device.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar DeviceList;\nvar DevicePage;\nvar DeviceInstance;\nvar DeviceContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the DeviceList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeviceList\n *\n * @param {Twilio.Preview.DeployedDevices} version - Version of the resource\n * @param {string} fleetSid - The unique identifier of the Fleet.\n */\n/* jshint ignore:end */\nDeviceList = function DeviceList(version, fleetSid) {\n  /* jshint ignore:start */\n  /**\n   * @function devices\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.DeployedDevices.FleetContext.DeviceContext}\n   */\n  /* jshint ignore:end */\n  function DeviceListInstance(sid) {\n    return DeviceListInstance.get(sid);\n  }\n\n  DeviceListInstance._version = version;\n  // Path Solution\n  DeviceListInstance._solution = {fleetSid: fleetSid};\n  DeviceListInstance._uri = _.template(\n    '/Fleets/<%= fleetSid %>/Devices' // jshint ignore:line\n  )(DeviceListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a DeviceInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] - A unique, addressable name of this Device.\n   * @param {string} [opts.friendlyName] -\n   *          A human readable description for this Device.\n   * @param {string} [opts.identity] - An identifier of the Device user.\n   * @param {string} [opts.deploymentSid] - The unique SID of the Deployment group.\n   * @param {boolean} [opts.enabled] - The enabled\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed DeviceInstance\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Identity': _.get(opts, 'identity'),\n      'DeploymentSid': _.get(opts, 'deploymentSid'),\n      'Enabled': serialize.bool(_.get(opts, 'enabled'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DeviceInstance(\n        this._version,\n        payload,\n        this._solution.fleetSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams DeviceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.deploymentSid] -\n   *          Find all Devices grouped under the specified Deployment.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists DeviceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.deploymentSid] -\n   *          Find all Devices grouped under the specified Deployment.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of DeviceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.deploymentSid] -\n   *          Find all Devices grouped under the specified Deployment.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'DeploymentSid': _.get(opts, 'deploymentSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DevicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of DeviceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DevicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a device\n   *\n   * @function get\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {string} sid - A string that uniquely identifies the Device.\n   *\n   * @returns {Twilio.Preview.DeployedDevices.FleetContext.DeviceContext}\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.get = function get(sid) {\n    return new DeviceContext(this._version, this._solution.fleetSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  DeviceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return DeviceListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DevicePage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DevicePage\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {DeviceSolution} solution - Path solution\n *\n * @returns DevicePage\n */\n/* jshint ignore:end */\nDevicePage = function DevicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(DevicePage.prototype, Page.prototype);\nDevicePage.prototype.constructor = DevicePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of DeviceInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DevicePage#\n *\n * @param {DevicePayload} payload - Payload response from the API\n *\n * @returns DeviceInstance\n */\n/* jshint ignore:end */\nDevicePage.prototype.getInstance = function getInstance(payload) {\n  return new DeviceInstance(this._version, payload, this._solution.fleetSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DevicePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDevicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nDevicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DeviceContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance\n *\n * @property {string} sid - A string that uniquely identifies this Device.\n * @property {string} url - URL of this Device.\n * @property {string} uniqueName - A unique, addressable name of this Device.\n * @property {string} friendlyName - A human readable description for this Device\n * @property {string} fleetSid - The unique identifier of the Fleet.\n * @property {boolean} enabled - Device enabled flag.\n * @property {string} accountSid - The unique SID that identifies this Account.\n * @property {string} identity - An identifier of the Device user.\n * @property {string} deploymentSid - The unique SID of the Deployment group.\n * @property {Date} dateCreated - The date this Device was created.\n * @property {Date} dateUpdated - The date this Device was updated.\n * @property {Date} dateAuthenticated - The date this Device was authenticated.\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {DevicePayload} payload - The instance payload\n * @param {sid_like} fleetSid - The unique identifier of the Fleet.\n * @param {sid_like} sid - A string that uniquely identifies the Device.\n */\n/* jshint ignore:end */\nDeviceInstance = function DeviceInstance(version, payload, fleetSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.fleetSid = payload.fleet_sid; // jshint ignore:line\n  this.enabled = payload.enabled; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.deploymentSid = payload.deployment_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.dateAuthenticated = deserialize.iso8601DateTime(payload.date_authenticated); // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {fleetSid: fleetSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(DeviceInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new DeviceContext(this._version, this._solution.fleetSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a DeviceInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n/* jshint ignore:end */\nDeviceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a DeviceInstance\n *\n * @function remove\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n/* jshint ignore:end */\nDeviceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a DeviceInstance\n *\n * @function update\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A human readable description for this Device.\n * @param {string} [opts.identity] - An identifier of the Device user.\n * @param {string} [opts.deploymentSid] - The unique SID of the Deployment group.\n * @param {boolean} [opts.enabled] - The enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n/* jshint ignore:end */\nDeviceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDeviceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nDeviceInstance.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DeviceContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeviceContext\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {sid_like} fleetSid - The fleet_sid\n * @param {sid_like} sid - A string that uniquely identifies the Device.\n */\n/* jshint ignore:end */\nDeviceContext = function DeviceContext(version, fleetSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {fleetSid: fleetSid, sid: sid, };\n  this._uri = _.template(\n    '/Fleets/<%= fleetSid %>/Devices/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a DeviceInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n/* jshint ignore:end */\nDeviceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new DeviceInstance(\n      this._version,\n      payload,\n      this._solution.fleetSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a DeviceInstance\n *\n * @function remove\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n/* jshint ignore:end */\nDeviceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a DeviceInstance\n *\n * @function update\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A human readable description for this Device.\n * @param {string} [opts.identity] - An identifier of the Device user.\n * @param {string} [opts.deploymentSid] - The unique SID of the Deployment group.\n * @param {boolean} [opts.enabled] - The enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n/* jshint ignore:end */\nDeviceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Identity': _.get(opts, 'identity'),\n    'DeploymentSid': _.get(opts, 'deploymentSid'),\n    'Enabled': serialize.bool(_.get(opts, 'enabled'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new DeviceInstance(\n      this._version,\n      payload,\n      this._solution.fleetSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDeviceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nDeviceContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  DeviceList: DeviceList,\n  DevicePage: DevicePage,\n  DeviceInstance: DeviceInstance,\n  DeviceContext: DeviceContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}