{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar CompositionList;\nvar CompositionPage;\nvar CompositionInstance;\nvar CompositionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.CompositionList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nCompositionList = function CompositionList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function compositions\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.CompositionContext}\n   */\n  /* jshint ignore:end */\n  function CompositionListInstance(sid) {\n    return CompositionListInstance.get(sid);\n  }\n  CompositionListInstance._version = version;\n  // Path Solution\n  CompositionListInstance._solution = {};\n  CompositionListInstance._uri = _.template('/Compositions' // jshint ignore:line\n  )(CompositionListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams CompositionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {composition.status} [opts.status] -\n   *          Only show Compositions with the given status.\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only show Compositions created on or after this ISO8601 date-time with timezone.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only show Compositions created before this ISO8601 date-time with timezone.\n   * @param {string} [opts.roomSid] - Only show Compositions with the given Room SID.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists CompositionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {composition.status} [opts.status] -\n   *          Only show Compositions with the given status.\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only show Compositions created on or after this ISO8601 date-time with timezone.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only show Compositions created before this ISO8601 date-time with timezone.\n   * @param {string} [opts.roomSid] - Only show Compositions with the given Room SID.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of CompositionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {composition.status} [opts.status] -\n   *          Only show Compositions with the given status.\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only show Compositions created on or after this ISO8601 date-time with timezone.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only show Compositions created before this ISO8601 date-time with timezone.\n   * @param {string} [opts.roomSid] - Only show Compositions with the given Room SID.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'RoomSid': _.get(opts, 'roomSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CompositionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of CompositionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CompositionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a CompositionInstance\n   *\n   * @function create\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.roomSid - Twilio Room SID.\n   * @param {string} [opts.videoLayout] - The JSON video layout description.\n   * @param {string|list} [opts.audioSources] -\n   *          A list of audio sources related to this Composition.\n   * @param {string|list} [opts.audioSourcesExcluded] -\n   *          A list of audio sources excluded related to this Composition.\n   * @param {string} [opts.resolution] - Pixel resolution of the composed video.\n   * @param {composition.format} [opts.format] -\n   *          Container format of the Composition media file. Any of the following: `mp4`, `webm`.\n   * @param {string} [opts.statusCallback] -\n   *          A URL that Twilio sends asynchronous webhook requests to on every composition event.\n   * @param {string} [opts.statusCallbackMethod] -\n   *          HTTP method Twilio should use when requesting the above URL.\n   * @param {boolean} [opts.trim] -\n   *          Boolean flag for clipping intervals that have no media.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed CompositionInstance\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.roomSid)) {\n      throw new Error('Required parameter \"opts.roomSid\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'RoomSid': _.get(opts, 'roomSid'),\n      'VideoLayout': serialize.object(_.get(opts, 'videoLayout')),\n      'AudioSources': serialize.map(_.get(opts, 'audioSources'), function (e) {\n        return e;\n      }),\n      'AudioSourcesExcluded': serialize.map(_.get(opts, 'audioSourcesExcluded'), function (e) {\n        return e;\n      }),\n      'Resolution': _.get(opts, 'resolution'),\n      'Format': _.get(opts, 'format'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'Trim': serialize.bool(_.get(opts, 'trim'))\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CompositionInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a composition\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {string} sid -\n   *          The Composition Sid that uniquely identifies the Composition to fetch.\n   *\n   * @returns {Twilio.Video.V1.CompositionContext}\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.get = function get(sid) {\n    return new CompositionContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  CompositionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return CompositionListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.CompositionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CompositionSolution} solution - Path solution\n *\n * @returns CompositionPage\n */\n/* jshint ignore:end */\nCompositionPage = function CompositionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(CompositionPage.prototype, Page.prototype);\nCompositionPage.prototype.constructor = CompositionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of CompositionInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.CompositionPage#\n *\n * @param {CompositionPayload} payload - Payload response from the API\n *\n * @returns CompositionInstance\n */\n/* jshint ignore:end */\nCompositionPage.prototype.getInstance = function getInstance(payload) {\n  return new CompositionInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCompositionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nCompositionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.CompositionInstance\n *\n * @property {string} accountSid - Twilio Account SID.\n * @property {composition.status} status - The status of the Composition.\n * @property {Date} dateCreated - Date when the Composition Resource was created.\n * @property {string} dateCompleted - Date when the media processing task finished.\n * @property {string} dateDeleted -\n *          Date when the Composition Resource generated media was deleted.\n * @property {string} sid -\n *          A 34-character string that uniquely identifies this Composition.\n * @property {string} roomSid -\n *          A 34-character string that uniquely identifies the source of this Composition.\n * @property {string} audioSources -\n *          A list of audio sources related to this Composition.\n * @property {string} audioSourcesExcluded -\n *          A list of audio sources excluded related to this Composition.\n * @property {string} videoLayout - The JSON video layout description.\n * @property {string} resolution - Pixel resolution of the composed video.\n * @property {boolean} trim -\n *          Boolean flag for clipping intervals that have no media.\n * @property {composition.format} format - The file format for this Composition.\n * @property {number} bitrate - The bitrate\n * @property {number} size - Size of the Composed media file expressed in bytes.\n * @property {number} duration - Duration of the Composed media in seconds.\n * @property {string} url - The absolute URL for this resource.\n * @property {string} links -\n *          JSON object with the URL where the media file can be fetched.\n *\n * @param {V1} version - Version of the resource\n * @param {CompositionPayload} payload - The instance payload\n * @param {sid} sid -\n *          The Composition Sid that uniquely identifies the Composition to fetch.\n */\n/* jshint ignore:end */\nCompositionInstance = function CompositionInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateCompleted = payload.date_completed; // jshint ignore:line\n  this.dateDeleted = payload.date_deleted; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.roomSid = payload.room_sid; // jshint ignore:line\n  this.audioSources = payload.audio_sources; // jshint ignore:line\n  this.audioSourcesExcluded = payload.audio_sources_excluded; // jshint ignore:line\n  this.videoLayout = payload.video_layout; // jshint ignore:line\n  this.resolution = payload.resolution; // jshint ignore:line\n  this.trim = payload.trim; // jshint ignore:line\n  this.format = payload.format; // jshint ignore:line\n  this.bitrate = deserialize.integer(payload.bitrate); // jshint ignore:line\n  this.size = deserialize.integer(payload.size); // jshint ignore:line\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(CompositionInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new CompositionContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a CompositionInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionInstance\n */\n/* jshint ignore:end */\nCompositionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a CompositionInstance\n *\n * @function remove\n * @memberof Twilio.Video.V1.CompositionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionInstance\n */\n/* jshint ignore:end */\nCompositionInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCompositionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nCompositionInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.CompositionContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid -\n *          The Composition Sid that uniquely identifies the Composition to fetch.\n */\n/* jshint ignore:end */\nCompositionContext = function CompositionContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = _.template('/Compositions/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a CompositionInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionInstance\n */\n/* jshint ignore:end */\nCompositionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new CompositionInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a CompositionInstance\n *\n * @function remove\n * @memberof Twilio.Video.V1.CompositionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionInstance\n */\n/* jshint ignore:end */\nCompositionContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCompositionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nCompositionContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  CompositionList: CompositionList,\n  CompositionPage: CompositionPage,\n  CompositionInstance: CompositionInstance,\n  CompositionContext: CompositionContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","CompositionList","CompositionPage","CompositionInstance","CompositionContext","version","CompositionListInstance","sid","get","_version","_solution","_uri","template","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601DateTime","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","roomSid","object","map","e","bool","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","status","dateCreated","date_created","dateCompleted","date_completed","dateDeleted","date_deleted","room_sid","audioSources","audio_sources","audioSourcesExcluded","audio_sources_excluded","videoLayout","video_layout","resolution","trim","format","bitrate","integer","size","duration","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/video/v1/composition.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar CompositionList;\nvar CompositionPage;\nvar CompositionInstance;\nvar CompositionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.CompositionList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nCompositionList = function CompositionList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function compositions\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.CompositionContext}\n   */\n  /* jshint ignore:end */\n  function CompositionListInstance(sid) {\n    return CompositionListInstance.get(sid);\n  }\n\n  CompositionListInstance._version = version;\n  // Path Solution\n  CompositionListInstance._solution = {};\n  CompositionListInstance._uri = _.template(\n    '/Compositions' // jshint ignore:line\n  )(CompositionListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams CompositionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {composition.status} [opts.status] -\n   *          Only show Compositions with the given status.\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only show Compositions created on or after this ISO8601 date-time with timezone.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only show Compositions created before this ISO8601 date-time with timezone.\n   * @param {string} [opts.roomSid] - Only show Compositions with the given Room SID.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists CompositionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {composition.status} [opts.status] -\n   *          Only show Compositions with the given status.\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only show Compositions created on or after this ISO8601 date-time with timezone.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only show Compositions created before this ISO8601 date-time with timezone.\n   * @param {string} [opts.roomSid] - Only show Compositions with the given Room SID.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of CompositionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {composition.status} [opts.status] -\n   *          Only show Compositions with the given status.\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only show Compositions created on or after this ISO8601 date-time with timezone.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only show Compositions created before this ISO8601 date-time with timezone.\n   * @param {string} [opts.roomSid] - Only show Compositions with the given Room SID.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'RoomSid': _.get(opts, 'roomSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CompositionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of CompositionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CompositionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a CompositionInstance\n   *\n   * @function create\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.roomSid - Twilio Room SID.\n   * @param {string} [opts.videoLayout] - The JSON video layout description.\n   * @param {string|list} [opts.audioSources] -\n   *          A list of audio sources related to this Composition.\n   * @param {string|list} [opts.audioSourcesExcluded] -\n   *          A list of audio sources excluded related to this Composition.\n   * @param {string} [opts.resolution] - Pixel resolution of the composed video.\n   * @param {composition.format} [opts.format] -\n   *          Container format of the Composition media file. Any of the following: `mp4`, `webm`.\n   * @param {string} [opts.statusCallback] -\n   *          A URL that Twilio sends asynchronous webhook requests to on every composition event.\n   * @param {string} [opts.statusCallbackMethod] -\n   *          HTTP method Twilio should use when requesting the above URL.\n   * @param {boolean} [opts.trim] -\n   *          Boolean flag for clipping intervals that have no media.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed CompositionInstance\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.roomSid)) {\n      throw new Error('Required parameter \"opts.roomSid\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'RoomSid': _.get(opts, 'roomSid'),\n      'VideoLayout': serialize.object(_.get(opts, 'videoLayout')),\n      'AudioSources': serialize.map(_.get(opts, 'audioSources'), function(e) { return e; }),\n      'AudioSourcesExcluded': serialize.map(_.get(opts, 'audioSourcesExcluded'), function(e) { return e; }),\n      'Resolution': _.get(opts, 'resolution'),\n      'Format': _.get(opts, 'format'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'Trim': serialize.bool(_.get(opts, 'trim'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CompositionInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a composition\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @param {string} sid -\n   *          The Composition Sid that uniquely identifies the Composition to fetch.\n   *\n   * @returns {Twilio.Video.V1.CompositionContext}\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.get = function get(sid) {\n    return new CompositionContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.CompositionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  CompositionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  CompositionListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return CompositionListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.CompositionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CompositionSolution} solution - Path solution\n *\n * @returns CompositionPage\n */\n/* jshint ignore:end */\nCompositionPage = function CompositionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(CompositionPage.prototype, Page.prototype);\nCompositionPage.prototype.constructor = CompositionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of CompositionInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.CompositionPage#\n *\n * @param {CompositionPayload} payload - Payload response from the API\n *\n * @returns CompositionInstance\n */\n/* jshint ignore:end */\nCompositionPage.prototype.getInstance = function getInstance(payload) {\n  return new CompositionInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCompositionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nCompositionPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.CompositionInstance\n *\n * @property {string} accountSid - Twilio Account SID.\n * @property {composition.status} status - The status of the Composition.\n * @property {Date} dateCreated - Date when the Composition Resource was created.\n * @property {string} dateCompleted - Date when the media processing task finished.\n * @property {string} dateDeleted -\n *          Date when the Composition Resource generated media was deleted.\n * @property {string} sid -\n *          A 34-character string that uniquely identifies this Composition.\n * @property {string} roomSid -\n *          A 34-character string that uniquely identifies the source of this Composition.\n * @property {string} audioSources -\n *          A list of audio sources related to this Composition.\n * @property {string} audioSourcesExcluded -\n *          A list of audio sources excluded related to this Composition.\n * @property {string} videoLayout - The JSON video layout description.\n * @property {string} resolution - Pixel resolution of the composed video.\n * @property {boolean} trim -\n *          Boolean flag for clipping intervals that have no media.\n * @property {composition.format} format - The file format for this Composition.\n * @property {number} bitrate - The bitrate\n * @property {number} size - Size of the Composed media file expressed in bytes.\n * @property {number} duration - Duration of the Composed media in seconds.\n * @property {string} url - The absolute URL for this resource.\n * @property {string} links -\n *          JSON object with the URL where the media file can be fetched.\n *\n * @param {V1} version - Version of the resource\n * @param {CompositionPayload} payload - The instance payload\n * @param {sid} sid -\n *          The Composition Sid that uniquely identifies the Composition to fetch.\n */\n/* jshint ignore:end */\nCompositionInstance = function CompositionInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateCompleted = payload.date_completed; // jshint ignore:line\n  this.dateDeleted = payload.date_deleted; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.roomSid = payload.room_sid; // jshint ignore:line\n  this.audioSources = payload.audio_sources; // jshint ignore:line\n  this.audioSourcesExcluded = payload.audio_sources_excluded; // jshint ignore:line\n  this.videoLayout = payload.video_layout; // jshint ignore:line\n  this.resolution = payload.resolution; // jshint ignore:line\n  this.trim = payload.trim; // jshint ignore:line\n  this.format = payload.format; // jshint ignore:line\n  this.bitrate = deserialize.integer(payload.bitrate); // jshint ignore:line\n  this.size = deserialize.integer(payload.size); // jshint ignore:line\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(CompositionInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new CompositionContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a CompositionInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionInstance\n */\n/* jshint ignore:end */\nCompositionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a CompositionInstance\n *\n * @function remove\n * @memberof Twilio.Video.V1.CompositionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionInstance\n */\n/* jshint ignore:end */\nCompositionInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCompositionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nCompositionInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.CompositionContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid -\n *          The Composition Sid that uniquely identifies the Composition to fetch.\n */\n/* jshint ignore:end */\nCompositionContext = function CompositionContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = _.template(\n    '/Compositions/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a CompositionInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionInstance\n */\n/* jshint ignore:end */\nCompositionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new CompositionInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a CompositionInstance\n *\n * @function remove\n * @memberof Twilio.Video.V1.CompositionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionInstance\n */\n/* jshint ignore:end */\nCompositionContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCompositionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nCompositionContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  CompositionList: CompositionList,\n  CompositionPage: CompositionPage,\n  CompositionInstance: CompositionInstance,\n  CompositionContext: CompositionContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}