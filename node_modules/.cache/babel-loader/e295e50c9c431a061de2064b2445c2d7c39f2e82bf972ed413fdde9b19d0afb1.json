{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar ReservationList = require('./task/reservation').ReservationList;\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar TaskList;\nvar TaskPage;\nvar TaskInstance;\nvar TaskContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid - The ID of the Workspace that holds this Task\n */\n/* jshint ignore:end */\nTaskList = function TaskList(version, workspaceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function tasks\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext}\n   */\n  /* jshint ignore:end */\n  function TaskListInstance(sid) {\n    return TaskListInstance.get(sid);\n  }\n  TaskListInstance._version = version;\n  // Path Solution\n  TaskListInstance._solution = {\n    workspaceSid: workspaceSid\n  };\n  TaskListInstance._uri = _.template('/Workspaces/<%= workspaceSid %>/Tasks' // jshint ignore:line\n  )(TaskListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams TaskInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.priority] -\n   *          Retrieve the list of all Tasks in the workspace with the specified priority.\n   * @param {string|list} [opts.assignmentStatus] -\n   *          Returns the list of all Tasks in the workspace with the specified AssignmentStatus.\n   * @param {string} [opts.workflowSid] -\n   *          Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value.\n   * @param {string} [opts.workflowName] -\n   *          Returns the list of Tasks that are being controlled by the Workflow with the specified FriendlyName value.\n   * @param {string} [opts.taskQueueSid] -\n   *          Returns the list of Tasks that are currently waiting in the TaskQueue identified by the Sid specified.\n   * @param {string} [opts.taskQueueName] -\n   *          Returns the list of Tasks that are currently waiting in the TaskQueue identified by the FriendlyName specified.\n   * @param {string} [opts.evaluateTaskAttributes] -\n   *          Provide a task attributes expression, and this will return tasks which match the attributes.\n   * @param {string} [opts.ordering] -\n   *          Use this parameter to control the order of the Tasks returned.\n   * @param {boolean} [opts.hasAddons] - The has_addons\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TaskListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TaskInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.priority] -\n   *          Retrieve the list of all Tasks in the workspace with the specified priority.\n   * @param {string|list} [opts.assignmentStatus] -\n   *          Returns the list of all Tasks in the workspace with the specified AssignmentStatus.\n   * @param {string} [opts.workflowSid] -\n   *          Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value.\n   * @param {string} [opts.workflowName] -\n   *          Returns the list of Tasks that are being controlled by the Workflow with the specified FriendlyName value.\n   * @param {string} [opts.taskQueueSid] -\n   *          Returns the list of Tasks that are currently waiting in the TaskQueue identified by the Sid specified.\n   * @param {string} [opts.taskQueueName] -\n   *          Returns the list of Tasks that are currently waiting in the TaskQueue identified by the FriendlyName specified.\n   * @param {string} [opts.evaluateTaskAttributes] -\n   *          Provide a task attributes expression, and this will return tasks which match the attributes.\n   * @param {string} [opts.ordering] -\n   *          Use this parameter to control the order of the Tasks returned.\n   * @param {boolean} [opts.hasAddons] - The has_addons\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.priority] -\n   *          Retrieve the list of all Tasks in the workspace with the specified priority.\n   * @param {string|list} [opts.assignmentStatus] -\n   *          Returns the list of all Tasks in the workspace with the specified AssignmentStatus.\n   * @param {string} [opts.workflowSid] -\n   *          Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value.\n   * @param {string} [opts.workflowName] -\n   *          Returns the list of Tasks that are being controlled by the Workflow with the specified FriendlyName value.\n   * @param {string} [opts.taskQueueSid] -\n   *          Returns the list of Tasks that are currently waiting in the TaskQueue identified by the Sid specified.\n   * @param {string} [opts.taskQueueName] -\n   *          Returns the list of Tasks that are currently waiting in the TaskQueue identified by the FriendlyName specified.\n   * @param {string} [opts.evaluateTaskAttributes] -\n   *          Provide a task attributes expression, and this will return tasks which match the attributes.\n   * @param {string} [opts.ordering] -\n   *          Use this parameter to control the order of the Tasks returned.\n   * @param {boolean} [opts.hasAddons] - The has_addons\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Priority': _.get(opts, 'priority'),\n      'AssignmentStatus': serialize.map(_.get(opts, 'assignmentStatus'), function (e) {\n        return e;\n      }),\n      'WorkflowSid': _.get(opts, 'workflowSid'),\n      'WorkflowName': _.get(opts, 'workflowName'),\n      'TaskQueueSid': _.get(opts, 'taskQueueSid'),\n      'TaskQueueName': _.get(opts, 'taskQueueName'),\n      'EvaluateTaskAttributes': _.get(opts, 'evaluateTaskAttributes'),\n      'Ordering': _.get(opts, 'ordering'),\n      'HasAddons': serialize.bool(_.get(opts, 'hasAddons')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a TaskInstance\n   *\n   * @function create\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.timeout] -\n   *          The amount of time in seconds the task is allowed to live up to a maximum of 2 weeks.\n   * @param {number} [opts.priority] - Override priority for the Task.\n   * @param {string} [opts.taskChannel] -\n   *          When MultiTasking is enabled specify the type of the task by passing either TaskChannel Unique Name or Task Channel Sid.\n   * @param {string} [opts.workflowSid] -\n   *          The WorkflowSid for the Workflow that you would like to handle routing for this Task.\n   * @param {string} [opts.attributes] -\n   *          Url-encoded JSON string describing the attributes of this task.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TaskInstance\n   */\n  /* jshint ignore:end */\n  TaskListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Timeout': _.get(opts, 'timeout'),\n      'Priority': _.get(opts, 'priority'),\n      'TaskChannel': _.get(opts, 'taskChannel'),\n      'WorkflowSid': _.get(opts, 'workflowSid'),\n      'Attributes': _.get(opts, 'attributes')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a task\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext}\n   */\n  /* jshint ignore:end */\n  TaskListInstance.get = function get(sid) {\n    return new TaskContext(this._version, this._solution.workspaceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TaskListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  TaskListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return TaskListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TaskSolution} solution - Path solution\n *\n * @returns TaskPage\n */\n/* jshint ignore:end */\nTaskPage = function TaskPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(TaskPage.prototype, Page.prototype);\nTaskPage.prototype.constructor = TaskPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TaskInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskPage#\n *\n * @param {TaskPayload} payload - Payload response from the API\n *\n * @returns TaskInstance\n */\n/* jshint ignore:end */\nTaskPage.prototype.getInstance = function getInstance(payload) {\n  return new TaskInstance(this._version, payload, this._solution.workspaceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nTaskPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance\n *\n * @property {string} accountSid - The ID of the account that owns this Task\n * @property {number} age - The number of seconds since this task was created.\n * @property {task.status} assignmentStatus -\n *          Returns the list of all Tasks in the workspace with the specified AssignmentStatus.\n * @property {string} attributes -\n *          The user-defined JSON string describing the custom attributes of this work.\n * @property {string} addons -\n *          The addon data for all installed addons is returned with this attribute\n * @property {Date} dateCreated -\n *          Date this task was created, given as ISO 8601 format.\n * @property {Date} dateUpdated -\n *          Date this task was updated, given as ISO 8601 format.\n * @property {number} priority -\n *          Retrieve the list of all Tasks in the workspace with the specified priority.\n * @property {string} reason - The reason the task was canceled  or completed\n * @property {string} sid - The unique ID of the Task\n * @property {string} taskQueueSid -\n *          Returns the list of Tasks that are currently waiting in the TaskQueue identified by the Sid specified.\n * @property {string} taskQueueFriendlyName - The task_queue_friendly_name\n * @property {string} taskChannelSid - The ID of the Task Channel\n * @property {string} taskChannelUniqueName - The unique name of the Task Channel\n * @property {number} timeout -\n *          The amount of time in seconds the task is allowed to live\n * @property {string} workflowSid -\n *          Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value.\n * @property {string} workflowFriendlyName - The workflow_friendly_name\n * @property {string} workspaceSid - The ID of the Workspace that holds this Task\n * @property {string} url - The url\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {TaskPayload} payload - The instance payload\n * @param {sid} workspaceSid - The ID of the Workspace that holds this Task\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nTaskInstance = function TaskInstance(version, payload, workspaceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.age = deserialize.integer(payload.age); // jshint ignore:line\n  this.assignmentStatus = payload.assignment_status; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n  this.addons = payload.addons; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.priority = deserialize.integer(payload.priority); // jshint ignore:line\n  this.reason = payload.reason; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.taskQueueSid = payload.task_queue_sid; // jshint ignore:line\n  this.taskQueueFriendlyName = payload.task_queue_friendly_name; // jshint ignore:line\n  this.taskChannelSid = payload.task_channel_sid; // jshint ignore:line\n  this.taskChannelUniqueName = payload.task_channel_unique_name; // jshint ignore:line\n  this.timeout = deserialize.integer(payload.timeout); // jshint ignore:line\n  this.workflowSid = payload.workflow_sid; // jshint ignore:line\n  this.workflowFriendlyName = payload.workflow_friendly_name; // jshint ignore:line\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(TaskInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new TaskContext(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.attributes] -\n *          The user-defined JSON data describing the custom attributes of this task.\n * @param {task.status} [opts.assignmentStatus] -\n *          A 'pending' or 'reserved' Task may be canceled by posting AssignmentStatus='canceled'.\n * @param {string} [opts.reason] -\n *          This is only required if the Task is canceled or completed.\n * @param {number} [opts.priority] - Override priority for the Task.\n * @param {string} [opts.taskChannel] - The task_channel\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the reservations\n *\n * @function reservations\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList}\n */\n/* jshint ignore:end */\nTaskInstance.prototype.reservations = function reservations() {\n  return this._proxy.reservations;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nTaskInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskContext\n *\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList} reservations -\n *          reservations resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The workspace_sid\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nTaskContext = function TaskContext(version, workspaceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid\n  };\n  this._uri = _.template('/Workspaces/<%= workspaceSid %>/Tasks/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._reservations = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TaskInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.attributes] -\n *          The user-defined JSON data describing the custom attributes of this task.\n * @param {task.status} [opts.assignmentStatus] -\n *          A 'pending' or 'reserved' Task may be canceled by posting AssignmentStatus='canceled'.\n * @param {string} [opts.reason] -\n *          This is only required if the Task is canceled or completed.\n * @param {number} [opts.priority] - Override priority for the Task.\n * @param {string} [opts.taskChannel] - The task_channel\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Attributes': _.get(opts, 'attributes'),\n    'AssignmentStatus': _.get(opts, 'assignmentStatus'),\n    'Reason': _.get(opts, 'reason'),\n    'Priority': _.get(opts, 'priority'),\n    'TaskChannel': _.get(opts, 'taskChannel')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TaskInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(TaskContext.prototype, 'reservations', {\n  get: function () {\n    if (!this._reservations) {\n      this._reservations = new ReservationList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n    return this._reservations;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nTaskContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  TaskList: TaskList,\n  TaskPage: TaskPage,\n  TaskInstance: TaskInstance,\n  TaskContext: TaskContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","ReservationList","deserialize","serialize","values","TaskList","TaskPage","TaskInstance","TaskContext","version","workspaceSid","TaskListInstance","sid","get","_version","_solution","_uri","template","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","map","e","bool","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","age","integer","assignmentStatus","assignment_status","attributes","addons","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","priority","reason","taskQueueSid","task_queue_sid","taskQueueFriendlyName","task_queue_friendly_name","taskChannelSid","task_channel_sid","taskChannelUniqueName","task_channel_unique_name","timeout","workflowSid","workflow_sid","workflowFriendlyName","workflow_friendly_name","workspace_sid","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","reservations","_reservations","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/taskrouter/v1/workspace/task.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar ReservationList = require('./task/reservation').ReservationList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar TaskList;\nvar TaskPage;\nvar TaskInstance;\nvar TaskContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid - The ID of the Workspace that holds this Task\n */\n/* jshint ignore:end */\nTaskList = function TaskList(version, workspaceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function tasks\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext}\n   */\n  /* jshint ignore:end */\n  function TaskListInstance(sid) {\n    return TaskListInstance.get(sid);\n  }\n\n  TaskListInstance._version = version;\n  // Path Solution\n  TaskListInstance._solution = {workspaceSid: workspaceSid};\n  TaskListInstance._uri = _.template(\n    '/Workspaces/<%= workspaceSid %>/Tasks' // jshint ignore:line\n  )(TaskListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams TaskInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.priority] -\n   *          Retrieve the list of all Tasks in the workspace with the specified priority.\n   * @param {string|list} [opts.assignmentStatus] -\n   *          Returns the list of all Tasks in the workspace with the specified AssignmentStatus.\n   * @param {string} [opts.workflowSid] -\n   *          Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value.\n   * @param {string} [opts.workflowName] -\n   *          Returns the list of Tasks that are being controlled by the Workflow with the specified FriendlyName value.\n   * @param {string} [opts.taskQueueSid] -\n   *          Returns the list of Tasks that are currently waiting in the TaskQueue identified by the Sid specified.\n   * @param {string} [opts.taskQueueName] -\n   *          Returns the list of Tasks that are currently waiting in the TaskQueue identified by the FriendlyName specified.\n   * @param {string} [opts.evaluateTaskAttributes] -\n   *          Provide a task attributes expression, and this will return tasks which match the attributes.\n   * @param {string} [opts.ordering] -\n   *          Use this parameter to control the order of the Tasks returned.\n   * @param {boolean} [opts.hasAddons] - The has_addons\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TaskListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TaskInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.priority] -\n   *          Retrieve the list of all Tasks in the workspace with the specified priority.\n   * @param {string|list} [opts.assignmentStatus] -\n   *          Returns the list of all Tasks in the workspace with the specified AssignmentStatus.\n   * @param {string} [opts.workflowSid] -\n   *          Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value.\n   * @param {string} [opts.workflowName] -\n   *          Returns the list of Tasks that are being controlled by the Workflow with the specified FriendlyName value.\n   * @param {string} [opts.taskQueueSid] -\n   *          Returns the list of Tasks that are currently waiting in the TaskQueue identified by the Sid specified.\n   * @param {string} [opts.taskQueueName] -\n   *          Returns the list of Tasks that are currently waiting in the TaskQueue identified by the FriendlyName specified.\n   * @param {string} [opts.evaluateTaskAttributes] -\n   *          Provide a task attributes expression, and this will return tasks which match the attributes.\n   * @param {string} [opts.ordering] -\n   *          Use this parameter to control the order of the Tasks returned.\n   * @param {boolean} [opts.hasAddons] - The has_addons\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.priority] -\n   *          Retrieve the list of all Tasks in the workspace with the specified priority.\n   * @param {string|list} [opts.assignmentStatus] -\n   *          Returns the list of all Tasks in the workspace with the specified AssignmentStatus.\n   * @param {string} [opts.workflowSid] -\n   *          Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value.\n   * @param {string} [opts.workflowName] -\n   *          Returns the list of Tasks that are being controlled by the Workflow with the specified FriendlyName value.\n   * @param {string} [opts.taskQueueSid] -\n   *          Returns the list of Tasks that are currently waiting in the TaskQueue identified by the Sid specified.\n   * @param {string} [opts.taskQueueName] -\n   *          Returns the list of Tasks that are currently waiting in the TaskQueue identified by the FriendlyName specified.\n   * @param {string} [opts.evaluateTaskAttributes] -\n   *          Provide a task attributes expression, and this will return tasks which match the attributes.\n   * @param {string} [opts.ordering] -\n   *          Use this parameter to control the order of the Tasks returned.\n   * @param {boolean} [opts.hasAddons] - The has_addons\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Priority': _.get(opts, 'priority'),\n      'AssignmentStatus': serialize.map(_.get(opts, 'assignmentStatus'), function(e) { return e; }),\n      'WorkflowSid': _.get(opts, 'workflowSid'),\n      'WorkflowName': _.get(opts, 'workflowName'),\n      'TaskQueueSid': _.get(opts, 'taskQueueSid'),\n      'TaskQueueName': _.get(opts, 'taskQueueName'),\n      'EvaluateTaskAttributes': _.get(opts, 'evaluateTaskAttributes'),\n      'Ordering': _.get(opts, 'ordering'),\n      'HasAddons': serialize.bool(_.get(opts, 'hasAddons')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a TaskInstance\n   *\n   * @function create\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.timeout] -\n   *          The amount of time in seconds the task is allowed to live up to a maximum of 2 weeks.\n   * @param {number} [opts.priority] - Override priority for the Task.\n   * @param {string} [opts.taskChannel] -\n   *          When MultiTasking is enabled specify the type of the task by passing either TaskChannel Unique Name or Task Channel Sid.\n   * @param {string} [opts.workflowSid] -\n   *          The WorkflowSid for the Workflow that you would like to handle routing for this Task.\n   * @param {string} [opts.attributes] -\n   *          Url-encoded JSON string describing the attributes of this task.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TaskInstance\n   */\n  /* jshint ignore:end */\n  TaskListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Timeout': _.get(opts, 'timeout'),\n      'Priority': _.get(opts, 'priority'),\n      'TaskChannel': _.get(opts, 'taskChannel'),\n      'WorkflowSid': _.get(opts, 'workflowSid'),\n      'Attributes': _.get(opts, 'attributes')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskInstance(\n        this._version,\n        payload,\n        this._solution.workspaceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a task\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext}\n   */\n  /* jshint ignore:end */\n  TaskListInstance.get = function get(sid) {\n    return new TaskContext(this._version, this._solution.workspaceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TaskListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TaskListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TaskListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TaskSolution} solution - Path solution\n *\n * @returns TaskPage\n */\n/* jshint ignore:end */\nTaskPage = function TaskPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TaskPage.prototype, Page.prototype);\nTaskPage.prototype.constructor = TaskPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TaskInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskPage#\n *\n * @param {TaskPayload} payload - Payload response from the API\n *\n * @returns TaskInstance\n */\n/* jshint ignore:end */\nTaskPage.prototype.getInstance = function getInstance(payload) {\n  return new TaskInstance(this._version, payload, this._solution.workspaceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTaskPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance\n *\n * @property {string} accountSid - The ID of the account that owns this Task\n * @property {number} age - The number of seconds since this task was created.\n * @property {task.status} assignmentStatus -\n *          Returns the list of all Tasks in the workspace with the specified AssignmentStatus.\n * @property {string} attributes -\n *          The user-defined JSON string describing the custom attributes of this work.\n * @property {string} addons -\n *          The addon data for all installed addons is returned with this attribute\n * @property {Date} dateCreated -\n *          Date this task was created, given as ISO 8601 format.\n * @property {Date} dateUpdated -\n *          Date this task was updated, given as ISO 8601 format.\n * @property {number} priority -\n *          Retrieve the list of all Tasks in the workspace with the specified priority.\n * @property {string} reason - The reason the task was canceled  or completed\n * @property {string} sid - The unique ID of the Task\n * @property {string} taskQueueSid -\n *          Returns the list of Tasks that are currently waiting in the TaskQueue identified by the Sid specified.\n * @property {string} taskQueueFriendlyName - The task_queue_friendly_name\n * @property {string} taskChannelSid - The ID of the Task Channel\n * @property {string} taskChannelUniqueName - The unique name of the Task Channel\n * @property {number} timeout -\n *          The amount of time in seconds the task is allowed to live\n * @property {string} workflowSid -\n *          Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value.\n * @property {string} workflowFriendlyName - The workflow_friendly_name\n * @property {string} workspaceSid - The ID of the Workspace that holds this Task\n * @property {string} url - The url\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {TaskPayload} payload - The instance payload\n * @param {sid} workspaceSid - The ID of the Workspace that holds this Task\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nTaskInstance = function TaskInstance(version, payload, workspaceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.age = deserialize.integer(payload.age); // jshint ignore:line\n  this.assignmentStatus = payload.assignment_status; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n  this.addons = payload.addons; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.priority = deserialize.integer(payload.priority); // jshint ignore:line\n  this.reason = payload.reason; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.taskQueueSid = payload.task_queue_sid; // jshint ignore:line\n  this.taskQueueFriendlyName = payload.task_queue_friendly_name; // jshint ignore:line\n  this.taskChannelSid = payload.task_channel_sid; // jshint ignore:line\n  this.taskChannelUniqueName = payload.task_channel_unique_name; // jshint ignore:line\n  this.timeout = deserialize.integer(payload.timeout); // jshint ignore:line\n  this.workflowSid = payload.workflow_sid; // jshint ignore:line\n  this.workflowFriendlyName = payload.workflow_friendly_name; // jshint ignore:line\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {workspaceSid: workspaceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(TaskInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new TaskContext(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.attributes] -\n *          The user-defined JSON data describing the custom attributes of this task.\n * @param {task.status} [opts.assignmentStatus] -\n *          A 'pending' or 'reserved' Task may be canceled by posting AssignmentStatus='canceled'.\n * @param {string} [opts.reason] -\n *          This is only required if the Task is canceled or completed.\n * @param {number} [opts.priority] - Override priority for the Task.\n * @param {string} [opts.taskChannel] - The task_channel\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the reservations\n *\n * @function reservations\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList}\n */\n/* jshint ignore:end */\nTaskInstance.prototype.reservations = function reservations() {\n  return this._proxy.reservations;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTaskInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskContext\n *\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList} reservations -\n *          reservations resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The workspace_sid\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nTaskContext = function TaskContext(version, workspaceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {workspaceSid: workspaceSid, sid: sid, };\n  this._uri = _.template(\n    '/Workspaces/<%= workspaceSid %>/Tasks/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._reservations = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TaskInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.attributes] -\n *          The user-defined JSON data describing the custom attributes of this task.\n * @param {task.status} [opts.assignmentStatus] -\n *          A 'pending' or 'reserved' Task may be canceled by posting AssignmentStatus='canceled'.\n * @param {string} [opts.reason] -\n *          This is only required if the Task is canceled or completed.\n * @param {number} [opts.priority] - Override priority for the Task.\n * @param {string} [opts.taskChannel] - The task_channel\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Attributes': _.get(opts, 'attributes'),\n    'AssignmentStatus': _.get(opts, 'assignmentStatus'),\n    'Reason': _.get(opts, 'reason'),\n    'Priority': _.get(opts, 'priority'),\n    'TaskChannel': _.get(opts, 'taskChannel')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TaskInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TaskContext.prototype,\n  'reservations', {\n  get: function() {\n    if (!this._reservations) {\n      this._reservations = new ReservationList(\n        this._version,\n        this._solution.workspaceSid,\n        this._solution.sid\n      );\n    }\n    return this._reservations;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTaskContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TaskList: TaskList,\n  TaskPage: TaskPage,\n  TaskInstance: TaskInstance,\n  TaskContext: TaskContext\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAE;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC,CAAC,CAAE;AAC7B,IAAIG,IAAI,GAAGH,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAE;AAC9C,IAAII,eAAe,GAAGJ,OAAO,CAAC,oBAAoB,CAAC,CAACI,eAAe;AACnE,IAAIC,WAAW,GAAGL,OAAO,CACrB,8BAA8B,CAAC,CAAC,CAAE;AACtC,IAAIM,SAAS,GAAGN,OAAO,CAAC,4BAA4B,CAAC,CAAC,CAAE;AACxD,IAAIO,MAAM,GAAGP,OAAO,CAAC,yBAAyB,CAAC,CAAC,CAAE;;AAElD,IAAIQ,QAAQ;AACZ,IAAIC,QAAQ;AACZ,IAAIC,YAAY;AAChB,IAAIC,WAAW;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,QAAQ,GAAG,SAASA,QAAQA,CAACI,OAAO,EAAEC,YAAY,EAAE;EAClD;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA,SAASC,gBAAgBA,CAACC,GAAG,EAAE;IAC7B,OAAOD,gBAAgB,CAACE,GAAG,CAACD,GAAG,CAAC;EAClC;EAEAD,gBAAgB,CAACG,QAAQ,GAAGL,OAAO;EACnC;EACAE,gBAAgB,CAACI,SAAS,GAAG;IAACL,YAAY,EAAEA;EAAY,CAAC;EACzDC,gBAAgB,CAACK,IAAI,GAAGlB,CAAC,CAACmB,QAAQ,CAChC,uCAAuC,CAAC;EAC1C,CAAC,CAACN,gBAAgB,CAACI,SAAS,CAAC;EAC7B;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAJ,gBAAgB,CAACO,IAAI,GAAG,SAASA,IAAIA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IACpD,IAAItB,CAAC,CAACuB,UAAU,CAACF,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAIA,IAAI,CAACC,QAAQ,EAAE;MACjBA,QAAQ,GAAGD,IAAI,CAACC,QAAQ;IAC1B;IACA,IAAItB,CAAC,CAACwB,WAAW,CAACF,QAAQ,CAAC,EAAE;MAC3B,MAAM,IAAIG,KAAK,CAAC,oCAAoC,CAAC;IACvD;IAEA,IAAIC,IAAI,GAAG,KAAK;IAChB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIC,MAAM,GAAG,IAAI,CAACb,QAAQ,CAACc,UAAU,CAAC;MACpCC,KAAK,EAAEV,IAAI,CAACU,KAAK;MACjBC,QAAQ,EAAEX,IAAI,CAACW;IACjB,CAAC,CAAC;IAEF,SAASC,UAAUA,CAACC,KAAK,EAAE;MACzBR,IAAI,GAAG,IAAI;MACX,IAAI1B,CAAC,CAACuB,UAAU,CAACF,IAAI,CAACK,IAAI,CAAC,EAAE;QAC3BL,IAAI,CAACK,IAAI,CAACQ,KAAK,CAAC;MAClB;IACF;IAEA,SAASC,aAAaA,CAACC,EAAE,EAAE;MACzB,IAAIC,OAAO,GAAGD,EAAE,CAAC,CAAC;MAClB,IAAIpC,CAAC,CAACwB,WAAW,CAACa,OAAO,CAAC,EAAE;QAC1BJ,UAAU,CAAC,CAAC;QACZ;MACF;MAEAI,OAAO,CAACC,IAAI,CAAC,UAASC,IAAI,EAAE;QAC1BvC,CAAC,CAACoB,IAAI,CAACmB,IAAI,CAACC,SAAS,EAAE,UAASC,QAAQ,EAAE;UACxC,IAAIf,IAAI,IAAK,CAAC1B,CAAC,CAACwB,WAAW,CAACH,IAAI,CAACU,KAAK,CAAC,IAAIH,eAAe,IAAIP,IAAI,CAACU,KAAM,EAAE;YACzEL,IAAI,GAAG,IAAI;YACX,OAAO,KAAK;UACd;UAEAE,eAAe,EAAE;UACjBN,QAAQ,CAACmB,QAAQ,EAAER,UAAU,CAAC;QAChC,CAAC,CAAC;QAEF,IAAKJ,MAAM,CAACa,SAAS,IAAIb,MAAM,CAACa,SAAS,IAAIf,WAAW,EAAG;UACzDM,UAAU,CAAC,CAAC;QACd,CAAC,MAAM,IAAI,CAACP,IAAI,EAAE;UAChBC,WAAW,EAAE;UACbQ,aAAa,CAACnC,CAAC,CAAC2C,IAAI,CAACJ,IAAI,CAACK,QAAQ,EAAEL,IAAI,CAAC,CAAC;QAC5C;MACF,CAAC,CAAC;MAEFF,OAAO,CAACQ,KAAK,CAACZ,UAAU,CAAC;IAC3B;IAEAE,aAAa,CAACnC,CAAC,CAAC2C,IAAI,CAAC,IAAI,CAACJ,IAAI,EAAE,IAAI,EAAEvC,CAAC,CAAC8C,KAAK,CAACzB,IAAI,EAAEQ,MAAM,CAAC,CAAC,CAAC;EAC/D,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAhB,gBAAgB,CAACkC,IAAI,GAAG,SAASA,IAAIA,CAAC1B,IAAI,EAAEC,QAAQ,EAAE;IACpD,IAAItB,CAAC,CAACuB,UAAU,CAACF,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAI2B,QAAQ,GAAGlD,CAAC,CAACmD,KAAK,CAAC,CAAC;IACxB,IAAIC,YAAY,GAAG,EAAE;IACrB7B,IAAI,CAACC,QAAQ,GAAG,UAAS6B,QAAQ,EAAEzB,IAAI,EAAE;MACvCwB,YAAY,CAACE,IAAI,CAACD,QAAQ,CAAC;MAE3B,IAAI,CAACnD,CAAC,CAACwB,WAAW,CAACH,IAAI,CAACU,KAAK,CAAC,IAAImB,YAAY,CAACG,MAAM,KAAKhC,IAAI,CAACU,KAAK,EAAE;QACpEL,IAAI,CAAC,CAAC;MACR;IACF,CAAC;IAEDL,IAAI,CAACK,IAAI,GAAG,UAASQ,KAAK,EAAE;MAC1B,IAAIlC,CAAC,CAACwB,WAAW,CAACU,KAAK,CAAC,EAAE;QACxBc,QAAQ,CAACM,OAAO,CAACJ,YAAY,CAAC;MAChC,CAAC,MAAM;QACLF,QAAQ,CAACO,MAAM,CAACrB,KAAK,CAAC;MACxB;IACF,CAAC;IAED,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;MAC1B0B,QAAQ,CAACX,OAAO,CAACmB,OAAO,CAAClC,QAAQ,CAAC;IACpC;IAEA,IAAI,CAACF,IAAI,CAACC,IAAI,CAAC;IACf,OAAO2B,QAAQ,CAACX,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAxB,gBAAgB,CAAC0B,IAAI,GAAG,SAASA,IAAIA,CAAClB,IAAI,EAAEC,QAAQ,EAAE;IACpD,IAAItB,CAAC,CAACuB,UAAU,CAACF,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IAEjB,IAAI2B,QAAQ,GAAGlD,CAAC,CAACmD,KAAK,CAAC,CAAC;IACxB,IAAIQ,IAAI,GAAGnD,MAAM,CAACoD,EAAE,CAAC;MACnB,UAAU,EAAE1D,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,UAAU,CAAC;MACnC,kBAAkB,EAAEhB,SAAS,CAACsD,GAAG,CAAC3D,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,kBAAkB,CAAC,EAAE,UAASuC,CAAC,EAAE;QAAE,OAAOA,CAAC;MAAE,CAAC,CAAC;MAC7F,aAAa,EAAE5D,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,aAAa,CAAC;MACzC,cAAc,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,cAAc,CAAC;MAC3C,cAAc,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,cAAc,CAAC;MAC3C,eAAe,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,eAAe,CAAC;MAC7C,wBAAwB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,wBAAwB,CAAC;MAC/D,UAAU,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,UAAU,CAAC;MACnC,WAAW,EAAEhB,SAAS,CAACwD,IAAI,CAAC7D,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,WAAW,CAAC,CAAC;MACrD,WAAW,EAAEA,IAAI,CAACyC,SAAS;MAC3B,MAAM,EAAEzC,IAAI,CAAC0C,UAAU;MACvB,UAAU,EAAE1C,IAAI,CAACW;IACnB,CAAC,CAAC;IAEF,IAAIK,OAAO,GAAG,IAAI,CAACrB,QAAQ,CAACuB,IAAI,CAAC;MAACyB,GAAG,EAAE,IAAI,CAAC9C,IAAI;MAAE+C,MAAM,EAAE,KAAK;MAAEC,MAAM,EAAET;IAAI,CAAC,CAAC;IAE/EpB,OAAO,GAAGA,OAAO,CAACC,IAAI,CAAC,UAAS6B,OAAO,EAAE;MACvCnB,QAAQ,CAACM,OAAO,CAAC,IAAI9C,QAAQ,CAAC,IAAI,CAACQ,QAAQ,EAAEmD,OAAO,EAAE,IAAI,CAAClD,SAAS,CAAC,CAAC;IACxE,CAAC,CAAC0B,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACQ,KAAK,CAAC,UAASX,KAAK,EAAE;MAC5Bc,QAAQ,CAACO,MAAM,CAACrB,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;MAC1B0B,QAAQ,CAACX,OAAO,CAACmB,OAAO,CAAClC,QAAQ,CAAC;IACpC;IAEA,OAAO0B,QAAQ,CAACX,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAxB,gBAAgB,CAACuD,OAAO,GAAG,SAASA,OAAOA,CAACC,SAAS,EAAE/C,QAAQ,EAAE;IAC/D,IAAI0B,QAAQ,GAAGlD,CAAC,CAACmD,KAAK,CAAC,CAAC;IAExB,IAAIZ,OAAO,GAAG,IAAI,CAACrB,QAAQ,CAACsD,OAAO,CAACC,MAAM,CAACC,OAAO,CAAC;MAACP,MAAM,EAAE,KAAK;MAAED,GAAG,EAAEK;IAAS,CAAC,CAAC;IAEnFhC,OAAO,GAAGA,OAAO,CAACC,IAAI,CAAC,UAAS6B,OAAO,EAAE;MACvCnB,QAAQ,CAACM,OAAO,CAAC,IAAI9C,QAAQ,CAAC,IAAI,CAACQ,QAAQ,EAAEmD,OAAO,EAAE,IAAI,CAAClD,SAAS,CAAC,CAAC;IACxE,CAAC,CAAC0B,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACQ,KAAK,CAAC,UAASX,KAAK,EAAE;MAC5Bc,QAAQ,CAACO,MAAM,CAACrB,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;MAC1B0B,QAAQ,CAACX,OAAO,CAACmB,OAAO,CAAClC,QAAQ,CAAC;IACpC;IAEA,OAAO0B,QAAQ,CAACX,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAxB,gBAAgB,CAAC4D,MAAM,GAAG,SAASA,MAAMA,CAACpD,IAAI,EAAEC,QAAQ,EAAE;IACxD,IAAItB,CAAC,CAACuB,UAAU,CAACF,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IAEjB,IAAI2B,QAAQ,GAAGlD,CAAC,CAACmD,KAAK,CAAC,CAAC;IACxB,IAAIQ,IAAI,GAAGnD,MAAM,CAACoD,EAAE,CAAC;MACnB,SAAS,EAAE1D,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,SAAS,CAAC;MACjC,UAAU,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,UAAU,CAAC;MACnC,aAAa,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,aAAa,CAAC;MACzC,aAAa,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,aAAa,CAAC;MACzC,YAAY,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,YAAY;IACxC,CAAC,CAAC;IAEF,IAAIgB,OAAO,GAAG,IAAI,CAACrB,QAAQ,CAACyD,MAAM,CAAC;MAACT,GAAG,EAAE,IAAI,CAAC9C,IAAI;MAAE+C,MAAM,EAAE,MAAM;MAAER,IAAI,EAAEA;IAAI,CAAC,CAAC;IAEhFpB,OAAO,GAAGA,OAAO,CAACC,IAAI,CAAC,UAAS6B,OAAO,EAAE;MACvCnB,QAAQ,CAACM,OAAO,CAAC,IAAI7C,YAAY,CAC/B,IAAI,CAACO,QAAQ,EACbmD,OAAO,EACP,IAAI,CAAClD,SAAS,CAACL,YAAY,EAC3B,IAAI,CAACK,SAAS,CAACH,GACjB,CAAC,CAAC;IACJ,CAAC,CAAC6B,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACQ,KAAK,CAAC,UAASX,KAAK,EAAE;MAC5Bc,QAAQ,CAACO,MAAM,CAACrB,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;MAC1B0B,QAAQ,CAACX,OAAO,CAACmB,OAAO,CAAClC,QAAQ,CAAC;IACpC;IAEA,OAAO0B,QAAQ,CAACX,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAxB,gBAAgB,CAACE,GAAG,GAAG,SAASA,GAAGA,CAACD,GAAG,EAAE;IACvC,OAAO,IAAIJ,WAAW,CAAC,IAAI,CAACM,QAAQ,EAAE,IAAI,CAACC,SAAS,CAACL,YAAY,EAAEE,GAAG,CAAC;EACzE,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAD,gBAAgB,CAAC6D,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;IAC1C,OAAO,IAAI,CAACzD,SAAS;EACvB,CAAC;EAEDJ,gBAAgB,CAACZ,IAAI,CAAC0E,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EAAEC,OAAO,EAAE;IACvE,OAAO7E,IAAI,CAAC0E,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;EAC7C,CAAC;EAED,OAAOjE,gBAAgB;AACzB,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,QAAQ,GAAG,SAASA,QAAQA,CAACG,OAAO,EAAEoE,QAAQ,EAAEC,QAAQ,EAAE;EACxD;EACA,IAAI,CAAC/D,SAAS,GAAG+D,QAAQ;EAEzB9E,IAAI,CAAC+E,SAAS,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI,EAAExE,OAAO,EAAEoE,QAAQ,EAAE,IAAI,CAAC9D,SAAS,CAAC;AAC1E,CAAC;AAEDjB,CAAC,CAACoF,MAAM,CAAC5E,QAAQ,CAACyE,SAAS,EAAE/E,IAAI,CAAC+E,SAAS,CAAC;AAC5CzE,QAAQ,CAACyE,SAAS,CAACC,WAAW,GAAG1E,QAAQ;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,QAAQ,CAACyE,SAAS,CAACI,WAAW,GAAG,SAASA,WAAWA,CAAClB,OAAO,EAAE;EAC7D,OAAO,IAAI1D,YAAY,CAAC,IAAI,CAACO,QAAQ,EAAEmD,OAAO,EAAE,IAAI,CAAClD,SAAS,CAACL,YAAY,CAAC;AAC9E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,QAAQ,CAACyE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EAC5C,IAAIY,KAAK,GAAG,CAAC,CAAC;EACdtF,CAAC,CAACuF,MAAM,CAAC,IAAI,EAAE,UAASC,KAAK,EAAEC,GAAG,EAAE;IAClC,IAAI,CAACzF,CAAC,CAAC0F,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,IAAI,CAAEzF,CAAC,CAACuB,UAAU,CAACiE,KAAK,CAAC,EAAE;MACpDF,KAAK,CAACG,GAAG,CAAC,GAAGD,KAAK;IACpB;EACF,CAAC,CAAC;EACF,OAAOF,KAAK;AACd,CAAC;AAED9E,QAAQ,CAACyE,SAAS,CAAChF,IAAI,CAAC0E,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EAAEC,OAAO,EAAE;EACzE,OAAO7E,IAAI,CAAC0E,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArE,YAAY,GAAG,SAASA,YAAYA,CAACE,OAAO,EAAEwD,OAAO,EAAEvD,YAAY,EAAEE,GAAG,EAAE;EACxE,IAAI,CAACE,QAAQ,GAAGL,OAAO;;EAEvB;EACA,IAAI,CAACgF,UAAU,GAAGxB,OAAO,CAACyB,WAAW,CAAC,CAAC;EACvC,IAAI,CAACC,GAAG,GAAGzF,WAAW,CAAC0F,OAAO,CAAC3B,OAAO,CAAC0B,GAAG,CAAC,CAAC,CAAC;EAC7C,IAAI,CAACE,gBAAgB,GAAG5B,OAAO,CAAC6B,iBAAiB,CAAC,CAAC;EACnD,IAAI,CAACC,UAAU,GAAG9B,OAAO,CAAC8B,UAAU,CAAC,CAAC;EACtC,IAAI,CAACC,MAAM,GAAG/B,OAAO,CAAC+B,MAAM,CAAC,CAAC;EAC9B,IAAI,CAACC,WAAW,GAAG/F,WAAW,CAACgG,eAAe,CAACjC,OAAO,CAACkC,YAAY,CAAC,CAAC,CAAC;EACtE,IAAI,CAACC,WAAW,GAAGlG,WAAW,CAACgG,eAAe,CAACjC,OAAO,CAACoC,YAAY,CAAC,CAAC,CAAC;EACtE,IAAI,CAACC,QAAQ,GAAGpG,WAAW,CAAC0F,OAAO,CAAC3B,OAAO,CAACqC,QAAQ,CAAC,CAAC,CAAC;EACvD,IAAI,CAACC,MAAM,GAAGtC,OAAO,CAACsC,MAAM,CAAC,CAAC;EAC9B,IAAI,CAAC3F,GAAG,GAAGqD,OAAO,CAACrD,GAAG,CAAC,CAAC;EACxB,IAAI,CAAC4F,YAAY,GAAGvC,OAAO,CAACwC,cAAc,CAAC,CAAC;EAC5C,IAAI,CAACC,qBAAqB,GAAGzC,OAAO,CAAC0C,wBAAwB,CAAC,CAAC;EAC/D,IAAI,CAACC,cAAc,GAAG3C,OAAO,CAAC4C,gBAAgB,CAAC,CAAC;EAChD,IAAI,CAACC,qBAAqB,GAAG7C,OAAO,CAAC8C,wBAAwB,CAAC,CAAC;EAC/D,IAAI,CAACC,OAAO,GAAG9G,WAAW,CAAC0F,OAAO,CAAC3B,OAAO,CAAC+C,OAAO,CAAC,CAAC,CAAC;EACrD,IAAI,CAACC,WAAW,GAAGhD,OAAO,CAACiD,YAAY,CAAC,CAAC;EACzC,IAAI,CAACC,oBAAoB,GAAGlD,OAAO,CAACmD,sBAAsB,CAAC,CAAC;EAC5D,IAAI,CAAC1G,YAAY,GAAGuD,OAAO,CAACoD,aAAa,CAAC,CAAC;EAC3C,IAAI,CAACC,GAAG,GAAGrD,OAAO,CAACqD,GAAG,CAAC,CAAC;EACxB,IAAI,CAACC,KAAK,GAAGtD,OAAO,CAACsD,KAAK,CAAC,CAAC;;EAE5B;EACA,IAAI,CAACC,QAAQ,GAAGC,SAAS;EACzB,IAAI,CAAC1G,SAAS,GAAG;IAACL,YAAY,EAAEA,YAAY;IAAEE,GAAG,EAAEA,GAAG,IAAI,IAAI,CAACA;EAAK,CAAC;AACvE,CAAC;AAED8G,MAAM,CAACC,cAAc,CAACpH,YAAY,CAACwE,SAAS,EAC1C,QAAQ,EAAE;EACVlE,GAAG,EAAE,SAAAA,CAAA,EAAW;IACd,IAAI,CAAC,IAAI,CAAC2G,QAAQ,EAAE;MAClB,IAAI,CAACA,QAAQ,GAAG,IAAIhH,WAAW,CAAC,IAAI,CAACM,QAAQ,EAAE,IAAI,CAACC,SAAS,CAACL,YAAY,EAAE,IAAI,CAACK,SAAS,CAACH,GAAG,CAAC;IACjG;IAEA,OAAO,IAAI,CAAC4G,QAAQ;EACtB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjH,YAAY,CAACwE,SAAS,CAAC6C,KAAK,GAAG,SAASA,KAAKA,CAACxG,QAAQ,EAAE;EACtD,OAAO,IAAI,CAACyG,MAAM,CAACD,KAAK,CAACxG,QAAQ,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAb,YAAY,CAACwE,SAAS,CAAC+C,MAAM,GAAG,SAASA,MAAMA,CAAC3G,IAAI,EAAEC,QAAQ,EAAE;EAC9D,OAAO,IAAI,CAACyG,MAAM,CAACC,MAAM,CAAC3G,IAAI,EAAEC,QAAQ,CAAC;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAb,YAAY,CAACwE,SAAS,CAACgD,MAAM,GAAG,SAASA,MAAMA,CAAC3G,QAAQ,EAAE;EACxD,OAAO,IAAI,CAACyG,MAAM,CAACE,MAAM,CAAC3G,QAAQ,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAb,YAAY,CAACwE,SAAS,CAACiD,YAAY,GAAG,SAASA,YAAYA,CAAA,EAAG;EAC5D,OAAO,IAAI,CAACH,MAAM,CAACG,YAAY;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAzH,YAAY,CAACwE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EAChD,IAAIY,KAAK,GAAG,CAAC,CAAC;EACdtF,CAAC,CAACuF,MAAM,CAAC,IAAI,EAAE,UAASC,KAAK,EAAEC,GAAG,EAAE;IAClC,IAAI,CAACzF,CAAC,CAAC0F,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,IAAI,CAAEzF,CAAC,CAACuB,UAAU,CAACiE,KAAK,CAAC,EAAE;MACpDF,KAAK,CAACG,GAAG,CAAC,GAAGD,KAAK;IACpB;EACF,CAAC,CAAC;EACF,OAAOF,KAAK;AACd,CAAC;AAED7E,YAAY,CAACwE,SAAS,CAAChF,IAAI,CAAC0E,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EAAEC,OAAO,EAAE;EAC7E,OAAO7E,IAAI,CAAC0E,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACApE,WAAW,GAAG,SAASA,WAAWA,CAACC,OAAO,EAAEC,YAAY,EAAEE,GAAG,EAAE;EAC7D,IAAI,CAACE,QAAQ,GAAGL,OAAO;;EAEvB;EACA,IAAI,CAACM,SAAS,GAAG;IAACL,YAAY,EAAEA,YAAY;IAAEE,GAAG,EAAEA;EAAK,CAAC;EACzD,IAAI,CAACI,IAAI,GAAGlB,CAAC,CAACmB,QAAQ,CACpB,kDAAkD,CAAC;EACrD,CAAC,CAAC,IAAI,CAACF,SAAS,CAAC;;EAEjB;EACA,IAAI,CAACkH,aAAa,GAAGR,SAAS;AAChC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjH,WAAW,CAACuE,SAAS,CAAC6C,KAAK,GAAG,SAASA,KAAKA,CAACxG,QAAQ,EAAE;EACrD,IAAI0B,QAAQ,GAAGlD,CAAC,CAACmD,KAAK,CAAC,CAAC;EACxB,IAAIZ,OAAO,GAAG,IAAI,CAACrB,QAAQ,CAAC8G,KAAK,CAAC;IAAC9D,GAAG,EAAE,IAAI,CAAC9C,IAAI;IAAE+C,MAAM,EAAE;EAAK,CAAC,CAAC;EAElE5B,OAAO,GAAGA,OAAO,CAACC,IAAI,CAAC,UAAS6B,OAAO,EAAE;IACvCnB,QAAQ,CAACM,OAAO,CAAC,IAAI7C,YAAY,CAC/B,IAAI,CAACO,QAAQ,EACbmD,OAAO,EACP,IAAI,CAAClD,SAAS,CAACL,YAAY,EAC3B,IAAI,CAACK,SAAS,CAACH,GACjB,CAAC,CAAC;EACJ,CAAC,CAAC6B,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbN,OAAO,CAACQ,KAAK,CAAC,UAASX,KAAK,EAAE;IAC5Bc,QAAQ,CAACO,MAAM,CAACrB,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;IAC1B0B,QAAQ,CAACX,OAAO,CAACmB,OAAO,CAAClC,QAAQ,CAAC;EACpC;EAEA,OAAO0B,QAAQ,CAACX,OAAO;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA3B,WAAW,CAACuE,SAAS,CAAC+C,MAAM,GAAG,SAASA,MAAMA,CAAC3G,IAAI,EAAEC,QAAQ,EAAE;EAC7D,IAAItB,CAAC,CAACuB,UAAU,CAACF,IAAI,CAAC,EAAE;IACtBC,QAAQ,GAAGD,IAAI;IACfA,IAAI,GAAG,CAAC,CAAC;EACX;EACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;EAEjB,IAAI2B,QAAQ,GAAGlD,CAAC,CAACmD,KAAK,CAAC,CAAC;EACxB,IAAIQ,IAAI,GAAGnD,MAAM,CAACoD,EAAE,CAAC;IACnB,YAAY,EAAE1D,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,YAAY,CAAC;IACvC,kBAAkB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,kBAAkB,CAAC;IACnD,QAAQ,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,QAAQ,CAAC;IAC/B,UAAU,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,UAAU,CAAC;IACnC,aAAa,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,aAAa;EAC1C,CAAC,CAAC;EAEF,IAAIgB,OAAO,GAAG,IAAI,CAACrB,QAAQ,CAACgH,MAAM,CAAC;IAAChE,GAAG,EAAE,IAAI,CAAC9C,IAAI;IAAE+C,MAAM,EAAE,MAAM;IAAER,IAAI,EAAEA;EAAI,CAAC,CAAC;EAEhFpB,OAAO,GAAGA,OAAO,CAACC,IAAI,CAAC,UAAS6B,OAAO,EAAE;IACvCnB,QAAQ,CAACM,OAAO,CAAC,IAAI7C,YAAY,CAC/B,IAAI,CAACO,QAAQ,EACbmD,OAAO,EACP,IAAI,CAAClD,SAAS,CAACL,YAAY,EAC3B,IAAI,CAACK,SAAS,CAACH,GACjB,CAAC,CAAC;EACJ,CAAC,CAAC6B,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbN,OAAO,CAACQ,KAAK,CAAC,UAASX,KAAK,EAAE;IAC5Bc,QAAQ,CAACO,MAAM,CAACrB,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;IAC1B0B,QAAQ,CAACX,OAAO,CAACmB,OAAO,CAAClC,QAAQ,CAAC;EACpC;EAEA,OAAO0B,QAAQ,CAACX,OAAO;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA3B,WAAW,CAACuE,SAAS,CAACgD,MAAM,GAAG,SAASA,MAAMA,CAAC3G,QAAQ,EAAE;EACvD,IAAI0B,QAAQ,GAAGlD,CAAC,CAACmD,KAAK,CAAC,CAAC;EACxB,IAAIZ,OAAO,GAAG,IAAI,CAACrB,QAAQ,CAACiH,MAAM,CAAC;IAACjE,GAAG,EAAE,IAAI,CAAC9C,IAAI;IAAE+C,MAAM,EAAE;EAAQ,CAAC,CAAC;EAEtE5B,OAAO,GAAGA,OAAO,CAACC,IAAI,CAAC,UAAS6B,OAAO,EAAE;IACvCnB,QAAQ,CAACM,OAAO,CAACa,OAAO,CAAC;EAC3B,CAAC,CAACxB,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbN,OAAO,CAACQ,KAAK,CAAC,UAASX,KAAK,EAAE;IAC5Bc,QAAQ,CAACO,MAAM,CAACrB,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;IAC1B0B,QAAQ,CAACX,OAAO,CAACmB,OAAO,CAAClC,QAAQ,CAAC;EACpC;EAEA,OAAO0B,QAAQ,CAACX,OAAO;AACzB,CAAC;AAEDuF,MAAM,CAACC,cAAc,CAACnH,WAAW,CAACuE,SAAS,EACzC,cAAc,EAAE;EAChBlE,GAAG,EAAE,SAAAA,CAAA,EAAW;IACd,IAAI,CAAC,IAAI,CAACoH,aAAa,EAAE;MACvB,IAAI,CAACA,aAAa,GAAG,IAAIhI,eAAe,CACtC,IAAI,CAACa,QAAQ,EACb,IAAI,CAACC,SAAS,CAACL,YAAY,EAC3B,IAAI,CAACK,SAAS,CAACH,GACjB,CAAC;IACH;IACA,OAAO,IAAI,CAACqH,aAAa;EAC3B;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAzH,WAAW,CAACuE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EAC/C,OAAO,IAAI,CAACzD,SAAS;AACvB,CAAC;AAEDP,WAAW,CAACuE,SAAS,CAAChF,IAAI,CAAC0E,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EAAEC,OAAO,EAAE;EAC5E,OAAO7E,IAAI,CAAC0E,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;AAEDsD,MAAM,CAACC,OAAO,GAAG;EACf9H,QAAQ,EAAEA,QAAQ;EAClBC,QAAQ,EAAEA,QAAQ;EAClBC,YAAY,EAAEA,YAAY;EAC1BC,WAAW,EAAEA;AACf,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}