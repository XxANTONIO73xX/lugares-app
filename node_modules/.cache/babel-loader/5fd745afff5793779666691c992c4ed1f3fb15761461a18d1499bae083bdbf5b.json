{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar DeploymentList;\nvar DeploymentPage;\nvar DeploymentInstance;\nvar DeploymentContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the DeploymentList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeploymentList\n *\n * @param {Twilio.Preview.DeployedDevices} version - Version of the resource\n * @param {string} fleetSid - The unique identifier of the Fleet.\n */\n/* jshint ignore:end */\nDeploymentList = function DeploymentList(version, fleetSid) {\n  /* jshint ignore:start */\n  /**\n   * @function deployments\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext}\n   */\n  /* jshint ignore:end */\n  function DeploymentListInstance(sid) {\n    return DeploymentListInstance.get(sid);\n  }\n  DeploymentListInstance._version = version;\n  // Path Solution\n  DeploymentListInstance._solution = {\n    fleetSid: fleetSid\n  };\n  DeploymentListInstance._uri = _.template('/Fleets/<%= fleetSid %>/Deployments' // jshint ignore:line\n  )(DeploymentListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a DeploymentInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          A human readable description for this Deployment.\n   * @param {string} [opts.syncServiceSid] -\n   *          The unique identifier of the Sync service instance.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed DeploymentInstance\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'SyncServiceSid': _.get(opts, 'syncServiceSid')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DeploymentInstance(this._version, payload, this._solution.fleetSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams DeploymentInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists DeploymentInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of DeploymentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DeploymentPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of DeploymentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DeploymentPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a deployment\n   *\n   * @function get\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {string} sid - A string that uniquely identifies the Deployment.\n   *\n   * @returns {Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext}\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.get = function get(sid) {\n    return new DeploymentContext(this._version, this._solution.fleetSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  DeploymentListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return DeploymentListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the DeploymentPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeploymentPage\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {DeploymentSolution} solution - Path solution\n *\n * @returns DeploymentPage\n */\n/* jshint ignore:end */\nDeploymentPage = function DeploymentPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(DeploymentPage.prototype, Page.prototype);\nDeploymentPage.prototype.constructor = DeploymentPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of DeploymentInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentPage#\n *\n * @param {DeploymentPayload} payload - Payload response from the API\n *\n * @returns DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentPage.prototype.getInstance = function getInstance(payload) {\n  return new DeploymentInstance(this._version, payload, this._solution.fleetSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDeploymentPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nDeploymentPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the DeploymentContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance\n *\n * @property {string} sid - A string that uniquely identifies this Deployment.\n * @property {string} url - URL of this Deployment.\n * @property {string} friendlyName -\n *          A human readable description for this Deployment\n * @property {string} fleetSid - The unique identifier of the Fleet.\n * @property {string} accountSid - The unique SID that identifies this Account.\n * @property {string} syncServiceSid -\n *          The unique identifier of the Sync service instance.\n * @property {Date} dateCreated - The date this Deployment was created.\n * @property {Date} dateUpdated - The date this Deployment was updated.\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {DeploymentPayload} payload - The instance payload\n * @param {sid_like} fleetSid - The unique identifier of the Fleet.\n * @param {sid} sid - A string that uniquely identifies the Deployment.\n */\n/* jshint ignore:end */\nDeploymentInstance = function DeploymentInstance(version, payload, fleetSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.fleetSid = payload.fleet_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.syncServiceSid = payload.sync_service_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    fleetSid: fleetSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(DeploymentInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new DeploymentContext(this._version, this._solution.fleetSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a DeploymentInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a DeploymentInstance\n *\n * @function remove\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a DeploymentInstance\n *\n * @function update\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A human readable description for this Deployment.\n * @param {string} [opts.syncServiceSid] -\n *          The unique identifier of the Sync service instance.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDeploymentInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nDeploymentInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the DeploymentContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {sid_like} fleetSid - The fleet_sid\n * @param {sid} sid - A string that uniquely identifies the Deployment.\n */\n/* jshint ignore:end */\nDeploymentContext = function DeploymentContext(version, fleetSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    fleetSid: fleetSid,\n    sid: sid\n  };\n  this._uri = _.template('/Fleets/<%= fleetSid %>/Deployments/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a DeploymentInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new DeploymentInstance(this._version, payload, this._solution.fleetSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a DeploymentInstance\n *\n * @function remove\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a DeploymentInstance\n *\n * @function update\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A human readable description for this Deployment.\n * @param {string} [opts.syncServiceSid] -\n *          The unique identifier of the Sync service instance.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'SyncServiceSid': _.get(opts, 'syncServiceSid')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new DeploymentInstance(this._version, payload, this._solution.fleetSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDeploymentContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nDeploymentContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  DeploymentList: DeploymentList,\n  DeploymentPage: DeploymentPage,\n  DeploymentInstance: DeploymentInstance,\n  DeploymentContext: DeploymentContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","DeploymentList","DeploymentPage","DeploymentInstance","DeploymentContext","version","fleetSid","DeploymentListInstance","sid","get","_version","_solution","_uri","template","create","opts","callback","isFunction","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","pageLimit","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","url","friendlyName","friendly_name","fleet_sid","accountSid","account_sid","syncServiceSid","sync_service_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/preview/deployed_devices/fleet/deployment.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar DeploymentList;\nvar DeploymentPage;\nvar DeploymentInstance;\nvar DeploymentContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the DeploymentList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeploymentList\n *\n * @param {Twilio.Preview.DeployedDevices} version - Version of the resource\n * @param {string} fleetSid - The unique identifier of the Fleet.\n */\n/* jshint ignore:end */\nDeploymentList = function DeploymentList(version, fleetSid) {\n  /* jshint ignore:start */\n  /**\n   * @function deployments\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext}\n   */\n  /* jshint ignore:end */\n  function DeploymentListInstance(sid) {\n    return DeploymentListInstance.get(sid);\n  }\n\n  DeploymentListInstance._version = version;\n  // Path Solution\n  DeploymentListInstance._solution = {fleetSid: fleetSid};\n  DeploymentListInstance._uri = _.template(\n    '/Fleets/<%= fleetSid %>/Deployments' // jshint ignore:line\n  )(DeploymentListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a DeploymentInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          A human readable description for this Deployment.\n   * @param {string} [opts.syncServiceSid] -\n   *          The unique identifier of the Sync service instance.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed DeploymentInstance\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'SyncServiceSid': _.get(opts, 'syncServiceSid')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DeploymentInstance(\n        this._version,\n        payload,\n        this._solution.fleetSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams DeploymentInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists DeploymentInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of DeploymentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DeploymentPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of DeploymentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DeploymentPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a deployment\n   *\n   * @function get\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @param {string} sid - A string that uniquely identifies the Deployment.\n   *\n   * @returns {Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext}\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.get = function get(sid) {\n    return new DeploymentContext(this._version, this._solution.fleetSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  DeploymentListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return DeploymentListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DeploymentPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeploymentPage\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {DeploymentSolution} solution - Path solution\n *\n * @returns DeploymentPage\n */\n/* jshint ignore:end */\nDeploymentPage = function DeploymentPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(DeploymentPage.prototype, Page.prototype);\nDeploymentPage.prototype.constructor = DeploymentPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of DeploymentInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentPage#\n *\n * @param {DeploymentPayload} payload - Payload response from the API\n *\n * @returns DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentPage.prototype.getInstance = function getInstance(payload) {\n  return new DeploymentInstance(this._version, payload, this._solution.fleetSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDeploymentPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nDeploymentPage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DeploymentContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance\n *\n * @property {string} sid - A string that uniquely identifies this Deployment.\n * @property {string} url - URL of this Deployment.\n * @property {string} friendlyName -\n *          A human readable description for this Deployment\n * @property {string} fleetSid - The unique identifier of the Fleet.\n * @property {string} accountSid - The unique SID that identifies this Account.\n * @property {string} syncServiceSid -\n *          The unique identifier of the Sync service instance.\n * @property {Date} dateCreated - The date this Deployment was created.\n * @property {Date} dateUpdated - The date this Deployment was updated.\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {DeploymentPayload} payload - The instance payload\n * @param {sid_like} fleetSid - The unique identifier of the Fleet.\n * @param {sid} sid - A string that uniquely identifies the Deployment.\n */\n/* jshint ignore:end */\nDeploymentInstance = function DeploymentInstance(version, payload, fleetSid,\n                                                  sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.fleetSid = payload.fleet_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.syncServiceSid = payload.sync_service_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {fleetSid: fleetSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(DeploymentInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new DeploymentContext(this._version, this._solution.fleetSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a DeploymentInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a DeploymentInstance\n *\n * @function remove\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a DeploymentInstance\n *\n * @function update\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A human readable description for this Deployment.\n * @param {string} [opts.syncServiceSid] -\n *          The unique identifier of the Sync service instance.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDeploymentInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nDeploymentInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DeploymentContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {sid_like} fleetSid - The fleet_sid\n * @param {sid} sid - A string that uniquely identifies the Deployment.\n */\n/* jshint ignore:end */\nDeploymentContext = function DeploymentContext(version, fleetSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {fleetSid: fleetSid, sid: sid, };\n  this._uri = _.template(\n    '/Fleets/<%= fleetSid %>/Deployments/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a DeploymentInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new DeploymentInstance(\n      this._version,\n      payload,\n      this._solution.fleetSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a DeploymentInstance\n *\n * @function remove\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a DeploymentInstance\n *\n * @function update\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A human readable description for this Deployment.\n * @param {string} [opts.syncServiceSid] -\n *          The unique identifier of the Sync service instance.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'SyncServiceSid': _.get(opts, 'syncServiceSid')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new DeploymentInstance(\n      this._version,\n      payload,\n      this._solution.fleetSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeploymentContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDeploymentContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nDeploymentContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  DeploymentList: DeploymentList,\n  DeploymentPage: DeploymentPage,\n  DeploymentInstance: DeploymentInstance,\n  DeploymentContext: DeploymentContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}