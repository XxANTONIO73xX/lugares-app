{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar InteractionList = require('./session/interaction').InteractionList;\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar ParticipantList = require('./session/participant').ParticipantList;\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar SessionList;\nvar SessionPage;\nvar SessionInstance;\nvar SessionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionList\n *\n * @param {Twilio.Proxy.V1} version - Version of the resource\n * @param {string} serviceSid - Service Sid.\n */\n/* jshint ignore:end */\nSessionList = function SessionList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function sessions\n   * @memberof Twilio.Proxy.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext}\n   */\n  /* jshint ignore:end */\n  function SessionListInstance(sid) {\n    return SessionListInstance.get(sid);\n  }\n  SessionListInstance._version = version;\n  // Path Solution\n  SessionListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  SessionListInstance._uri = _.template('/Services/<%= serviceSid %>/Sessions' // jshint ignore:line\n  )(SessionListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams SessionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SessionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SessionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SessionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SessionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SessionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SessionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SessionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SessionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SessionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a SessionInstance\n   *\n   * @function create\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] -\n   *          A unique, developer assigned name of this Session.\n   * @param {Date} [opts.dateExpiry] - The date this Session should expire\n   * @param {number} [opts.ttl] - TTL for a Session, in seconds.\n   * @param {session.mode} [opts.mode] - The Mode of this Session\n   * @param {session.status} [opts.status] - Session status\n   * @param {string|list} [opts.participants] - The participants\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SessionInstance\n   */\n  /* jshint ignore:end */\n  SessionListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DateExpiry': serialize.iso8601DateTime(_.get(opts, 'dateExpiry')),\n      'Ttl': _.get(opts, 'ttl'),\n      'Mode': _.get(opts, 'mode'),\n      'Status': _.get(opts, 'status'),\n      'Participants': serialize.map(_.get(opts, 'participants'), function (e) {\n        return serialize.object(e);\n      })\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SessionInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a session\n   *\n   * @function get\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {string} sid - A string that uniquely identifies this Session.\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext}\n   */\n  /* jshint ignore:end */\n  SessionListInstance.get = function get(sid) {\n    return new SessionContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SessionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  SessionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return SessionListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SessionSolution} solution - Path solution\n *\n * @returns SessionPage\n */\n/* jshint ignore:end */\nSessionPage = function SessionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(SessionPage.prototype, Page.prototype);\nSessionPage.prototype.constructor = SessionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SessionInstance\n *\n * @function getInstance\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionPage#\n *\n * @param {SessionPayload} payload - Payload response from the API\n *\n * @returns SessionInstance\n */\n/* jshint ignore:end */\nSessionPage.prototype.getInstance = function getInstance(payload) {\n  return new SessionInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSessionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nSessionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionInstance\n *\n * @property {string} sid - A string that uniquely identifies this Session.\n * @property {string} serviceSid - Service Sid.\n * @property {string} accountSid - Account Sid.\n * @property {Date} dateStarted - The date this Session was started\n * @property {Date} dateEnded - The date this Session was ended\n * @property {Date} dateLastInteraction -\n *          The date this Session last had an interaction\n * @property {Date} dateExpiry - The date this Session should expire\n * @property {string} uniqueName -\n *          A unique, developer assigned identifier for this Session.\n * @property {session.status} status - The Status of this Session\n * @property {string} closedReason - Reason Session ended.\n * @property {number} ttl - TTL for a Session, in seconds.\n * @property {session.mode} mode - The Mode of this Session\n * @property {Date} dateCreated - The date this Session was created\n * @property {Date} dateUpdated - The date this Session was last updated\n * @property {string} url - The URL of this resource.\n * @property {string} links - Nested resource URLs.\n *\n * @param {V1} version - Version of the resource\n * @param {SessionPayload} payload - The instance payload\n * @param {sid} serviceSid - Service Sid.\n * @param {sid_like} sid - A string that uniquely identifies this Session.\n */\n/* jshint ignore:end */\nSessionInstance = function SessionInstance(version, payload, serviceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateStarted = deserialize.iso8601DateTime(payload.date_started); // jshint ignore:line\n  this.dateEnded = deserialize.iso8601DateTime(payload.date_ended); // jshint ignore:line\n  this.dateLastInteraction = deserialize.iso8601DateTime(payload.date_last_interaction); // jshint ignore:line\n  this.dateExpiry = deserialize.iso8601DateTime(payload.date_expiry); // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.closedReason = payload.closed_reason; // jshint ignore:line\n  this.ttl = deserialize.integer(payload.ttl); // jshint ignore:line\n  this.mode = payload.mode; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(SessionInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new SessionContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SessionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a SessionInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a SessionInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {Date} [opts.dateExpiry] - The date this Session should expire\n * @param {number} [opts.ttl] - TTL for a Session, in seconds.\n * @param {session.mode} [opts.mode] - The mode\n * @param {session.status} [opts.status] - The Status of this Session\n * @param {string|list} [opts.participants] - The participants\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the interactions\n *\n * @function interactions\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.InteractionList}\n */\n/* jshint ignore:end */\nSessionInstance.prototype.interactions = function interactions() {\n  return this._proxy.interactions;\n};\n\n/* jshint ignore:start */\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList}\n */\n/* jshint ignore:end */\nSessionInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSessionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nSessionInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext\n *\n * @property {Twilio.Proxy.V1.ServiceContext.SessionContext.InteractionList} interactions -\n *          interactions resource\n * @property {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList} participants -\n *          participants resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid - Service Sid.\n * @param {sid_like} sid - A string that uniquely identifies this Session.\n */\n/* jshint ignore:end */\nSessionContext = function SessionContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid\n  };\n  this._uri = _.template('/Services/<%= serviceSid %>/Sessions/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._interactions = undefined;\n  this._participants = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SessionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SessionInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a SessionInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a SessionInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @param {object} [opts] - Options for request\n * @param {Date} [opts.dateExpiry] - The date this Session should expire\n * @param {number} [opts.ttl] - TTL for a Session, in seconds.\n * @param {session.mode} [opts.mode] - The mode\n * @param {session.status} [opts.status] - The Status of this Session\n * @param {string|list} [opts.participants] - The participants\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'DateExpiry': serialize.iso8601DateTime(_.get(opts, 'dateExpiry')),\n    'Ttl': _.get(opts, 'ttl'),\n    'Mode': _.get(opts, 'mode'),\n    'Status': _.get(opts, 'status'),\n    'Participants': serialize.map(_.get(opts, 'participants'), function (e) {\n      return serialize.object(e);\n    })\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SessionInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(SessionContext.prototype, 'interactions', {\n  get: function () {\n    if (!this._interactions) {\n      this._interactions = new InteractionList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n    return this._interactions;\n  }\n});\nObject.defineProperty(SessionContext.prototype, 'participants', {\n  get: function () {\n    if (!this._participants) {\n      this._participants = new ParticipantList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n    return this._participants;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSessionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nSessionContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  SessionList: SessionList,\n  SessionPage: SessionPage,\n  SessionInstance: SessionInstance,\n  SessionContext: SessionContext\n};","map":{"version":3,"names":["Q","require","_","util","InteractionList","Page","ParticipantList","deserialize","serialize","values","SessionList","SessionPage","SessionInstance","SessionContext","version","serviceSid","SessionListInstance","sid","get","_version","_solution","_uri","template","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","iso8601DateTime","map","e","object","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","service_sid","accountSid","account_sid","dateStarted","date_started","dateEnded","date_ended","dateLastInteraction","date_last_interaction","dateExpiry","date_expiry","uniqueName","unique_name","status","closedReason","closed_reason","ttl","integer","mode","dateCreated","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","interactions","participants","_interactions","_participants","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/proxy/v1/service/session.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar InteractionList = require('./session/interaction').InteractionList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar ParticipantList = require('./session/participant').ParticipantList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar SessionList;\nvar SessionPage;\nvar SessionInstance;\nvar SessionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionList\n *\n * @param {Twilio.Proxy.V1} version - Version of the resource\n * @param {string} serviceSid - Service Sid.\n */\n/* jshint ignore:end */\nSessionList = function SessionList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function sessions\n   * @memberof Twilio.Proxy.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext}\n   */\n  /* jshint ignore:end */\n  function SessionListInstance(sid) {\n    return SessionListInstance.get(sid);\n  }\n\n  SessionListInstance._version = version;\n  // Path Solution\n  SessionListInstance._solution = {serviceSid: serviceSid};\n  SessionListInstance._uri = _.template(\n    '/Services/<%= serviceSid %>/Sessions' // jshint ignore:line\n  )(SessionListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams SessionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SessionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SessionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SessionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SessionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SessionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SessionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SessionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SessionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SessionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a SessionInstance\n   *\n   * @function create\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] -\n   *          A unique, developer assigned name of this Session.\n   * @param {Date} [opts.dateExpiry] - The date this Session should expire\n   * @param {number} [opts.ttl] - TTL for a Session, in seconds.\n   * @param {session.mode} [opts.mode] - The Mode of this Session\n   * @param {session.status} [opts.status] - Session status\n   * @param {string|list} [opts.participants] - The participants\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SessionInstance\n   */\n  /* jshint ignore:end */\n  SessionListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DateExpiry': serialize.iso8601DateTime(_.get(opts, 'dateExpiry')),\n      'Ttl': _.get(opts, 'ttl'),\n      'Mode': _.get(opts, 'mode'),\n      'Status': _.get(opts, 'status'),\n      'Participants': serialize.map(_.get(opts, 'participants'), function(e) { return serialize.object(e); })\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SessionInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a session\n   *\n   * @function get\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {string} sid - A string that uniquely identifies this Session.\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext}\n   */\n  /* jshint ignore:end */\n  SessionListInstance.get = function get(sid) {\n    return new SessionContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SessionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SessionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SessionListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SessionSolution} solution - Path solution\n *\n * @returns SessionPage\n */\n/* jshint ignore:end */\nSessionPage = function SessionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SessionPage.prototype, Page.prototype);\nSessionPage.prototype.constructor = SessionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SessionInstance\n *\n * @function getInstance\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionPage#\n *\n * @param {SessionPayload} payload - Payload response from the API\n *\n * @returns SessionInstance\n */\n/* jshint ignore:end */\nSessionPage.prototype.getInstance = function getInstance(payload) {\n  return new SessionInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSessionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSessionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionInstance\n *\n * @property {string} sid - A string that uniquely identifies this Session.\n * @property {string} serviceSid - Service Sid.\n * @property {string} accountSid - Account Sid.\n * @property {Date} dateStarted - The date this Session was started\n * @property {Date} dateEnded - The date this Session was ended\n * @property {Date} dateLastInteraction -\n *          The date this Session last had an interaction\n * @property {Date} dateExpiry - The date this Session should expire\n * @property {string} uniqueName -\n *          A unique, developer assigned identifier for this Session.\n * @property {session.status} status - The Status of this Session\n * @property {string} closedReason - Reason Session ended.\n * @property {number} ttl - TTL for a Session, in seconds.\n * @property {session.mode} mode - The Mode of this Session\n * @property {Date} dateCreated - The date this Session was created\n * @property {Date} dateUpdated - The date this Session was last updated\n * @property {string} url - The URL of this resource.\n * @property {string} links - Nested resource URLs.\n *\n * @param {V1} version - Version of the resource\n * @param {SessionPayload} payload - The instance payload\n * @param {sid} serviceSid - Service Sid.\n * @param {sid_like} sid - A string that uniquely identifies this Session.\n */\n/* jshint ignore:end */\nSessionInstance = function SessionInstance(version, payload, serviceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateStarted = deserialize.iso8601DateTime(payload.date_started); // jshint ignore:line\n  this.dateEnded = deserialize.iso8601DateTime(payload.date_ended); // jshint ignore:line\n  this.dateLastInteraction = deserialize.iso8601DateTime(payload.date_last_interaction); // jshint ignore:line\n  this.dateExpiry = deserialize.iso8601DateTime(payload.date_expiry); // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.closedReason = payload.closed_reason; // jshint ignore:line\n  this.ttl = deserialize.integer(payload.ttl); // jshint ignore:line\n  this.mode = payload.mode; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(SessionInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new SessionContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SessionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a SessionInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a SessionInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {Date} [opts.dateExpiry] - The date this Session should expire\n * @param {number} [opts.ttl] - TTL for a Session, in seconds.\n * @param {session.mode} [opts.mode] - The mode\n * @param {session.status} [opts.status] - The Status of this Session\n * @param {string|list} [opts.participants] - The participants\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the interactions\n *\n * @function interactions\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.InteractionList}\n */\n/* jshint ignore:end */\nSessionInstance.prototype.interactions = function interactions() {\n  return this._proxy.interactions;\n};\n\n/* jshint ignore:start */\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList}\n */\n/* jshint ignore:end */\nSessionInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSessionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSessionInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext\n *\n * @property {Twilio.Proxy.V1.ServiceContext.SessionContext.InteractionList} interactions -\n *          interactions resource\n * @property {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList} participants -\n *          participants resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid - Service Sid.\n * @param {sid_like} sid - A string that uniquely identifies this Session.\n */\n/* jshint ignore:end */\nSessionContext = function SessionContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, sid: sid, };\n  this._uri = _.template(\n    '/Services/<%= serviceSid %>/Sessions/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._interactions = undefined;\n  this._participants = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SessionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SessionInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a SessionInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a SessionInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @param {object} [opts] - Options for request\n * @param {Date} [opts.dateExpiry] - The date this Session should expire\n * @param {number} [opts.ttl] - TTL for a Session, in seconds.\n * @param {session.mode} [opts.mode] - The mode\n * @param {session.status} [opts.status] - The Status of this Session\n * @param {string|list} [opts.participants] - The participants\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'DateExpiry': serialize.iso8601DateTime(_.get(opts, 'dateExpiry')),\n    'Ttl': _.get(opts, 'ttl'),\n    'Mode': _.get(opts, 'mode'),\n    'Status': _.get(opts, 'status'),\n    'Participants': serialize.map(_.get(opts, 'participants'), function(e) { return serialize.object(e); })\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SessionInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(SessionContext.prototype,\n  'interactions', {\n  get: function() {\n    if (!this._interactions) {\n      this._interactions = new InteractionList(\n        this._version,\n        this._solution.serviceSid,\n        this._solution.sid\n      );\n    }\n    return this._interactions;\n  }\n});\n\nObject.defineProperty(SessionContext.prototype,\n  'participants', {\n  get: function() {\n    if (!this._participants) {\n      this._participants = new ParticipantList(\n        this._version,\n        this._solution.serviceSid,\n        this._solution.sid\n      );\n    }\n    return this._participants;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSessionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSessionContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SessionList: SessionList,\n  SessionPage: SessionPage,\n  SessionInstance: SessionInstance,\n  SessionContext: SessionContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}