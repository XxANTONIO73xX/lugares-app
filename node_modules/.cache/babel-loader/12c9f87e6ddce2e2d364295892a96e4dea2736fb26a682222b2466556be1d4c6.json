{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar DefaultsList = require('./assistant/defaults').DefaultsList;\nvar DialogueList = require('./assistant/dialogue').DialogueList;\nvar FieldTypeList = require('./assistant/fieldType').FieldTypeList;\nvar ModelBuildList = require('./assistant/modelBuild').ModelBuildList;\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar QueryList = require('./assistant/query').QueryList;\nvar StyleSheetList = require('./assistant/styleSheet').StyleSheetList;\nvar TaskList = require('./assistant/task').TaskList;\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar AssistantList;\nvar AssistantPage;\nvar AssistantInstance;\nvar AssistantContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the AssistantList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantList\n *\n * @param {Twilio.Autopilot.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nAssistantList = function AssistantList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function assistants\n   * @memberof Twilio.Autopilot.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext}\n   */\n  /* jshint ignore:end */\n  function AssistantListInstance(sid) {\n    return AssistantListInstance.get(sid);\n  }\n  AssistantListInstance._version = version;\n  // Path Solution\n  AssistantListInstance._solution = {};\n  AssistantListInstance._uri = _.template('/Assistants' // jshint ignore:line\n  )(AssistantListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams AssistantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists AssistantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of AssistantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AssistantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of AssistantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AssistantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a AssistantInstance\n   *\n   * @function create\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          A text description for the Assistant. It is non-unique and can be up to 255 characters long.\n   * @param {boolean} [opts.logQueries] -\n   *          A boolean that specifies whether queries should be logged for 30 days past training. If `false`, no queries will be stored. If `true`, queries will be stored for 30 days and deleted thereafter. Defaults to `true` if no value is provided.\n   * @param {string} [opts.uniqueName] -\n   *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n   * @param {string} [opts.callbackUrl] - The callback_url\n   * @param {string} [opts.callbackEvents] -\n   *          A space-separated list of callback events that will trigger callbacks\n   * @param {string} [opts.styleSheet] -\n   *          A JSON object that defines the assistant [style sheet](https://www.twilio.com/docs/autopilot/api/assistant/stylesheet)\n   * @param {string} [opts.defaults] -\n   *          A JSON object that defines the assistant's [default tasks](https://www.twilio.com/docs/autopilot/api/assistant/defaults) for various scenarios\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AssistantInstance\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'LogQueries': serialize.bool(_.get(opts, 'logQueries')),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'CallbackUrl': _.get(opts, 'callbackUrl'),\n      'CallbackEvents': _.get(opts, 'callbackEvents'),\n      'StyleSheet': serialize.object(_.get(opts, 'styleSheet')),\n      'Defaults': serialize.object(_.get(opts, 'defaults'))\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AssistantInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a assistant\n   *\n   * @function get\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {string} sid -\n   *          A 34-character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext}\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.get = function get(sid) {\n    return new AssistantContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  AssistantListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return AssistantListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the AssistantPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AssistantSolution} solution - Path solution\n *\n * @returns AssistantPage\n */\n/* jshint ignore:end */\nAssistantPage = function AssistantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(AssistantPage.prototype, Page.prototype);\nAssistantPage.prototype.constructor = AssistantPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of AssistantInstance\n *\n * @function getInstance\n * @memberof Twilio.Autopilot.V1.AssistantPage#\n *\n * @param {AssistantPayload} payload - Payload response from the API\n *\n * @returns AssistantInstance\n */\n/* jshint ignore:end */\nAssistantPage.prototype.getInstance = function getInstance(payload) {\n  return new AssistantInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAssistantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nAssistantPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the AssistantContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account that created this Assistant.\n * @property {Date} dateCreated - The date that this resource was created\n * @property {Date} dateUpdated - The date that this resource was last updated\n * @property {string} friendlyName -\n *          A text description for the Assistant. It is non-unique and can be up to 255 characters long.\n * @property {string} latestModelBuildSid - The latest_model_build_sid\n * @property {string} links - The links\n * @property {boolean} logQueries -\n *          A boolean that specifies whether queries should be logged for 30 days past training. If `false`, no queries will be stored. If `true`, queries will be stored for 30 days and deleted thereafter.\n * @property {string} sid -\n *          A 34-character string that uniquely identifies this resource.\n * @property {string} uniqueName -\n *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n * @property {string} url - The url\n * @property {string} callbackUrl - The callback_url\n * @property {string} callbackEvents - The callback_events\n *\n * @param {V1} version - Version of the resource\n * @param {AssistantPayload} payload - The instance payload\n * @param {sid_like} sid -\n *          A 34-character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nAssistantInstance = function AssistantInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.latestModelBuildSid = payload.latest_model_build_sid; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.logQueries = payload.log_queries; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.callbackUrl = payload.callback_url; // jshint ignore:line\n  this.callbackEvents = payload.callback_events; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(AssistantInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new AssistantContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a AssistantInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a AssistantInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A text description for the Assistant. It is non-unique and can be up to 255 characters long.\n * @param {boolean} [opts.logQueries] -\n *          A boolean that specifies whether queries should be logged for 30 days past training. If `false`, no queries will be stored. If `true`, queries will be stored for 30 days and deleted thereafter. Defaults to `true` if no value is provided.\n * @param {string} [opts.uniqueName] -\n *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n * @param {string} [opts.callbackUrl] - The callback_url\n * @param {string} [opts.callbackEvents] -\n *          A space-separated list of callback events that will trigger callbacks\n * @param {string} [opts.styleSheet] -\n *          A JSON object that defines the assistant [style sheet](https://www.twilio.com/docs/autopilot/api/assistant/stylesheet)\n * @param {string} [opts.defaults] -\n *          A JSON object that defines the assistant's [default tasks](https://www.twilio.com/docs/autopilot/api/assistant/defaults) for various scenarios\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a AssistantInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the fieldTypes\n *\n * @function fieldTypes\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.FieldTypeList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.fieldTypes = function fieldTypes() {\n  return this._proxy.fieldTypes;\n};\n\n/* jshint ignore:start */\n/**\n * Access the tasks\n *\n * @function tasks\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.tasks = function tasks() {\n  return this._proxy.tasks;\n};\n\n/* jshint ignore:start */\n/**\n * Access the modelBuilds\n *\n * @function modelBuilds\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.ModelBuildList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.modelBuilds = function modelBuilds() {\n  return this._proxy.modelBuilds;\n};\n\n/* jshint ignore:start */\n/**\n * Access the queries\n *\n * @function queries\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.QueryList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.queries = function queries() {\n  return this._proxy.queries;\n};\n\n/* jshint ignore:start */\n/**\n * Access the styleSheet\n *\n * @function styleSheet\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.StyleSheetList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.styleSheet = function styleSheet() {\n  return this._proxy.styleSheet;\n};\n\n/* jshint ignore:start */\n/**\n * Access the defaults\n *\n * @function defaults\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.DefaultsList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.defaults = function defaults() {\n  return this._proxy.defaults;\n};\n\n/* jshint ignore:start */\n/**\n * Access the dialogues\n *\n * @function dialogues\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.DialogueList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.dialogues = function dialogues() {\n  return this._proxy.dialogues;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nAssistantInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the AssistantContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext\n *\n * @property {Twilio.Autopilot.V1.AssistantContext.FieldTypeList} fieldTypes -\n *          fieldTypes resource\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskList} tasks - tasks resource\n * @property {Twilio.Autopilot.V1.AssistantContext.ModelBuildList} modelBuilds -\n *          modelBuilds resource\n * @property {Twilio.Autopilot.V1.AssistantContext.QueryList} queries -\n *          queries resource\n * @property {Twilio.Autopilot.V1.AssistantContext.StyleSheetList} styleSheet -\n *          styleSheet resource\n * @property {Twilio.Autopilot.V1.AssistantContext.DefaultsList} defaults -\n *          defaults resource\n * @property {Twilio.Autopilot.V1.AssistantContext.DialogueList} dialogues -\n *          dialogues resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid -\n *          A 34-character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nAssistantContext = function AssistantContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = _.template('/Assistants/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._fieldTypes = undefined;\n  this._tasks = undefined;\n  this._modelBuilds = undefined;\n  this._queries = undefined;\n  this._styleSheet = undefined;\n  this._defaults = undefined;\n  this._dialogues = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a AssistantInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n/* jshint ignore:end */\nAssistantContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AssistantInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a AssistantInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A text description for the Assistant. It is non-unique and can be up to 255 characters long.\n * @param {boolean} [opts.logQueries] -\n *          A boolean that specifies whether queries should be logged for 30 days past training. If `false`, no queries will be stored. If `true`, queries will be stored for 30 days and deleted thereafter. Defaults to `true` if no value is provided.\n * @param {string} [opts.uniqueName] -\n *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n * @param {string} [opts.callbackUrl] - The callback_url\n * @param {string} [opts.callbackEvents] -\n *          A space-separated list of callback events that will trigger callbacks\n * @param {string} [opts.styleSheet] -\n *          A JSON object that defines the assistant [style sheet](https://www.twilio.com/docs/autopilot/api/assistant/stylesheet)\n * @param {string} [opts.defaults] -\n *          A JSON object that defines the assistant's [default tasks](https://www.twilio.com/docs/autopilot/api/assistant/defaults) for various scenarios\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n/* jshint ignore:end */\nAssistantContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'LogQueries': serialize.bool(_.get(opts, 'logQueries')),\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'CallbackUrl': _.get(opts, 'callbackUrl'),\n    'CallbackEvents': _.get(opts, 'callbackEvents'),\n    'StyleSheet': serialize.object(_.get(opts, 'styleSheet')),\n    'Defaults': serialize.object(_.get(opts, 'defaults'))\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AssistantInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a AssistantInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n/* jshint ignore:end */\nAssistantContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(AssistantContext.prototype, 'fieldTypes', {\n  get: function () {\n    if (!this._fieldTypes) {\n      this._fieldTypes = new FieldTypeList(this._version, this._solution.sid);\n    }\n    return this._fieldTypes;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'tasks', {\n  get: function () {\n    if (!this._tasks) {\n      this._tasks = new TaskList(this._version, this._solution.sid);\n    }\n    return this._tasks;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'modelBuilds', {\n  get: function () {\n    if (!this._modelBuilds) {\n      this._modelBuilds = new ModelBuildList(this._version, this._solution.sid);\n    }\n    return this._modelBuilds;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'queries', {\n  get: function () {\n    if (!this._queries) {\n      this._queries = new QueryList(this._version, this._solution.sid);\n    }\n    return this._queries;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'styleSheet', {\n  get: function () {\n    if (!this._styleSheet) {\n      this._styleSheet = new StyleSheetList(this._version, this._solution.sid);\n    }\n    return this._styleSheet;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'defaults', {\n  get: function () {\n    if (!this._defaults) {\n      this._defaults = new DefaultsList(this._version, this._solution.sid);\n    }\n    return this._defaults;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'dialogues', {\n  get: function () {\n    if (!this._dialogues) {\n      this._dialogues = new DialogueList(this._version, this._solution.sid);\n    }\n    return this._dialogues;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAssistantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nAssistantContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  AssistantList: AssistantList,\n  AssistantPage: AssistantPage,\n  AssistantInstance: AssistantInstance,\n  AssistantContext: AssistantContext\n};","map":{"version":3,"names":["Q","require","_","util","DefaultsList","DialogueList","FieldTypeList","ModelBuildList","Page","QueryList","StyleSheetList","TaskList","deserialize","serialize","values","AssistantList","AssistantPage","AssistantInstance","AssistantContext","version","AssistantListInstance","sid","get","_version","_solution","_uri","template","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","bool","object","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","friendlyName","friendly_name","latestModelBuildSid","latest_model_build_sid","links","logQueries","log_queries","uniqueName","unique_name","url","callbackUrl","callback_url","callbackEvents","callback_events","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","fieldTypes","tasks","modelBuilds","queries","styleSheet","defaults","dialogues","_fieldTypes","_tasks","_modelBuilds","_queries","_styleSheet","_defaults","_dialogues","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/autopilot/v1/assistant.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar DefaultsList = require('./assistant/defaults').DefaultsList;\nvar DialogueList = require('./assistant/dialogue').DialogueList;\nvar FieldTypeList = require('./assistant/fieldType').FieldTypeList;\nvar ModelBuildList = require('./assistant/modelBuild').ModelBuildList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar QueryList = require('./assistant/query').QueryList;\nvar StyleSheetList = require('./assistant/styleSheet').StyleSheetList;\nvar TaskList = require('./assistant/task').TaskList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar AssistantList;\nvar AssistantPage;\nvar AssistantInstance;\nvar AssistantContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the AssistantList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantList\n *\n * @param {Twilio.Autopilot.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nAssistantList = function AssistantList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function assistants\n   * @memberof Twilio.Autopilot.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext}\n   */\n  /* jshint ignore:end */\n  function AssistantListInstance(sid) {\n    return AssistantListInstance.get(sid);\n  }\n\n  AssistantListInstance._version = version;\n  // Path Solution\n  AssistantListInstance._solution = {};\n  AssistantListInstance._uri = _.template(\n    '/Assistants' // jshint ignore:line\n  )(AssistantListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams AssistantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists AssistantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of AssistantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AssistantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of AssistantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AssistantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a AssistantInstance\n   *\n   * @function create\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          A text description for the Assistant. It is non-unique and can be up to 255 characters long.\n   * @param {boolean} [opts.logQueries] -\n   *          A boolean that specifies whether queries should be logged for 30 days past training. If `false`, no queries will be stored. If `true`, queries will be stored for 30 days and deleted thereafter. Defaults to `true` if no value is provided.\n   * @param {string} [opts.uniqueName] -\n   *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n   * @param {string} [opts.callbackUrl] - The callback_url\n   * @param {string} [opts.callbackEvents] -\n   *          A space-separated list of callback events that will trigger callbacks\n   * @param {string} [opts.styleSheet] -\n   *          A JSON object that defines the assistant [style sheet](https://www.twilio.com/docs/autopilot/api/assistant/stylesheet)\n   * @param {string} [opts.defaults] -\n   *          A JSON object that defines the assistant's [default tasks](https://www.twilio.com/docs/autopilot/api/assistant/defaults) for various scenarios\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AssistantInstance\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'LogQueries': serialize.bool(_.get(opts, 'logQueries')),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'CallbackUrl': _.get(opts, 'callbackUrl'),\n      'CallbackEvents': _.get(opts, 'callbackEvents'),\n      'StyleSheet': serialize.object(_.get(opts, 'styleSheet')),\n      'Defaults': serialize.object(_.get(opts, 'defaults'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AssistantInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a assistant\n   *\n   * @function get\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {string} sid -\n   *          A 34-character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext}\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.get = function get(sid) {\n    return new AssistantContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AssistantListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AssistantListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AssistantPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AssistantSolution} solution - Path solution\n *\n * @returns AssistantPage\n */\n/* jshint ignore:end */\nAssistantPage = function AssistantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AssistantPage.prototype, Page.prototype);\nAssistantPage.prototype.constructor = AssistantPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of AssistantInstance\n *\n * @function getInstance\n * @memberof Twilio.Autopilot.V1.AssistantPage#\n *\n * @param {AssistantPayload} payload - Payload response from the API\n *\n * @returns AssistantInstance\n */\n/* jshint ignore:end */\nAssistantPage.prototype.getInstance = function getInstance(payload) {\n  return new AssistantInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAssistantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAssistantPage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AssistantContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account that created this Assistant.\n * @property {Date} dateCreated - The date that this resource was created\n * @property {Date} dateUpdated - The date that this resource was last updated\n * @property {string} friendlyName -\n *          A text description for the Assistant. It is non-unique and can be up to 255 characters long.\n * @property {string} latestModelBuildSid - The latest_model_build_sid\n * @property {string} links - The links\n * @property {boolean} logQueries -\n *          A boolean that specifies whether queries should be logged for 30 days past training. If `false`, no queries will be stored. If `true`, queries will be stored for 30 days and deleted thereafter.\n * @property {string} sid -\n *          A 34-character string that uniquely identifies this resource.\n * @property {string} uniqueName -\n *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n * @property {string} url - The url\n * @property {string} callbackUrl - The callback_url\n * @property {string} callbackEvents - The callback_events\n *\n * @param {V1} version - Version of the resource\n * @param {AssistantPayload} payload - The instance payload\n * @param {sid_like} sid -\n *          A 34-character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nAssistantInstance = function AssistantInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.latestModelBuildSid = payload.latest_model_build_sid; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.logQueries = payload.log_queries; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.callbackUrl = payload.callback_url; // jshint ignore:line\n  this.callbackEvents = payload.callback_events; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(AssistantInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new AssistantContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a AssistantInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a AssistantInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A text description for the Assistant. It is non-unique and can be up to 255 characters long.\n * @param {boolean} [opts.logQueries] -\n *          A boolean that specifies whether queries should be logged for 30 days past training. If `false`, no queries will be stored. If `true`, queries will be stored for 30 days and deleted thereafter. Defaults to `true` if no value is provided.\n * @param {string} [opts.uniqueName] -\n *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n * @param {string} [opts.callbackUrl] - The callback_url\n * @param {string} [opts.callbackEvents] -\n *          A space-separated list of callback events that will trigger callbacks\n * @param {string} [opts.styleSheet] -\n *          A JSON object that defines the assistant [style sheet](https://www.twilio.com/docs/autopilot/api/assistant/stylesheet)\n * @param {string} [opts.defaults] -\n *          A JSON object that defines the assistant's [default tasks](https://www.twilio.com/docs/autopilot/api/assistant/defaults) for various scenarios\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a AssistantInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the fieldTypes\n *\n * @function fieldTypes\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.FieldTypeList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.fieldTypes = function fieldTypes() {\n  return this._proxy.fieldTypes;\n};\n\n/* jshint ignore:start */\n/**\n * Access the tasks\n *\n * @function tasks\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.tasks = function tasks() {\n  return this._proxy.tasks;\n};\n\n/* jshint ignore:start */\n/**\n * Access the modelBuilds\n *\n * @function modelBuilds\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.ModelBuildList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.modelBuilds = function modelBuilds() {\n  return this._proxy.modelBuilds;\n};\n\n/* jshint ignore:start */\n/**\n * Access the queries\n *\n * @function queries\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.QueryList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.queries = function queries() {\n  return this._proxy.queries;\n};\n\n/* jshint ignore:start */\n/**\n * Access the styleSheet\n *\n * @function styleSheet\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.StyleSheetList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.styleSheet = function styleSheet() {\n  return this._proxy.styleSheet;\n};\n\n/* jshint ignore:start */\n/**\n * Access the defaults\n *\n * @function defaults\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.DefaultsList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.defaults = function defaults() {\n  return this._proxy.defaults;\n};\n\n/* jshint ignore:start */\n/**\n * Access the dialogues\n *\n * @function dialogues\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.DialogueList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.dialogues = function dialogues() {\n  return this._proxy.dialogues;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAssistantInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AssistantContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext\n *\n * @property {Twilio.Autopilot.V1.AssistantContext.FieldTypeList} fieldTypes -\n *          fieldTypes resource\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskList} tasks - tasks resource\n * @property {Twilio.Autopilot.V1.AssistantContext.ModelBuildList} modelBuilds -\n *          modelBuilds resource\n * @property {Twilio.Autopilot.V1.AssistantContext.QueryList} queries -\n *          queries resource\n * @property {Twilio.Autopilot.V1.AssistantContext.StyleSheetList} styleSheet -\n *          styleSheet resource\n * @property {Twilio.Autopilot.V1.AssistantContext.DefaultsList} defaults -\n *          defaults resource\n * @property {Twilio.Autopilot.V1.AssistantContext.DialogueList} dialogues -\n *          dialogues resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid -\n *          A 34-character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nAssistantContext = function AssistantContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = _.template(\n    '/Assistants/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._fieldTypes = undefined;\n  this._tasks = undefined;\n  this._modelBuilds = undefined;\n  this._queries = undefined;\n  this._styleSheet = undefined;\n  this._defaults = undefined;\n  this._dialogues = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a AssistantInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n/* jshint ignore:end */\nAssistantContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new AssistantInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a AssistantInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A text description for the Assistant. It is non-unique and can be up to 255 characters long.\n * @param {boolean} [opts.logQueries] -\n *          A boolean that specifies whether queries should be logged for 30 days past training. If `false`, no queries will be stored. If `true`, queries will be stored for 30 days and deleted thereafter. Defaults to `true` if no value is provided.\n * @param {string} [opts.uniqueName] -\n *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n * @param {string} [opts.callbackUrl] - The callback_url\n * @param {string} [opts.callbackEvents] -\n *          A space-separated list of callback events that will trigger callbacks\n * @param {string} [opts.styleSheet] -\n *          A JSON object that defines the assistant [style sheet](https://www.twilio.com/docs/autopilot/api/assistant/stylesheet)\n * @param {string} [opts.defaults] -\n *          A JSON object that defines the assistant's [default tasks](https://www.twilio.com/docs/autopilot/api/assistant/defaults) for various scenarios\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n/* jshint ignore:end */\nAssistantContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'LogQueries': serialize.bool(_.get(opts, 'logQueries')),\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'CallbackUrl': _.get(opts, 'callbackUrl'),\n    'CallbackEvents': _.get(opts, 'callbackEvents'),\n    'StyleSheet': serialize.object(_.get(opts, 'styleSheet')),\n    'Defaults': serialize.object(_.get(opts, 'defaults'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new AssistantInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a AssistantInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n/* jshint ignore:end */\nAssistantContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(AssistantContext.prototype,\n  'fieldTypes', {\n  get: function() {\n    if (!this._fieldTypes) {\n      this._fieldTypes = new FieldTypeList(this._version, this._solution.sid);\n    }\n    return this._fieldTypes;\n  }\n});\n\nObject.defineProperty(AssistantContext.prototype,\n  'tasks', {\n  get: function() {\n    if (!this._tasks) {\n      this._tasks = new TaskList(this._version, this._solution.sid);\n    }\n    return this._tasks;\n  }\n});\n\nObject.defineProperty(AssistantContext.prototype,\n  'modelBuilds', {\n  get: function() {\n    if (!this._modelBuilds) {\n      this._modelBuilds = new ModelBuildList(this._version, this._solution.sid);\n    }\n    return this._modelBuilds;\n  }\n});\n\nObject.defineProperty(AssistantContext.prototype,\n  'queries', {\n  get: function() {\n    if (!this._queries) {\n      this._queries = new QueryList(this._version, this._solution.sid);\n    }\n    return this._queries;\n  }\n});\n\nObject.defineProperty(AssistantContext.prototype,\n  'styleSheet', {\n  get: function() {\n    if (!this._styleSheet) {\n      this._styleSheet = new StyleSheetList(this._version, this._solution.sid);\n    }\n    return this._styleSheet;\n  }\n});\n\nObject.defineProperty(AssistantContext.prototype,\n  'defaults', {\n  get: function() {\n    if (!this._defaults) {\n      this._defaults = new DefaultsList(this._version, this._solution.sid);\n    }\n    return this._defaults;\n  }\n});\n\nObject.defineProperty(AssistantContext.prototype,\n  'dialogues', {\n  get: function() {\n    if (!this._dialogues) {\n      this._dialogues = new DialogueList(this._version, this._solution.sid);\n    }\n    return this._dialogues;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAssistantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAssistantContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AssistantList: AssistantList,\n  AssistantPage: AssistantPage,\n  AssistantInstance: AssistantInstance,\n  AssistantContext: AssistantContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}