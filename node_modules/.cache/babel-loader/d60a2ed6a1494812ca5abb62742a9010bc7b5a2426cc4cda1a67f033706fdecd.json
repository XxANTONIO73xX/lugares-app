{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar BindingList = require('./service/binding').BindingList;\nvar ChannelList = require('./service/channel').ChannelList;\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar RoleList = require('./service/role').RoleList;\nvar UserList = require('./service/user').UserList;\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar ServiceList;\nvar ServicePage;\nvar ServiceInstance;\nvar ServiceContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceList\n *\n * @constructor Twilio.IpMessaging.V2.ServiceList\n *\n * @param {Twilio.IpMessaging.V2} version - Version of the resource\n */\n/* jshint ignore:end */\nServiceList = function ServiceList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function services\n   * @memberof Twilio.IpMessaging.V2#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.IpMessaging.V2.ServiceContext}\n   */\n  /* jshint ignore:end */\n  function ServiceListInstance(sid) {\n    return ServiceListInstance.get(sid);\n  }\n  ServiceListInstance._version = version;\n  // Path Solution\n  ServiceListInstance._solution = {};\n  ServiceListInstance._uri = _.template('/Services' // jshint ignore:line\n  )(ServiceListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a ServiceInstance\n   *\n   * @function create\n   * @memberof Twilio.IpMessaging.V2.ServiceList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the resource\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ServiceInstance\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ServiceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.IpMessaging.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ServiceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.IpMessaging.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.IpMessaging.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.IpMessaging.V2.ServiceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a service\n   *\n   * @function get\n   * @memberof Twilio.IpMessaging.V2.ServiceList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.IpMessaging.V2.ServiceContext}\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.get = function get(sid) {\n    return new ServiceContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.IpMessaging.V2.ServiceList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  ServiceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return ServiceListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ServicePage\n *\n * @constructor Twilio.IpMessaging.V2.ServicePage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ServiceSolution} solution - Path solution\n *\n * @returns ServicePage\n */\n/* jshint ignore:end */\nServicePage = function ServicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(ServicePage.prototype, Page.prototype);\nServicePage.prototype.constructor = ServicePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ServiceInstance\n *\n * @function getInstance\n * @memberof Twilio.IpMessaging.V2.ServicePage#\n *\n * @param {ServicePayload} payload - Payload response from the API\n *\n * @returns ServiceInstance\n */\n/* jshint ignore:end */\nServicePage.prototype.getInstance = function getInstance(payload) {\n  return new ServiceInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServicePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nServicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.IpMessaging.V2.ServiceInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} defaultServiceRoleSid -\n *          The service role assigned to users when they are added to the service\n * @property {string} defaultChannelRoleSid -\n *          The channel role assigned to users when they are added to a channel\n * @property {string} defaultChannelCreatorRoleSid -\n *          The channel role assigned to a channel creator when they join a new channel\n * @property {boolean} readStatusEnabled -\n *          Whether the Message Consumption Horizon feature is enabled\n * @property {boolean} reachabilityEnabled -\n *          Whether the Reachability Indicator feature is enabled for this Service instance\n * @property {number} typingIndicatorTimeout -\n *          How long in seconds to wait before assuming the user is no longer typing\n * @property {number} consumptionReportInterval - DEPRECATED\n * @property {string} limits -\n *          An object that describes the limits of the service instance\n * @property {string} preWebhookUrl - The webhook URL for pre-event webhooks\n * @property {string} postWebhookUrl - The URL for post-event webhooks\n * @property {string} webhookMethod -\n *          The HTTP method  to use for both PRE and POST webhooks\n * @property {string} webhookFilters -\n *          The list of WebHook events that are enabled for this Service instance\n * @property {number} preWebhookRetryCount -\n *          Count of times webhook will be retried in case of timeout or 429/503/504 HTTP responses\n * @property {number} postWebhookRetryCount -\n *          The number of times calls to the `post_webhook_url` will be retried\n * @property {string} notifications -\n *          The notification configuration for the Service instance\n * @property {string} media - The properties of the media that the service supports\n * @property {string} url - The absolute URL of the Service resource\n * @property {string} links -\n *          The absolute URLs of the Service's Channels, Roles, and Users\n *\n * @param {V2} version - Version of the resource\n * @param {ServicePayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nServiceInstance = function ServiceInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.defaultServiceRoleSid = payload.default_service_role_sid; // jshint ignore:line\n  this.defaultChannelRoleSid = payload.default_channel_role_sid; // jshint ignore:line\n  this.defaultChannelCreatorRoleSid = payload.default_channel_creator_role_sid; // jshint ignore:line\n  this.readStatusEnabled = payload.read_status_enabled; // jshint ignore:line\n  this.reachabilityEnabled = payload.reachability_enabled; // jshint ignore:line\n  this.typingIndicatorTimeout = deserialize.integer(payload.typing_indicator_timeout); // jshint ignore:line\n  this.consumptionReportInterval = deserialize.integer(payload.consumption_report_interval); // jshint ignore:line\n  this.limits = payload.limits; // jshint ignore:line\n  this.preWebhookUrl = payload.pre_webhook_url; // jshint ignore:line\n  this.postWebhookUrl = payload.post_webhook_url; // jshint ignore:line\n  this.webhookMethod = payload.webhook_method; // jshint ignore:line\n  this.webhookFilters = payload.webhook_filters; // jshint ignore:line\n  this.preWebhookRetryCount = deserialize.integer(payload.pre_webhook_retry_count); // jshint ignore:line\n  this.postWebhookRetryCount = deserialize.integer(payload.post_webhook_retry_count); // jshint ignore:line\n  this.notifications = payload.notifications; // jshint ignore:line\n  this.media = payload.media; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(ServiceInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ServiceContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.IpMessaging.V2.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.IpMessaging.V2.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.IpMessaging.V2.ServiceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.defaultServiceRoleSid] -\n *          The service role assigned to users when they are added to the service\n * @param {string} [opts.defaultChannelRoleSid] -\n *          The channel role assigned to users when they are added to a channel\n * @param {string} [opts.defaultChannelCreatorRoleSid] -\n *          The channel role assigned to a channel creator when they join a new channel\n * @param {boolean} [opts.readStatusEnabled] -\n *          Whether to enable the Message Consumption Horizon feature\n * @param {boolean} [opts.reachabilityEnabled] -\n *          Whether to enable the Reachability Indicator feature for this Service instance\n * @param {number} [opts.typingIndicatorTimeout] -\n *          How long in seconds to wait before assuming the user is no longer typing\n * @param {number} [opts.consumptionReportInterval] - DEPRECATED\n * @param {boolean} [opts.notifications.newMessage.enabled] -\n *          Whether to send a notification when a new message is added to a channel\n * @param {string} [opts.notifications.newMessage.template] -\n *          The template to use to create the notification text displayed when a new message is added to a channel\n * @param {string} [opts.notifications.newMessage.sound] -\n *          The name of the sound to play when a new message is added to a channel\n * @param {boolean} [opts.notifications.newMessage.badgeCountEnabled] -\n *          Whether the new message badge is enabled\n * @param {boolean} [opts.notifications.addedToChannel.enabled] -\n *          Whether to send a notification when a member is added to a channel\n * @param {string} [opts.notifications.addedToChannel.template] -\n *          The template to use to create the notification text displayed when a member is added to a channel\n * @param {string} [opts.notifications.addedToChannel.sound] -\n *          The name of the sound to play when a member is added to a channel\n * @param {boolean} [opts.notifications.removedFromChannel.enabled] -\n *          Whether to send a notification to a user when they are removed from a channel\n * @param {string} [opts.notifications.removedFromChannel.template] -\n *          The template to use to create the notification text displayed to a user when they are removed\n * @param {string} [opts.notifications.removedFromChannel.sound] -\n *          The name of the sound to play to a user when they are removed from a channel\n * @param {boolean} [opts.notifications.invitedToChannel.enabled] -\n *          Whether to send a notification when a user is invited to a channel\n * @param {string} [opts.notifications.invitedToChannel.template] -\n *          The template to use to create the notification text displayed when a user is invited to a channel\n * @param {string} [opts.notifications.invitedToChannel.sound] -\n *          The name of the sound to play when a user is invited to a channel\n * @param {string} [opts.preWebhookUrl] - The webhook URL for pre-event webhooks\n * @param {string} [opts.postWebhookUrl] - The URL for post-event webhooks\n * @param {string} [opts.webhookMethod] -\n *          The HTTP method  to use for both PRE and POST webhooks\n * @param {string|list} [opts.webhookFilters] -\n *          The list of WebHook events that are enabled for this Service instance\n * @param {number} [opts.limits.channelMembers] -\n *          The maximum number of Members that can be added to Channels within this Service\n * @param {number} [opts.limits.userChannels] -\n *          The maximum number of Channels Users can be a Member of within this Service\n * @param {string} [opts.media.compatibilityMessage] -\n *          The message to send when a media message has no text\n * @param {number} [opts.preWebhookRetryCount] -\n *          Count of times webhook will be retried in case of timeout or 429/503/504 HTTP responses\n * @param {number} [opts.postWebhookRetryCount] -\n *          The number of times calls to the `post_webhook_url` will be retried\n * @param {boolean} [opts.notifications.logEnabled] - Whether to log notifications\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the channels\n *\n * @function channels\n * @memberof Twilio.IpMessaging.V2.ServiceInstance#\n *\n * @returns {Twilio.IpMessaging.V2.ServiceContext.ChannelList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.channels = function channels() {\n  return this._proxy.channels;\n};\n\n/* jshint ignore:start */\n/**\n * Access the roles\n *\n * @function roles\n * @memberof Twilio.IpMessaging.V2.ServiceInstance#\n *\n * @returns {Twilio.IpMessaging.V2.ServiceContext.RoleList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.roles = function roles() {\n  return this._proxy.roles;\n};\n\n/* jshint ignore:start */\n/**\n * Access the users\n *\n * @function users\n * @memberof Twilio.IpMessaging.V2.ServiceInstance#\n *\n * @returns {Twilio.IpMessaging.V2.ServiceContext.UserList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.users = function users() {\n  return this._proxy.users;\n};\n\n/* jshint ignore:start */\n/**\n * Access the bindings\n *\n * @function bindings\n * @memberof Twilio.IpMessaging.V2.ServiceInstance#\n *\n * @returns {Twilio.IpMessaging.V2.ServiceContext.BindingList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.bindings = function bindings() {\n  return this._proxy.bindings;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServiceInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nServiceInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext\n *\n * @property {Twilio.IpMessaging.V2.ServiceContext.ChannelList} channels -\n *          channels resource\n * @property {Twilio.IpMessaging.V2.ServiceContext.RoleList} roles - roles resource\n * @property {Twilio.IpMessaging.V2.ServiceContext.UserList} users - users resource\n * @property {Twilio.IpMessaging.V2.ServiceContext.BindingList} bindings -\n *          bindings resource\n *\n * @param {V2} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nServiceContext = function ServiceContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = _.template('/Services/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._channels = undefined;\n  this._roles = undefined;\n  this._users = undefined;\n  this._bindings = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.IpMessaging.V2.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.IpMessaging.V2.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.IpMessaging.V2.ServiceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.defaultServiceRoleSid] -\n *          The service role assigned to users when they are added to the service\n * @param {string} [opts.defaultChannelRoleSid] -\n *          The channel role assigned to users when they are added to a channel\n * @param {string} [opts.defaultChannelCreatorRoleSid] -\n *          The channel role assigned to a channel creator when they join a new channel\n * @param {boolean} [opts.readStatusEnabled] -\n *          Whether to enable the Message Consumption Horizon feature\n * @param {boolean} [opts.reachabilityEnabled] -\n *          Whether to enable the Reachability Indicator feature for this Service instance\n * @param {number} [opts.typingIndicatorTimeout] -\n *          How long in seconds to wait before assuming the user is no longer typing\n * @param {number} [opts.consumptionReportInterval] - DEPRECATED\n * @param {boolean} [opts.notifications.newMessage.enabled] -\n *          Whether to send a notification when a new message is added to a channel\n * @param {string} [opts.notifications.newMessage.template] -\n *          The template to use to create the notification text displayed when a new message is added to a channel\n * @param {string} [opts.notifications.newMessage.sound] -\n *          The name of the sound to play when a new message is added to a channel\n * @param {boolean} [opts.notifications.newMessage.badgeCountEnabled] -\n *          Whether the new message badge is enabled\n * @param {boolean} [opts.notifications.addedToChannel.enabled] -\n *          Whether to send a notification when a member is added to a channel\n * @param {string} [opts.notifications.addedToChannel.template] -\n *          The template to use to create the notification text displayed when a member is added to a channel\n * @param {string} [opts.notifications.addedToChannel.sound] -\n *          The name of the sound to play when a member is added to a channel\n * @param {boolean} [opts.notifications.removedFromChannel.enabled] -\n *          Whether to send a notification to a user when they are removed from a channel\n * @param {string} [opts.notifications.removedFromChannel.template] -\n *          The template to use to create the notification text displayed to a user when they are removed\n * @param {string} [opts.notifications.removedFromChannel.sound] -\n *          The name of the sound to play to a user when they are removed from a channel\n * @param {boolean} [opts.notifications.invitedToChannel.enabled] -\n *          Whether to send a notification when a user is invited to a channel\n * @param {string} [opts.notifications.invitedToChannel.template] -\n *          The template to use to create the notification text displayed when a user is invited to a channel\n * @param {string} [opts.notifications.invitedToChannel.sound] -\n *          The name of the sound to play when a user is invited to a channel\n * @param {string} [opts.preWebhookUrl] - The webhook URL for pre-event webhooks\n * @param {string} [opts.postWebhookUrl] - The URL for post-event webhooks\n * @param {string} [opts.webhookMethod] -\n *          The HTTP method  to use for both PRE and POST webhooks\n * @param {string|list} [opts.webhookFilters] -\n *          The list of WebHook events that are enabled for this Service instance\n * @param {number} [opts.limits.channelMembers] -\n *          The maximum number of Members that can be added to Channels within this Service\n * @param {number} [opts.limits.userChannels] -\n *          The maximum number of Channels Users can be a Member of within this Service\n * @param {string} [opts.media.compatibilityMessage] -\n *          The message to send when a media message has no text\n * @param {number} [opts.preWebhookRetryCount] -\n *          Count of times webhook will be retried in case of timeout or 429/503/504 HTTP responses\n * @param {number} [opts.postWebhookRetryCount] -\n *          The number of times calls to the `post_webhook_url` will be retried\n * @param {boolean} [opts.notifications.logEnabled] - Whether to log notifications\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'DefaultServiceRoleSid': _.get(opts, 'defaultServiceRoleSid'),\n    'DefaultChannelRoleSid': _.get(opts, 'defaultChannelRoleSid'),\n    'DefaultChannelCreatorRoleSid': _.get(opts, 'defaultChannelCreatorRoleSid'),\n    'ReadStatusEnabled': serialize.bool(_.get(opts, 'readStatusEnabled')),\n    'ReachabilityEnabled': serialize.bool(_.get(opts, 'reachabilityEnabled')),\n    'TypingIndicatorTimeout': _.get(opts, 'typingIndicatorTimeout'),\n    'ConsumptionReportInterval': _.get(opts, 'consumptionReportInterval'),\n    'Notifications.NewMessage.Enabled': serialize.bool(_.get(opts, 'notifications.newMessage.enabled')),\n    'Notifications.NewMessage.Template': _.get(opts, 'notifications.newMessage.template'),\n    'Notifications.NewMessage.Sound': _.get(opts, 'notifications.newMessage.sound'),\n    'Notifications.NewMessage.BadgeCountEnabled': serialize.bool(_.get(opts, 'notifications.newMessage.badgeCountEnabled')),\n    'Notifications.AddedToChannel.Enabled': serialize.bool(_.get(opts, 'notifications.addedToChannel.enabled')),\n    'Notifications.AddedToChannel.Template': _.get(opts, 'notifications.addedToChannel.template'),\n    'Notifications.AddedToChannel.Sound': _.get(opts, 'notifications.addedToChannel.sound'),\n    'Notifications.RemovedFromChannel.Enabled': serialize.bool(_.get(opts, 'notifications.removedFromChannel.enabled')),\n    'Notifications.RemovedFromChannel.Template': _.get(opts, 'notifications.removedFromChannel.template'),\n    'Notifications.RemovedFromChannel.Sound': _.get(opts, 'notifications.removedFromChannel.sound'),\n    'Notifications.InvitedToChannel.Enabled': serialize.bool(_.get(opts, 'notifications.invitedToChannel.enabled')),\n    'Notifications.InvitedToChannel.Template': _.get(opts, 'notifications.invitedToChannel.template'),\n    'Notifications.InvitedToChannel.Sound': _.get(opts, 'notifications.invitedToChannel.sound'),\n    'PreWebhookUrl': _.get(opts, 'preWebhookUrl'),\n    'PostWebhookUrl': _.get(opts, 'postWebhookUrl'),\n    'WebhookMethod': _.get(opts, 'webhookMethod'),\n    'WebhookFilters': serialize.map(_.get(opts, 'webhookFilters'), function (e) {\n      return e;\n    }),\n    'Limits.ChannelMembers': _.get(opts, 'limits.channelMembers'),\n    'Limits.UserChannels': _.get(opts, 'limits.userChannels'),\n    'Media.CompatibilityMessage': _.get(opts, 'media.compatibilityMessage'),\n    'PreWebhookRetryCount': _.get(opts, 'preWebhookRetryCount'),\n    'PostWebhookRetryCount': _.get(opts, 'postWebhookRetryCount'),\n    'Notifications.LogEnabled': serialize.bool(_.get(opts, 'notifications.logEnabled'))\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(ServiceContext.prototype, 'channels', {\n  get: function () {\n    if (!this._channels) {\n      this._channels = new ChannelList(this._version, this._solution.sid);\n    }\n    return this._channels;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'roles', {\n  get: function () {\n    if (!this._roles) {\n      this._roles = new RoleList(this._version, this._solution.sid);\n    }\n    return this._roles;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'users', {\n  get: function () {\n    if (!this._users) {\n      this._users = new UserList(this._version, this._solution.sid);\n    }\n    return this._users;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'bindings', {\n  get: function () {\n    if (!this._bindings) {\n      this._bindings = new BindingList(this._version, this._solution.sid);\n    }\n    return this._bindings;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServiceContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nServiceContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  ServiceList: ServiceList,\n  ServicePage: ServicePage,\n  ServiceInstance: ServiceInstance,\n  ServiceContext: ServiceContext\n};","map":{"version":3,"names":["Q","require","_","util","BindingList","ChannelList","Page","RoleList","UserList","deserialize","serialize","values","ServiceList","ServicePage","ServiceInstance","ServiceContext","version","ServiceListInstance","sid","get","_version","_solution","_uri","template","create","opts","callback","isUndefined","Error","friendlyName","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","pageLimit","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","friendly_name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","defaultServiceRoleSid","default_service_role_sid","defaultChannelRoleSid","default_channel_role_sid","defaultChannelCreatorRoleSid","default_channel_creator_role_sid","readStatusEnabled","read_status_enabled","reachabilityEnabled","reachability_enabled","typingIndicatorTimeout","integer","typing_indicator_timeout","consumptionReportInterval","consumption_report_interval","preWebhookUrl","pre_webhook_url","postWebhookUrl","post_webhook_url","webhookMethod","webhook_method","webhookFilters","webhook_filters","preWebhookRetryCount","pre_webhook_retry_count","postWebhookRetryCount","post_webhook_retry_count","notifications","media","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","channels","roles","users","bindings","_channels","_roles","_users","_bindings","bool","map","e","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/ipMessaging/v2/service.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar BindingList = require('./service/binding').BindingList;\nvar ChannelList = require('./service/channel').ChannelList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar RoleList = require('./service/role').RoleList;\nvar UserList = require('./service/user').UserList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar ServiceList;\nvar ServicePage;\nvar ServiceInstance;\nvar ServiceContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceList\n *\n * @constructor Twilio.IpMessaging.V2.ServiceList\n *\n * @param {Twilio.IpMessaging.V2} version - Version of the resource\n */\n/* jshint ignore:end */\nServiceList = function ServiceList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function services\n   * @memberof Twilio.IpMessaging.V2#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.IpMessaging.V2.ServiceContext}\n   */\n  /* jshint ignore:end */\n  function ServiceListInstance(sid) {\n    return ServiceListInstance.get(sid);\n  }\n\n  ServiceListInstance._version = version;\n  // Path Solution\n  ServiceListInstance._solution = {};\n  ServiceListInstance._uri = _.template(\n    '/Services' // jshint ignore:line\n  )(ServiceListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a ServiceInstance\n   *\n   * @function create\n   * @memberof Twilio.IpMessaging.V2.ServiceList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the resource\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ServiceInstance\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({'FriendlyName': _.get(opts, 'friendlyName')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ServiceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.IpMessaging.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ServiceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.IpMessaging.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.IpMessaging.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.IpMessaging.V2.ServiceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a service\n   *\n   * @function get\n   * @memberof Twilio.IpMessaging.V2.ServiceList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.IpMessaging.V2.ServiceContext}\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.get = function get(sid) {\n    return new ServiceContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.IpMessaging.V2.ServiceList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ServiceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ServiceListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServicePage\n *\n * @constructor Twilio.IpMessaging.V2.ServicePage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ServiceSolution} solution - Path solution\n *\n * @returns ServicePage\n */\n/* jshint ignore:end */\nServicePage = function ServicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ServicePage.prototype, Page.prototype);\nServicePage.prototype.constructor = ServicePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ServiceInstance\n *\n * @function getInstance\n * @memberof Twilio.IpMessaging.V2.ServicePage#\n *\n * @param {ServicePayload} payload - Payload response from the API\n *\n * @returns ServiceInstance\n */\n/* jshint ignore:end */\nServicePage.prototype.getInstance = function getInstance(payload) {\n  return new ServiceInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServicePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nServicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.IpMessaging.V2.ServiceInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} defaultServiceRoleSid -\n *          The service role assigned to users when they are added to the service\n * @property {string} defaultChannelRoleSid -\n *          The channel role assigned to users when they are added to a channel\n * @property {string} defaultChannelCreatorRoleSid -\n *          The channel role assigned to a channel creator when they join a new channel\n * @property {boolean} readStatusEnabled -\n *          Whether the Message Consumption Horizon feature is enabled\n * @property {boolean} reachabilityEnabled -\n *          Whether the Reachability Indicator feature is enabled for this Service instance\n * @property {number} typingIndicatorTimeout -\n *          How long in seconds to wait before assuming the user is no longer typing\n * @property {number} consumptionReportInterval - DEPRECATED\n * @property {string} limits -\n *          An object that describes the limits of the service instance\n * @property {string} preWebhookUrl - The webhook URL for pre-event webhooks\n * @property {string} postWebhookUrl - The URL for post-event webhooks\n * @property {string} webhookMethod -\n *          The HTTP method  to use for both PRE and POST webhooks\n * @property {string} webhookFilters -\n *          The list of WebHook events that are enabled for this Service instance\n * @property {number} preWebhookRetryCount -\n *          Count of times webhook will be retried in case of timeout or 429/503/504 HTTP responses\n * @property {number} postWebhookRetryCount -\n *          The number of times calls to the `post_webhook_url` will be retried\n * @property {string} notifications -\n *          The notification configuration for the Service instance\n * @property {string} media - The properties of the media that the service supports\n * @property {string} url - The absolute URL of the Service resource\n * @property {string} links -\n *          The absolute URLs of the Service's Channels, Roles, and Users\n *\n * @param {V2} version - Version of the resource\n * @param {ServicePayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nServiceInstance = function ServiceInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.defaultServiceRoleSid = payload.default_service_role_sid; // jshint ignore:line\n  this.defaultChannelRoleSid = payload.default_channel_role_sid; // jshint ignore:line\n  this.defaultChannelCreatorRoleSid = payload.default_channel_creator_role_sid; // jshint ignore:line\n  this.readStatusEnabled = payload.read_status_enabled; // jshint ignore:line\n  this.reachabilityEnabled = payload.reachability_enabled; // jshint ignore:line\n  this.typingIndicatorTimeout = deserialize.integer(payload.typing_indicator_timeout); // jshint ignore:line\n  this.consumptionReportInterval = deserialize.integer(payload.consumption_report_interval); // jshint ignore:line\n  this.limits = payload.limits; // jshint ignore:line\n  this.preWebhookUrl = payload.pre_webhook_url; // jshint ignore:line\n  this.postWebhookUrl = payload.post_webhook_url; // jshint ignore:line\n  this.webhookMethod = payload.webhook_method; // jshint ignore:line\n  this.webhookFilters = payload.webhook_filters; // jshint ignore:line\n  this.preWebhookRetryCount = deserialize.integer(payload.pre_webhook_retry_count); // jshint ignore:line\n  this.postWebhookRetryCount = deserialize.integer(payload.post_webhook_retry_count); // jshint ignore:line\n  this.notifications = payload.notifications; // jshint ignore:line\n  this.media = payload.media; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(ServiceInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new ServiceContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.IpMessaging.V2.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.IpMessaging.V2.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.IpMessaging.V2.ServiceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.defaultServiceRoleSid] -\n *          The service role assigned to users when they are added to the service\n * @param {string} [opts.defaultChannelRoleSid] -\n *          The channel role assigned to users when they are added to a channel\n * @param {string} [opts.defaultChannelCreatorRoleSid] -\n *          The channel role assigned to a channel creator when they join a new channel\n * @param {boolean} [opts.readStatusEnabled] -\n *          Whether to enable the Message Consumption Horizon feature\n * @param {boolean} [opts.reachabilityEnabled] -\n *          Whether to enable the Reachability Indicator feature for this Service instance\n * @param {number} [opts.typingIndicatorTimeout] -\n *          How long in seconds to wait before assuming the user is no longer typing\n * @param {number} [opts.consumptionReportInterval] - DEPRECATED\n * @param {boolean} [opts.notifications.newMessage.enabled] -\n *          Whether to send a notification when a new message is added to a channel\n * @param {string} [opts.notifications.newMessage.template] -\n *          The template to use to create the notification text displayed when a new message is added to a channel\n * @param {string} [opts.notifications.newMessage.sound] -\n *          The name of the sound to play when a new message is added to a channel\n * @param {boolean} [opts.notifications.newMessage.badgeCountEnabled] -\n *          Whether the new message badge is enabled\n * @param {boolean} [opts.notifications.addedToChannel.enabled] -\n *          Whether to send a notification when a member is added to a channel\n * @param {string} [opts.notifications.addedToChannel.template] -\n *          The template to use to create the notification text displayed when a member is added to a channel\n * @param {string} [opts.notifications.addedToChannel.sound] -\n *          The name of the sound to play when a member is added to a channel\n * @param {boolean} [opts.notifications.removedFromChannel.enabled] -\n *          Whether to send a notification to a user when they are removed from a channel\n * @param {string} [opts.notifications.removedFromChannel.template] -\n *          The template to use to create the notification text displayed to a user when they are removed\n * @param {string} [opts.notifications.removedFromChannel.sound] -\n *          The name of the sound to play to a user when they are removed from a channel\n * @param {boolean} [opts.notifications.invitedToChannel.enabled] -\n *          Whether to send a notification when a user is invited to a channel\n * @param {string} [opts.notifications.invitedToChannel.template] -\n *          The template to use to create the notification text displayed when a user is invited to a channel\n * @param {string} [opts.notifications.invitedToChannel.sound] -\n *          The name of the sound to play when a user is invited to a channel\n * @param {string} [opts.preWebhookUrl] - The webhook URL for pre-event webhooks\n * @param {string} [opts.postWebhookUrl] - The URL for post-event webhooks\n * @param {string} [opts.webhookMethod] -\n *          The HTTP method  to use for both PRE and POST webhooks\n * @param {string|list} [opts.webhookFilters] -\n *          The list of WebHook events that are enabled for this Service instance\n * @param {number} [opts.limits.channelMembers] -\n *          The maximum number of Members that can be added to Channels within this Service\n * @param {number} [opts.limits.userChannels] -\n *          The maximum number of Channels Users can be a Member of within this Service\n * @param {string} [opts.media.compatibilityMessage] -\n *          The message to send when a media message has no text\n * @param {number} [opts.preWebhookRetryCount] -\n *          Count of times webhook will be retried in case of timeout or 429/503/504 HTTP responses\n * @param {number} [opts.postWebhookRetryCount] -\n *          The number of times calls to the `post_webhook_url` will be retried\n * @param {boolean} [opts.notifications.logEnabled] - Whether to log notifications\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the channels\n *\n * @function channels\n * @memberof Twilio.IpMessaging.V2.ServiceInstance#\n *\n * @returns {Twilio.IpMessaging.V2.ServiceContext.ChannelList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.channels = function channels() {\n  return this._proxy.channels;\n};\n\n/* jshint ignore:start */\n/**\n * Access the roles\n *\n * @function roles\n * @memberof Twilio.IpMessaging.V2.ServiceInstance#\n *\n * @returns {Twilio.IpMessaging.V2.ServiceContext.RoleList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.roles = function roles() {\n  return this._proxy.roles;\n};\n\n/* jshint ignore:start */\n/**\n * Access the users\n *\n * @function users\n * @memberof Twilio.IpMessaging.V2.ServiceInstance#\n *\n * @returns {Twilio.IpMessaging.V2.ServiceContext.UserList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.users = function users() {\n  return this._proxy.users;\n};\n\n/* jshint ignore:start */\n/**\n * Access the bindings\n *\n * @function bindings\n * @memberof Twilio.IpMessaging.V2.ServiceInstance#\n *\n * @returns {Twilio.IpMessaging.V2.ServiceContext.BindingList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.bindings = function bindings() {\n  return this._proxy.bindings;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServiceInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nServiceInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext\n *\n * @property {Twilio.IpMessaging.V2.ServiceContext.ChannelList} channels -\n *          channels resource\n * @property {Twilio.IpMessaging.V2.ServiceContext.RoleList} roles - roles resource\n * @property {Twilio.IpMessaging.V2.ServiceContext.UserList} users - users resource\n * @property {Twilio.IpMessaging.V2.ServiceContext.BindingList} bindings -\n *          bindings resource\n *\n * @param {V2} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nServiceContext = function ServiceContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = _.template(\n    '/Services/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._channels = undefined;\n  this._roles = undefined;\n  this._users = undefined;\n  this._bindings = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.IpMessaging.V2.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.IpMessaging.V2.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.IpMessaging.V2.ServiceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.defaultServiceRoleSid] -\n *          The service role assigned to users when they are added to the service\n * @param {string} [opts.defaultChannelRoleSid] -\n *          The channel role assigned to users when they are added to a channel\n * @param {string} [opts.defaultChannelCreatorRoleSid] -\n *          The channel role assigned to a channel creator when they join a new channel\n * @param {boolean} [opts.readStatusEnabled] -\n *          Whether to enable the Message Consumption Horizon feature\n * @param {boolean} [opts.reachabilityEnabled] -\n *          Whether to enable the Reachability Indicator feature for this Service instance\n * @param {number} [opts.typingIndicatorTimeout] -\n *          How long in seconds to wait before assuming the user is no longer typing\n * @param {number} [opts.consumptionReportInterval] - DEPRECATED\n * @param {boolean} [opts.notifications.newMessage.enabled] -\n *          Whether to send a notification when a new message is added to a channel\n * @param {string} [opts.notifications.newMessage.template] -\n *          The template to use to create the notification text displayed when a new message is added to a channel\n * @param {string} [opts.notifications.newMessage.sound] -\n *          The name of the sound to play when a new message is added to a channel\n * @param {boolean} [opts.notifications.newMessage.badgeCountEnabled] -\n *          Whether the new message badge is enabled\n * @param {boolean} [opts.notifications.addedToChannel.enabled] -\n *          Whether to send a notification when a member is added to a channel\n * @param {string} [opts.notifications.addedToChannel.template] -\n *          The template to use to create the notification text displayed when a member is added to a channel\n * @param {string} [opts.notifications.addedToChannel.sound] -\n *          The name of the sound to play when a member is added to a channel\n * @param {boolean} [opts.notifications.removedFromChannel.enabled] -\n *          Whether to send a notification to a user when they are removed from a channel\n * @param {string} [opts.notifications.removedFromChannel.template] -\n *          The template to use to create the notification text displayed to a user when they are removed\n * @param {string} [opts.notifications.removedFromChannel.sound] -\n *          The name of the sound to play to a user when they are removed from a channel\n * @param {boolean} [opts.notifications.invitedToChannel.enabled] -\n *          Whether to send a notification when a user is invited to a channel\n * @param {string} [opts.notifications.invitedToChannel.template] -\n *          The template to use to create the notification text displayed when a user is invited to a channel\n * @param {string} [opts.notifications.invitedToChannel.sound] -\n *          The name of the sound to play when a user is invited to a channel\n * @param {string} [opts.preWebhookUrl] - The webhook URL for pre-event webhooks\n * @param {string} [opts.postWebhookUrl] - The URL for post-event webhooks\n * @param {string} [opts.webhookMethod] -\n *          The HTTP method  to use for both PRE and POST webhooks\n * @param {string|list} [opts.webhookFilters] -\n *          The list of WebHook events that are enabled for this Service instance\n * @param {number} [opts.limits.channelMembers] -\n *          The maximum number of Members that can be added to Channels within this Service\n * @param {number} [opts.limits.userChannels] -\n *          The maximum number of Channels Users can be a Member of within this Service\n * @param {string} [opts.media.compatibilityMessage] -\n *          The message to send when a media message has no text\n * @param {number} [opts.preWebhookRetryCount] -\n *          Count of times webhook will be retried in case of timeout or 429/503/504 HTTP responses\n * @param {number} [opts.postWebhookRetryCount] -\n *          The number of times calls to the `post_webhook_url` will be retried\n * @param {boolean} [opts.notifications.logEnabled] - Whether to log notifications\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'DefaultServiceRoleSid': _.get(opts, 'defaultServiceRoleSid'),\n    'DefaultChannelRoleSid': _.get(opts, 'defaultChannelRoleSid'),\n    'DefaultChannelCreatorRoleSid': _.get(opts, 'defaultChannelCreatorRoleSid'),\n    'ReadStatusEnabled': serialize.bool(_.get(opts, 'readStatusEnabled')),\n    'ReachabilityEnabled': serialize.bool(_.get(opts, 'reachabilityEnabled')),\n    'TypingIndicatorTimeout': _.get(opts, 'typingIndicatorTimeout'),\n    'ConsumptionReportInterval': _.get(opts, 'consumptionReportInterval'),\n    'Notifications.NewMessage.Enabled': serialize.bool(_.get(opts, 'notifications.newMessage.enabled')),\n    'Notifications.NewMessage.Template': _.get(opts, 'notifications.newMessage.template'),\n    'Notifications.NewMessage.Sound': _.get(opts, 'notifications.newMessage.sound'),\n    'Notifications.NewMessage.BadgeCountEnabled': serialize.bool(_.get(opts, 'notifications.newMessage.badgeCountEnabled')),\n    'Notifications.AddedToChannel.Enabled': serialize.bool(_.get(opts, 'notifications.addedToChannel.enabled')),\n    'Notifications.AddedToChannel.Template': _.get(opts, 'notifications.addedToChannel.template'),\n    'Notifications.AddedToChannel.Sound': _.get(opts, 'notifications.addedToChannel.sound'),\n    'Notifications.RemovedFromChannel.Enabled': serialize.bool(_.get(opts, 'notifications.removedFromChannel.enabled')),\n    'Notifications.RemovedFromChannel.Template': _.get(opts, 'notifications.removedFromChannel.template'),\n    'Notifications.RemovedFromChannel.Sound': _.get(opts, 'notifications.removedFromChannel.sound'),\n    'Notifications.InvitedToChannel.Enabled': serialize.bool(_.get(opts, 'notifications.invitedToChannel.enabled')),\n    'Notifications.InvitedToChannel.Template': _.get(opts, 'notifications.invitedToChannel.template'),\n    'Notifications.InvitedToChannel.Sound': _.get(opts, 'notifications.invitedToChannel.sound'),\n    'PreWebhookUrl': _.get(opts, 'preWebhookUrl'),\n    'PostWebhookUrl': _.get(opts, 'postWebhookUrl'),\n    'WebhookMethod': _.get(opts, 'webhookMethod'),\n    'WebhookFilters': serialize.map(_.get(opts, 'webhookFilters'), function(e) { return e; }),\n    'Limits.ChannelMembers': _.get(opts, 'limits.channelMembers'),\n    'Limits.UserChannels': _.get(opts, 'limits.userChannels'),\n    'Media.CompatibilityMessage': _.get(opts, 'media.compatibilityMessage'),\n    'PreWebhookRetryCount': _.get(opts, 'preWebhookRetryCount'),\n    'PostWebhookRetryCount': _.get(opts, 'postWebhookRetryCount'),\n    'Notifications.LogEnabled': serialize.bool(_.get(opts, 'notifications.logEnabled'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ServiceContext.prototype,\n  'channels', {\n  get: function() {\n    if (!this._channels) {\n      this._channels = new ChannelList(this._version, this._solution.sid);\n    }\n    return this._channels;\n  }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'roles', {\n  get: function() {\n    if (!this._roles) {\n      this._roles = new RoleList(this._version, this._solution.sid);\n    }\n    return this._roles;\n  }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'users', {\n  get: function() {\n    if (!this._users) {\n      this._users = new UserList(this._version, this._solution.sid);\n    }\n    return this._users;\n  }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'bindings', {\n  get: function() {\n    if (!this._bindings) {\n      this._bindings = new BindingList(this._version, this._solution.sid);\n    }\n    return this._bindings;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServiceContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nServiceContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ServiceList: ServiceList,\n  ServicePage: ServicePage,\n  ServiceInstance: ServiceInstance,\n  ServiceContext: ServiceContext\n};\n"],"mappings":"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CH,GAAG,EAAEA,GAAG,IAAI,IAAI,CAACA;EAAK,CAAC;AAC3C,CAAC;AAEDoH,MAAM,CAACC,cAAc,CAACzH,eAAe,CAACqE,SAAS,EAC7C,QAAQ,EAAE;EACVhE,GAAG,EAAE,SAAAA,CAAA,EAAW;IACd,IAAI,CAAC,IAAI,CAACiH,QAAQ,EAAE;MAClB,IAAI,CAACA,QAAQ,GAAG,IAAIrH,cAAc,CAAC,IAAI,CAACK,QAAQ,EAAE,IAAI,CAACC,SAAS,CAACH,GAAG,CAAC;IACvE;IAEA,OAAO,IAAI,CAACkH,QAAQ;EACtB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtH,eAAe,CAACqE,SAAS,CAACqD,KAAK,GAAG,SAASA,KAAKA,CAAC9G,QAAQ,EAAE;EACzD,OAAO,IAAI,CAAC+G,MAAM,CAACD,KAAK,CAAC9G,QAAQ,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,eAAe,CAACqE,SAAS,CAACuD,MAAM,GAAG,SAASA,MAAMA,CAAChH,QAAQ,EAAE;EAC3D,OAAO,IAAI,CAAC+G,MAAM,CAACC,MAAM,CAAChH,QAAQ,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,eAAe,CAACqE,SAAS,CAACwD,MAAM,GAAG,SAASA,MAAMA,CAAClH,IAAI,EAAEC,QAAQ,EAAE;EACjE,OAAO,IAAI,CAAC+G,MAAM,CAACE,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"},"metadata":{},"sourceType":"script","externalDependencies":[]}