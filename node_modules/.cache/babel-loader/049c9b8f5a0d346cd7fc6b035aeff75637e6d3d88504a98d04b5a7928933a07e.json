{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar ReservationList = require('./worker/reservation').ReservationList;\nvar WorkerChannelList = require('./worker/workerChannel').WorkerChannelList;\nvar WorkerStatisticsList = require('./worker/workerStatistics').WorkerStatisticsList;\nvar WorkersCumulativeStatisticsList = require('./worker/workersCumulativeStatistics').WorkersCumulativeStatisticsList;\nvar WorkersRealTimeStatisticsList = require('./worker/workersRealTimeStatistics').WorkersRealTimeStatisticsList;\nvar WorkersStatisticsList = require('./worker/workersStatistics').WorkersStatisticsList;\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar WorkerList;\nvar WorkerPage;\nvar WorkerInstance;\nvar WorkerContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The ID of the Workflow this worker is associated with\n */\n/* jshint ignore:end */\nWorkerList = function WorkerList(version, workspaceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function workers\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext}\n   */\n  /* jshint ignore:end */\n  function WorkerListInstance(sid) {\n    return WorkerListInstance.get(sid);\n  }\n  WorkerListInstance._version = version;\n  // Path Solution\n  WorkerListInstance._solution = {\n    workspaceSid: workspaceSid\n  };\n  WorkerListInstance._uri = _.template('/Workspaces/<%= workspaceSid %>/Workers' // jshint ignore:line\n  )(WorkerListInstance._solution);\n\n  // Components\n  WorkerListInstance._statistics = undefined;\n\n  /* jshint ignore:start */\n  /**\n   * Streams WorkerInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.activityName] -\n   *          Filter by workers that are in a particular Activity by Friendly Name\n   * @param {string} [opts.activitySid] -\n   *          Filter by workers that are in a particular Activity by SID\n   * @param {string} [opts.available] -\n   *          Filter by workers that are available or unavailable.\n   * @param {string} [opts.friendlyName] - Filter by a worker's friendly name\n   * @param {string} [opts.targetWorkersExpression] -\n   *          Filter by workers that would match an expression on a TaskQueue.\n   * @param {string} [opts.taskQueueName] -\n   *          Filter by workers that are eligible for a TaskQueue by Friendly Name\n   * @param {string} [opts.taskQueueSid] -\n   *          Filter by workers that are eligible for a TaskQueue by SID\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists WorkerInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.activityName] -\n   *          Filter by workers that are in a particular Activity by Friendly Name\n   * @param {string} [opts.activitySid] -\n   *          Filter by workers that are in a particular Activity by SID\n   * @param {string} [opts.available] -\n   *          Filter by workers that are available or unavailable.\n   * @param {string} [opts.friendlyName] - Filter by a worker's friendly name\n   * @param {string} [opts.targetWorkersExpression] -\n   *          Filter by workers that would match an expression on a TaskQueue.\n   * @param {string} [opts.taskQueueName] -\n   *          Filter by workers that are eligible for a TaskQueue by Friendly Name\n   * @param {string} [opts.taskQueueSid] -\n   *          Filter by workers that are eligible for a TaskQueue by SID\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of WorkerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.activityName] -\n   *          Filter by workers that are in a particular Activity by Friendly Name\n   * @param {string} [opts.activitySid] -\n   *          Filter by workers that are in a particular Activity by SID\n   * @param {string} [opts.available] -\n   *          Filter by workers that are available or unavailable.\n   * @param {string} [opts.friendlyName] - Filter by a worker's friendly name\n   * @param {string} [opts.targetWorkersExpression] -\n   *          Filter by workers that would match an expression on a TaskQueue.\n   * @param {string} [opts.taskQueueName] -\n   *          Filter by workers that are eligible for a TaskQueue by Friendly Name\n   * @param {string} [opts.taskQueueSid] -\n   *          Filter by workers that are eligible for a TaskQueue by SID\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'ActivityName': _.get(opts, 'activityName'),\n      'ActivitySid': _.get(opts, 'activitySid'),\n      'Available': _.get(opts, 'available'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'TargetWorkersExpression': _.get(opts, 'targetWorkersExpression'),\n      'TaskQueueName': _.get(opts, 'taskQueueName'),\n      'TaskQueueSid': _.get(opts, 'taskQueueSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkerPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of WorkerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkerPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a WorkerInstance\n   *\n   * @function create\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *          String representing user-friendly name for the Worker.\n   * @param {string} [opts.activitySid] -\n   *          A valid Activity describing the worker's initial state.\n   * @param {string} [opts.attributes] - JSON object describing this worker.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed WorkerInstance\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'ActivitySid': _.get(opts, 'activitySid'),\n      'Attributes': _.get(opts, 'attributes')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkerInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a worker\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext}\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.get = function get(sid) {\n    return new WorkerContext(this._version, this._solution.workspaceSid, sid);\n  };\n  Object.defineProperty(WorkerListInstance, 'statistics', {\n    get: function statistics() {\n      if (!this._statistics) {\n        this._statistics = new WorkersStatisticsList(this._version, this._solution.workspaceSid);\n      }\n      return this._statistics;\n    }\n  });\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  WorkerListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return WorkerListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {WorkerSolution} solution - Path solution\n *\n * @returns WorkerPage\n */\n/* jshint ignore:end */\nWorkerPage = function WorkerPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(WorkerPage.prototype, Page.prototype);\nWorkerPage.prototype.constructor = WorkerPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of WorkerInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerPage#\n *\n * @param {WorkerPayload} payload - Payload response from the API\n *\n * @returns WorkerInstance\n */\n/* jshint ignore:end */\nWorkerPage.prototype.getInstance = function getInstance(payload) {\n  return new WorkerInstance(this._version, payload, this._solution.workspaceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWorkerPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nWorkerPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance\n *\n * @property {string} accountSid - The ID of the account that owns this worker\n * @property {string} activityName -\n *          Filter by workers that are in a particular Activity by Friendly Name\n * @property {string} activitySid -\n *          Filter by workers that are in a particular Activity by SID\n * @property {string} attributes - JSON object describing this worker.\n * @property {boolean} available -\n *          Filter by workers that are available or unavailable.\n * @property {Date} dateCreated - DateTime this worker was created\n * @property {Date} dateStatusChanged -\n *          DateTime of the last change to the Worker's activity.\n * @property {Date} dateUpdated - DateTime of the last update\n * @property {string} friendlyName - Filter by a worker's friendly name\n * @property {string} sid - The unique ID of the worker\n * @property {string} workspaceSid -\n *          The ID of the Workflow this worker is associated with\n * @property {string} url - The url\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {WorkerPayload} payload - The instance payload\n * @param {sid} workspaceSid -\n *          The ID of the Workflow this worker is associated with\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nWorkerInstance = function WorkerInstance(version, payload, workspaceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.activityName = payload.activity_name; // jshint ignore:line\n  this.activitySid = payload.activity_sid; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n  this.available = payload.available; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateStatusChanged = deserialize.iso8601DateTime(payload.date_status_changed); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(WorkerInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new WorkerContext(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a WorkerInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a WorkerInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.activitySid] - The activity_sid\n * @param {string} [opts.attributes] - The attributes\n * @param {string} [opts.friendlyName] - The friendly_name\n * @param {boolean} [opts.rejectPendingReservations] -\n *          The reject_pending_reservations\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a WorkerInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the realTimeStatistics\n *\n * @function realTimeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersRealTimeStatisticsList}\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.realTimeStatistics = function realTimeStatistics() {\n  return this._proxy.realTimeStatistics;\n};\n\n/* jshint ignore:start */\n/**\n * Access the cumulativeStatistics\n *\n * @function cumulativeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersCumulativeStatisticsList}\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.cumulativeStatistics = function cumulativeStatistics() {\n  return this._proxy.cumulativeStatistics;\n};\n\n/* jshint ignore:start */\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerStatisticsList}\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n\n/* jshint ignore:start */\n/**\n * Access the reservations\n *\n * @function reservations\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList}\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.reservations = function reservations() {\n  return this._proxy.reservations;\n};\n\n/* jshint ignore:start */\n/**\n * Access the workerChannels\n *\n * @function workerChannels\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList}\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.workerChannels = function workerChannels() {\n  return this._proxy.workerChannels;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nWorkerInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext\n *\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersRealTimeStatisticsList} realTimeStatistics -\n *          realTimeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersCumulativeStatisticsList} cumulativeStatistics -\n *          cumulativeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerStatisticsList} statistics -\n *          statistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList} reservations -\n *          reservations resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList} workerChannels -\n *          workerChannels resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The workspace_sid\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nWorkerContext = function WorkerContext(version, workspaceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid\n  };\n  this._uri = _.template('/Workspaces/<%= workspaceSid %>/Workers/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._realTimeStatistics = undefined;\n  this._cumulativeStatistics = undefined;\n  this._statistics = undefined;\n  this._reservations = undefined;\n  this._workerChannels = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a WorkerInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n/* jshint ignore:end */\nWorkerContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WorkerInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a WorkerInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.activitySid] - The activity_sid\n * @param {string} [opts.attributes] - The attributes\n * @param {string} [opts.friendlyName] - The friendly_name\n * @param {boolean} [opts.rejectPendingReservations] -\n *          The reject_pending_reservations\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n/* jshint ignore:end */\nWorkerContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'ActivitySid': _.get(opts, 'activitySid'),\n    'Attributes': _.get(opts, 'attributes'),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'RejectPendingReservations': serialize.bool(_.get(opts, 'rejectPendingReservations'))\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WorkerInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a WorkerInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n/* jshint ignore:end */\nWorkerContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(WorkerContext.prototype, 'realTimeStatistics', {\n  get: function () {\n    if (!this._realTimeStatistics) {\n      this._realTimeStatistics = new WorkersRealTimeStatisticsList(this._version, this._solution.workspaceSid);\n    }\n    return this._realTimeStatistics;\n  }\n});\nObject.defineProperty(WorkerContext.prototype, 'cumulativeStatistics', {\n  get: function () {\n    if (!this._cumulativeStatistics) {\n      this._cumulativeStatistics = new WorkersCumulativeStatisticsList(this._version, this._solution.workspaceSid);\n    }\n    return this._cumulativeStatistics;\n  }\n});\nObject.defineProperty(WorkerContext.prototype, 'statistics', {\n  get: function () {\n    if (!this._statistics) {\n      this._statistics = new WorkerStatisticsList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n    return this._statistics;\n  }\n});\nObject.defineProperty(WorkerContext.prototype, 'reservations', {\n  get: function () {\n    if (!this._reservations) {\n      this._reservations = new ReservationList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n    return this._reservations;\n  }\n});\nObject.defineProperty(WorkerContext.prototype, 'workerChannels', {\n  get: function () {\n    if (!this._workerChannels) {\n      this._workerChannels = new WorkerChannelList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n    return this._workerChannels;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWorkerContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nWorkerContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  WorkerList: WorkerList,\n  WorkerPage: WorkerPage,\n  WorkerInstance: WorkerInstance,\n  WorkerContext: WorkerContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","ReservationList","WorkerChannelList","WorkerStatisticsList","WorkersCumulativeStatisticsList","WorkersRealTimeStatisticsList","WorkersStatisticsList","deserialize","serialize","values","WorkerList","WorkerPage","WorkerInstance","WorkerContext","version","workspaceSid","WorkerListInstance","sid","get","_version","_solution","_uri","template","_statistics","undefined","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","friendlyName","Object","defineProperty","statistics","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","activityName","activity_name","activitySid","activity_sid","attributes","available","dateCreated","iso8601DateTime","date_created","dateStatusChanged","date_status_changed","dateUpdated","date_updated","friendly_name","workspace_sid","url","links","_context","fetch","_proxy","update","remove","realTimeStatistics","cumulativeStatistics","reservations","workerChannels","_realTimeStatistics","_cumulativeStatistics","_reservations","_workerChannels","bool","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/taskrouter/v1/workspace/worker.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar ReservationList = require('./worker/reservation').ReservationList;\nvar WorkerChannelList = require('./worker/workerChannel').WorkerChannelList;\nvar WorkerStatisticsList = require(\n    './worker/workerStatistics').WorkerStatisticsList;\nvar WorkersCumulativeStatisticsList = require(\n    './worker/workersCumulativeStatistics').WorkersCumulativeStatisticsList;\nvar WorkersRealTimeStatisticsList = require(\n    './worker/workersRealTimeStatistics').WorkersRealTimeStatisticsList;\nvar WorkersStatisticsList = require(\n    './worker/workersStatistics').WorkersStatisticsList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar WorkerList;\nvar WorkerPage;\nvar WorkerInstance;\nvar WorkerContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The ID of the Workflow this worker is associated with\n */\n/* jshint ignore:end */\nWorkerList = function WorkerList(version, workspaceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function workers\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext}\n   */\n  /* jshint ignore:end */\n  function WorkerListInstance(sid) {\n    return WorkerListInstance.get(sid);\n  }\n\n  WorkerListInstance._version = version;\n  // Path Solution\n  WorkerListInstance._solution = {workspaceSid: workspaceSid};\n  WorkerListInstance._uri = _.template(\n    '/Workspaces/<%= workspaceSid %>/Workers' // jshint ignore:line\n  )(WorkerListInstance._solution);\n\n  // Components\n  WorkerListInstance._statistics = undefined;\n\n  /* jshint ignore:start */\n  /**\n   * Streams WorkerInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.activityName] -\n   *          Filter by workers that are in a particular Activity by Friendly Name\n   * @param {string} [opts.activitySid] -\n   *          Filter by workers that are in a particular Activity by SID\n   * @param {string} [opts.available] -\n   *          Filter by workers that are available or unavailable.\n   * @param {string} [opts.friendlyName] - Filter by a worker's friendly name\n   * @param {string} [opts.targetWorkersExpression] -\n   *          Filter by workers that would match an expression on a TaskQueue.\n   * @param {string} [opts.taskQueueName] -\n   *          Filter by workers that are eligible for a TaskQueue by Friendly Name\n   * @param {string} [opts.taskQueueSid] -\n   *          Filter by workers that are eligible for a TaskQueue by SID\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists WorkerInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.activityName] -\n   *          Filter by workers that are in a particular Activity by Friendly Name\n   * @param {string} [opts.activitySid] -\n   *          Filter by workers that are in a particular Activity by SID\n   * @param {string} [opts.available] -\n   *          Filter by workers that are available or unavailable.\n   * @param {string} [opts.friendlyName] - Filter by a worker's friendly name\n   * @param {string} [opts.targetWorkersExpression] -\n   *          Filter by workers that would match an expression on a TaskQueue.\n   * @param {string} [opts.taskQueueName] -\n   *          Filter by workers that are eligible for a TaskQueue by Friendly Name\n   * @param {string} [opts.taskQueueSid] -\n   *          Filter by workers that are eligible for a TaskQueue by SID\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of WorkerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.activityName] -\n   *          Filter by workers that are in a particular Activity by Friendly Name\n   * @param {string} [opts.activitySid] -\n   *          Filter by workers that are in a particular Activity by SID\n   * @param {string} [opts.available] -\n   *          Filter by workers that are available or unavailable.\n   * @param {string} [opts.friendlyName] - Filter by a worker's friendly name\n   * @param {string} [opts.targetWorkersExpression] -\n   *          Filter by workers that would match an expression on a TaskQueue.\n   * @param {string} [opts.taskQueueName] -\n   *          Filter by workers that are eligible for a TaskQueue by Friendly Name\n   * @param {string} [opts.taskQueueSid] -\n   *          Filter by workers that are eligible for a TaskQueue by SID\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'ActivityName': _.get(opts, 'activityName'),\n      'ActivitySid': _.get(opts, 'activitySid'),\n      'Available': _.get(opts, 'available'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'TargetWorkersExpression': _.get(opts, 'targetWorkersExpression'),\n      'TaskQueueName': _.get(opts, 'taskQueueName'),\n      'TaskQueueSid': _.get(opts, 'taskQueueSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new WorkerPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of WorkerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new WorkerPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a WorkerInstance\n   *\n   * @function create\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *          String representing user-friendly name for the Worker.\n   * @param {string} [opts.activitySid] -\n   *          A valid Activity describing the worker's initial state.\n   * @param {string} [opts.attributes] - JSON object describing this worker.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed WorkerInstance\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'ActivitySid': _.get(opts, 'activitySid'),\n      'Attributes': _.get(opts, 'attributes')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new WorkerInstance(\n        this._version,\n        payload,\n        this._solution.workspaceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a worker\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext}\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.get = function get(sid) {\n    return new WorkerContext(this._version, this._solution.workspaceSid, sid);\n  };\n\n  Object.defineProperty(WorkerListInstance,\n    'statistics', {\n    get: function statistics() {\n      if (!this._statistics) {\n        this._statistics = new WorkersStatisticsList(this._version, this._solution.workspaceSid);\n      }\n\n      return this._statistics;\n    }\n  });\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  WorkerListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return WorkerListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {WorkerSolution} solution - Path solution\n *\n * @returns WorkerPage\n */\n/* jshint ignore:end */\nWorkerPage = function WorkerPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(WorkerPage.prototype, Page.prototype);\nWorkerPage.prototype.constructor = WorkerPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of WorkerInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerPage#\n *\n * @param {WorkerPayload} payload - Payload response from the API\n *\n * @returns WorkerInstance\n */\n/* jshint ignore:end */\nWorkerPage.prototype.getInstance = function getInstance(payload) {\n  return new WorkerInstance(this._version, payload, this._solution.workspaceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWorkerPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nWorkerPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance\n *\n * @property {string} accountSid - The ID of the account that owns this worker\n * @property {string} activityName -\n *          Filter by workers that are in a particular Activity by Friendly Name\n * @property {string} activitySid -\n *          Filter by workers that are in a particular Activity by SID\n * @property {string} attributes - JSON object describing this worker.\n * @property {boolean} available -\n *          Filter by workers that are available or unavailable.\n * @property {Date} dateCreated - DateTime this worker was created\n * @property {Date} dateStatusChanged -\n *          DateTime of the last change to the Worker's activity.\n * @property {Date} dateUpdated - DateTime of the last update\n * @property {string} friendlyName - Filter by a worker's friendly name\n * @property {string} sid - The unique ID of the worker\n * @property {string} workspaceSid -\n *          The ID of the Workflow this worker is associated with\n * @property {string} url - The url\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {WorkerPayload} payload - The instance payload\n * @param {sid} workspaceSid -\n *          The ID of the Workflow this worker is associated with\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nWorkerInstance = function WorkerInstance(version, payload, workspaceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.activityName = payload.activity_name; // jshint ignore:line\n  this.activitySid = payload.activity_sid; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n  this.available = payload.available; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateStatusChanged = deserialize.iso8601DateTime(payload.date_status_changed); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {workspaceSid: workspaceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(WorkerInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new WorkerContext(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a WorkerInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a WorkerInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.activitySid] - The activity_sid\n * @param {string} [opts.attributes] - The attributes\n * @param {string} [opts.friendlyName] - The friendly_name\n * @param {boolean} [opts.rejectPendingReservations] -\n *          The reject_pending_reservations\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a WorkerInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the realTimeStatistics\n *\n * @function realTimeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersRealTimeStatisticsList}\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.realTimeStatistics = function realTimeStatistics() {\n  return this._proxy.realTimeStatistics;\n};\n\n/* jshint ignore:start */\n/**\n * Access the cumulativeStatistics\n *\n * @function cumulativeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersCumulativeStatisticsList}\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.cumulativeStatistics = function cumulativeStatistics()\n    {\n  return this._proxy.cumulativeStatistics;\n};\n\n/* jshint ignore:start */\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerStatisticsList}\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n\n/* jshint ignore:start */\n/**\n * Access the reservations\n *\n * @function reservations\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList}\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.reservations = function reservations() {\n  return this._proxy.reservations;\n};\n\n/* jshint ignore:start */\n/**\n * Access the workerChannels\n *\n * @function workerChannels\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList}\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.workerChannels = function workerChannels() {\n  return this._proxy.workerChannels;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nWorkerInstance.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext\n *\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersRealTimeStatisticsList} realTimeStatistics -\n *          realTimeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersCumulativeStatisticsList} cumulativeStatistics -\n *          cumulativeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerStatisticsList} statistics -\n *          statistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList} reservations -\n *          reservations resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList} workerChannels -\n *          workerChannels resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The workspace_sid\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nWorkerContext = function WorkerContext(version, workspaceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {workspaceSid: workspaceSid, sid: sid, };\n  this._uri = _.template(\n    '/Workspaces/<%= workspaceSid %>/Workers/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._realTimeStatistics = undefined;\n  this._cumulativeStatistics = undefined;\n  this._statistics = undefined;\n  this._reservations = undefined;\n  this._workerChannels = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a WorkerInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n/* jshint ignore:end */\nWorkerContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new WorkerInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a WorkerInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.activitySid] - The activity_sid\n * @param {string} [opts.attributes] - The attributes\n * @param {string} [opts.friendlyName] - The friendly_name\n * @param {boolean} [opts.rejectPendingReservations] -\n *          The reject_pending_reservations\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n/* jshint ignore:end */\nWorkerContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'ActivitySid': _.get(opts, 'activitySid'),\n    'Attributes': _.get(opts, 'attributes'),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'RejectPendingReservations': serialize.bool(_.get(opts, 'rejectPendingReservations'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new WorkerInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a WorkerInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n/* jshint ignore:end */\nWorkerContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(WorkerContext.prototype,\n  'realTimeStatistics', {\n  get: function() {\n    if (!this._realTimeStatistics) {\n      this._realTimeStatistics = new WorkersRealTimeStatisticsList(\n        this._version,\n        this._solution.workspaceSid\n      );\n    }\n    return this._realTimeStatistics;\n  }\n});\n\nObject.defineProperty(WorkerContext.prototype,\n  'cumulativeStatistics', {\n  get: function() {\n    if (!this._cumulativeStatistics) {\n      this._cumulativeStatistics = new WorkersCumulativeStatisticsList(\n        this._version,\n        this._solution.workspaceSid\n      );\n    }\n    return this._cumulativeStatistics;\n  }\n});\n\nObject.defineProperty(WorkerContext.prototype,\n  'statistics', {\n  get: function() {\n    if (!this._statistics) {\n      this._statistics = new WorkerStatisticsList(\n        this._version,\n        this._solution.workspaceSid,\n        this._solution.sid\n      );\n    }\n    return this._statistics;\n  }\n});\n\nObject.defineProperty(WorkerContext.prototype,\n  'reservations', {\n  get: function() {\n    if (!this._reservations) {\n      this._reservations = new ReservationList(\n        this._version,\n        this._solution.workspaceSid,\n        this._solution.sid\n      );\n    }\n    return this._reservations;\n  }\n});\n\nObject.defineProperty(WorkerContext.prototype,\n  'workerChannels', {\n  get: function() {\n    if (!this._workerChannels) {\n      this._workerChannels = new WorkerChannelList(\n        this._version,\n        this._solution.workspaceSid,\n        this._solution.sid\n      );\n    }\n    return this._workerChannels;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWorkerContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nWorkerContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  WorkerList: WorkerList,\n  WorkerPage: WorkerPage,\n  WorkerInstance: WorkerInstance,\n  WorkerContext: WorkerContext\n};\n"],"mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAf,cAAc,CAAC2E,SAAS,CAACgC,MAAM,GAAG,SAASA,MAAMA,CAAC7F,IAAI,EAAEC,QAAQ,EAAE;EAChE,OAAO,IAAI,CAAC2F,MAAM,CAACC,MAAM,CAAC7F,IAAI,EAAEC,QAAQ,CAAC;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAf,cAAc,CAAC2E,SAAS,CAACiC,MAAM,GAAG,SAASA,MAAMA,CAAC7F,QAAQ,EAAE;EAC1D,OAAO,IAAI,CAAC2F,MAAM,CAACE,MAAM,CAAC7F,QAAQ,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAf,cAAc,CAAC2E,SAAS,CAACkC,kBAAkB,GAAG,SAASA,kBAAkBA,CAAA,EAAG;EAC1E,OAAO,IAAI,CAACH,MAAM,CAACG,kBAAkB;AACvC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA7G,cAAc,CAAC2E,SAAS,CAACmC,oBAAoB,GAAG,SAASA,oBAAoBA,CAAA,EACzE;EACF,OAAO,IAAI,CAACJ,MAAM,CAACI,oBAAoB;AACzC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA9G,cAAc,CAAC2E,SAAS,CAACR,UAAU,GAAG,SAASA,UAAUA,CAAA,EAAG;EAC1D,OAAO,IAAI,CAACuC,MAAM,CAACvC,UAAU;AAC/B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnE,cAAc,CAAC2E,SAAS,CAACoC,YAAY,GAAG,SAASA,YAAYA,CAAA,EAAG;EAC9D,OAAO,IAAI,CAACL,MAAM,CAACK,YAAY;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/G,cAAc,CAAC2E,SAAS,CAACqC,cAAc,GAAG,SAAS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"},"metadata":{},"sourceType":"script","externalDependencies":[]}