{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../../../base/deserialize'); /* jshint ignore:line */\nvar values = require('../../../../../../base/values'); /* jshint ignore:line */\n\nvar CredentialList;\nvar CredentialPage;\nvar CredentialInstance;\nvar CredentialContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the CredentialList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {string} credentialListSid -\n *          The unique id that identifies the credential list that includes this credential\n */\n/* jshint ignore:end */\nCredentialList = function CredentialList(version, accountSid, credentialListSid) {\n  /* jshint ignore:start */\n  /**\n   * @function credentials\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext}\n   */\n  /* jshint ignore:end */\n  function CredentialListInstance(sid) {\n    return CredentialListInstance.get(sid);\n  }\n  CredentialListInstance._version = version;\n  // Path Solution\n  CredentialListInstance._solution = {\n    accountSid: accountSid,\n    credentialListSid: credentialListSid\n  };\n  CredentialListInstance._uri = _.template('/Accounts/<%= accountSid %>/SIP/CredentialLists/<%= credentialListSid %>/Credentials.json' // jshint ignore:line\n  )(CredentialListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams CredentialInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists CredentialInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of CredentialInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CredentialPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of CredentialInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CredentialPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a CredentialInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.username - The username for this credential.\n   * @param {string} opts.password -\n   *          The password will not be returned in the response.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed CredentialInstance\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.username)) {\n      throw new Error('Required parameter \"opts.username\" missing.');\n    }\n    if (_.isUndefined(opts.password)) {\n      throw new Error('Required parameter \"opts.password\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'Username': _.get(opts, 'username'),\n      'Password': _.get(opts, 'password')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CredentialInstance(this._version, payload, this._solution.accountSid, this._solution.credentialListSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a credential\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {string} sid - The unique id that identifies the resource to fetch.\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext}\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.get = function get(sid) {\n    return new CredentialContext(this._version, this._solution.accountSid, this._solution.credentialListSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  CredentialListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return CredentialListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the CredentialPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CredentialSolution} solution - Path solution\n *\n * @returns CredentialPage\n */\n/* jshint ignore:end */\nCredentialPage = function CredentialPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(CredentialPage.prototype, Page.prototype);\nCredentialPage.prototype.constructor = CredentialPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of CredentialInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialPage#\n *\n * @param {CredentialPayload} payload - Payload response from the API\n *\n * @returns CredentialInstance\n */\n/* jshint ignore:end */\nCredentialPage.prototype.getInstance = function getInstance(payload) {\n  return new CredentialInstance(this._version, payload, this._solution.accountSid, this._solution.credentialListSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCredentialPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nCredentialPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the CredentialContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance\n *\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @property {string} credentialListSid -\n *          The unique id that identifies the credential list that includes this credential\n * @property {string} username - The username for this credential.\n * @property {Date} dateCreated -\n *          The date that this resource was created, given as GMT in RFC 2822 format.\n * @property {Date} dateUpdated -\n *          The date that this resource was last updated, given as GMT in RFC 2822 format.\n * @property {string} uri -\n *          The URI for this resource, relative to https://api.twilio.com\n *\n * @param {V2010} version - Version of the resource\n * @param {CredentialPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {sid} credentialListSid -\n *          The unique id that identifies the credential list that includes this credential\n * @param {sid} sid - The unique id that identifies the resource to fetch.\n */\n/* jshint ignore:end */\nCredentialInstance = function CredentialInstance(version, payload, accountSid, credentialListSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.credentialListSid = payload.credential_list_sid; // jshint ignore:line\n  this.username = payload.username; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    credentialListSid: credentialListSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(CredentialInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new CredentialContext(this._version, this._solution.accountSid, this._solution.credentialListSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a CredentialInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n/* jshint ignore:end */\nCredentialInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a CredentialInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.password] -\n *          The password will not be returned in the response\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n/* jshint ignore:end */\nCredentialInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a CredentialInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n/* jshint ignore:end */\nCredentialInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCredentialInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nCredentialInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the CredentialContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {sid} credentialListSid -\n *          The unique id that identifies the credential list that contains the desired credential\n * @param {sid} sid - The unique id that identifies the resource to fetch.\n */\n/* jshint ignore:end */\nCredentialContext = function CredentialContext(version, accountSid, credentialListSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    accountSid: accountSid,\n    credentialListSid: credentialListSid,\n    sid: sid\n  };\n  this._uri = _.template('/Accounts/<%= accountSid %>/SIP/CredentialLists/<%= credentialListSid %>/Credentials/<%= sid %>.json' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a CredentialInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n/* jshint ignore:end */\nCredentialContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new CredentialInstance(this._version, payload, this._solution.accountSid, this._solution.credentialListSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a CredentialInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.password] -\n *          The password will not be returned in the response\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n/* jshint ignore:end */\nCredentialContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Password': _.get(opts, 'password')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new CredentialInstance(this._version, payload, this._solution.accountSid, this._solution.credentialListSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a CredentialInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n/* jshint ignore:end */\nCredentialContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCredentialContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nCredentialContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  CredentialList: CredentialList,\n  CredentialPage: CredentialPage,\n  CredentialInstance: CredentialInstance,\n  CredentialContext: CredentialContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","CredentialList","CredentialPage","CredentialInstance","CredentialContext","version","accountSid","credentialListSid","CredentialListInstance","sid","get","_version","_solution","_uri","template","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","username","password","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","credential_list_sid","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/api/v2010/account/sip/credentialList/credential.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../../../base/values');  /* jshint ignore:line */\n\nvar CredentialList;\nvar CredentialPage;\nvar CredentialInstance;\nvar CredentialContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the CredentialList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {string} credentialListSid -\n *          The unique id that identifies the credential list that includes this credential\n */\n/* jshint ignore:end */\nCredentialList = function CredentialList(version, accountSid, credentialListSid)\n                                          {\n  /* jshint ignore:start */\n  /**\n   * @function credentials\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext}\n   */\n  /* jshint ignore:end */\n  function CredentialListInstance(sid) {\n    return CredentialListInstance.get(sid);\n  }\n\n  CredentialListInstance._version = version;\n  // Path Solution\n  CredentialListInstance._solution = {accountSid: accountSid, credentialListSid: credentialListSid};\n  CredentialListInstance._uri = _.template(\n    '/Accounts/<%= accountSid %>/SIP/CredentialLists/<%= credentialListSid %>/Credentials.json' // jshint ignore:line\n  )(CredentialListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams CredentialInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists CredentialInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of CredentialInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CredentialPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of CredentialInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CredentialPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a CredentialInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.username - The username for this credential.\n   * @param {string} opts.password -\n   *          The password will not be returned in the response.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed CredentialInstance\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.username)) {\n      throw new Error('Required parameter \"opts.username\" missing.');\n    }\n    if (_.isUndefined(opts.password)) {\n      throw new Error('Required parameter \"opts.password\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({'Username': _.get(opts, 'username'), 'Password': _.get(opts, 'password')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CredentialInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.credentialListSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a credential\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @param {string} sid - The unique id that identifies the resource to fetch.\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext}\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.get = function get(sid) {\n    return new CredentialContext(\n      this._version,\n      this._solution.accountSid,\n      this._solution.credentialListSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  CredentialListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  CredentialListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return CredentialListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CredentialPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CredentialSolution} solution - Path solution\n *\n * @returns CredentialPage\n */\n/* jshint ignore:end */\nCredentialPage = function CredentialPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(CredentialPage.prototype, Page.prototype);\nCredentialPage.prototype.constructor = CredentialPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of CredentialInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialPage#\n *\n * @param {CredentialPayload} payload - Payload response from the API\n *\n * @returns CredentialInstance\n */\n/* jshint ignore:end */\nCredentialPage.prototype.getInstance = function getInstance(payload) {\n  return new CredentialInstance(\n    this._version,\n    payload,\n    this._solution.accountSid,\n    this._solution.credentialListSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCredentialPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nCredentialPage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CredentialContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance\n *\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @property {string} credentialListSid -\n *          The unique id that identifies the credential list that includes this credential\n * @property {string} username - The username for this credential.\n * @property {Date} dateCreated -\n *          The date that this resource was created, given as GMT in RFC 2822 format.\n * @property {Date} dateUpdated -\n *          The date that this resource was last updated, given as GMT in RFC 2822 format.\n * @property {string} uri -\n *          The URI for this resource, relative to https://api.twilio.com\n *\n * @param {V2010} version - Version of the resource\n * @param {CredentialPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {sid} credentialListSid -\n *          The unique id that identifies the credential list that includes this credential\n * @param {sid} sid - The unique id that identifies the resource to fetch.\n */\n/* jshint ignore:end */\nCredentialInstance = function CredentialInstance(version, payload, accountSid,\n                                                  credentialListSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.credentialListSid = payload.credential_list_sid; // jshint ignore:line\n  this.username = payload.username; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    credentialListSid: credentialListSid,\n    sid: sid || this.sid,\n  };\n};\n\nObject.defineProperty(CredentialInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new CredentialContext(\n        this._version,\n        this._solution.accountSid,\n        this._solution.credentialListSid,\n        this._solution.sid\n      );\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a CredentialInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n/* jshint ignore:end */\nCredentialInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a CredentialInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.password] -\n *          The password will not be returned in the response\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n/* jshint ignore:end */\nCredentialInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a CredentialInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n/* jshint ignore:end */\nCredentialInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCredentialInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nCredentialInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CredentialContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {sid} credentialListSid -\n *          The unique id that identifies the credential list that contains the desired credential\n * @param {sid} sid - The unique id that identifies the resource to fetch.\n */\n/* jshint ignore:end */\nCredentialContext = function CredentialContext(version, accountSid,\n                                                credentialListSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, credentialListSid: credentialListSid, sid: sid, };\n  this._uri = _.template(\n    '/Accounts/<%= accountSid %>/SIP/CredentialLists/<%= credentialListSid %>/Credentials/<%= sid %>.json' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a CredentialInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n/* jshint ignore:end */\nCredentialContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new CredentialInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.credentialListSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a CredentialInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.password] -\n *          The password will not be returned in the response\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n/* jshint ignore:end */\nCredentialContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'Password': _.get(opts, 'password')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new CredentialInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.credentialListSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a CredentialInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CredentialInstance\n */\n/* jshint ignore:end */\nCredentialContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.CredentialListContext.CredentialContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCredentialContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nCredentialContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  CredentialList: CredentialList,\n  CredentialPage: CredentialPage,\n  CredentialInstance: CredentialInstance,\n  CredentialContext: CredentialContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}