{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar InstalledAddOnExtensionList = require('./installedAddOn/installedAddOnExtension').InstalledAddOnExtensionList;\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar InstalledAddOnList;\nvar InstalledAddOnPage;\nvar InstalledAddOnInstance;\nvar InstalledAddOnContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnList\n *\n * @param {Twilio.Preview.Marketplace} version - Version of the resource\n */\n/* jshint ignore:end */\nInstalledAddOnList = function InstalledAddOnList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function installedAddOns\n   * @memberof Twilio.Preview.Marketplace#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext}\n   */\n  /* jshint ignore:end */\n  function InstalledAddOnListInstance(sid) {\n    return InstalledAddOnListInstance.get(sid);\n  }\n  InstalledAddOnListInstance._version = version;\n  // Path Solution\n  InstalledAddOnListInstance._solution = {};\n  InstalledAddOnListInstance._uri = _.template('/InstalledAddOns' // jshint ignore:line\n  )(InstalledAddOnListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a InstalledAddOnInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.availableAddOnSid -\n   *          A string that uniquely identifies the Add-on to install\n   * @param {boolean} opts.acceptTermsOfService -\n   *          A boolean reflecting your acceptance of the Terms of Service\n   * @param {string} [opts.configuration] -\n   *          The JSON object representing the configuration\n   * @param {string} [opts.uniqueName] -\n   *          The string that uniquely identifies this Add-on installation\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed InstalledAddOnInstance\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.availableAddOnSid)) {\n      throw new Error('Required parameter \"opts.availableAddOnSid\" missing.');\n    }\n    if (_.isUndefined(opts.acceptTermsOfService)) {\n      throw new Error('Required parameter \"opts.acceptTermsOfService\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'AvailableAddOnSid': _.get(opts, 'availableAddOnSid'),\n      'AcceptTermsOfService': serialize.bool(_.get(opts, 'acceptTermsOfService')),\n      'Configuration': serialize.object(_.get(opts, 'configuration')),\n      'UniqueName': _.get(opts, 'uniqueName')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new InstalledAddOnInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams InstalledAddOnInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists InstalledAddOnInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of InstalledAddOnInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new InstalledAddOnPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of InstalledAddOnInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new InstalledAddOnPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a installed_add_on\n   *\n   * @function get\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {string} sid - The unique Installed Add-on Sid\n   *\n   * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext}\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.get = function get(sid) {\n    return new InstalledAddOnContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  InstalledAddOnListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return InstalledAddOnListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnPage\n *\n * @param {Marketplace} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {InstalledAddOnSolution} solution - Path solution\n *\n * @returns InstalledAddOnPage\n */\n/* jshint ignore:end */\nInstalledAddOnPage = function InstalledAddOnPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(InstalledAddOnPage.prototype, Page.prototype);\nInstalledAddOnPage.prototype.constructor = InstalledAddOnPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of InstalledAddOnInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnPage#\n *\n * @param {InstalledAddOnPayload} payload - Payload response from the API\n *\n * @returns InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnPage.prototype.getInstance = function getInstance(payload) {\n  return new InstalledAddOnInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInstalledAddOnPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nInstalledAddOnPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnInstance\n *\n * @property {string} sid -\n *          A string that uniquely identifies this Add-on installation\n * @property {string} accountSid - The Account id that has installed this Add-on\n * @property {string} friendlyName - A description of this Add-on installation\n * @property {string} description - A short description of the Add-on functionality\n * @property {string} configuration -\n *          The JSON object representing the current configuration\n * @property {string} uniqueName -\n *          The string that uniquely identifies this Add-on installation\n * @property {Date} dateCreated - The date this Add-on installation was created\n * @property {Date} dateUpdated -\n *          The date this Add-on installation was last updated\n * @property {string} url - The url\n * @property {string} links - A dictionary of URLs for related resource.\n *\n * @param {Marketplace} version - Version of the resource\n * @param {InstalledAddOnPayload} payload - The instance payload\n * @param {sid} sid - The unique Installed Add-on Sid\n */\n/* jshint ignore:end */\nInstalledAddOnInstance = function InstalledAddOnInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.description = payload.description; // jshint ignore:line\n  this.configuration = payload.configuration; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(InstalledAddOnInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new InstalledAddOnContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * remove a InstalledAddOnInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a InstalledAddOnInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a InstalledAddOnInstance\n *\n * @function update\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.configuration] -\n *          The JSON object representing the configuration\n * @param {string} [opts.uniqueName] -\n *          The string that uniquely identifies this Add-on installation\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the extensions\n *\n * @function extensions\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList}\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.extensions = function extensions() {\n  return this._proxy.extensions;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nInstalledAddOnInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnContext\n *\n * @property {Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList} extensions -\n *          extensions resource\n *\n * @param {Marketplace} version - Version of the resource\n * @param {sid} sid - The unique Installed Add-on Sid\n */\n/* jshint ignore:end */\nInstalledAddOnContext = function InstalledAddOnContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = _.template('/InstalledAddOns/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._extensions = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * remove a InstalledAddOnInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a InstalledAddOnInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new InstalledAddOnInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a InstalledAddOnInstance\n *\n * @function update\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.configuration] -\n *          The JSON object representing the configuration\n * @param {string} [opts.uniqueName] -\n *          The string that uniquely identifies this Add-on installation\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Configuration': serialize.object(_.get(opts, 'configuration')),\n    'UniqueName': _.get(opts, 'uniqueName')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new InstalledAddOnInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(InstalledAddOnContext.prototype, 'extensions', {\n  get: function () {\n    if (!this._extensions) {\n      this._extensions = new InstalledAddOnExtensionList(this._version, this._solution.sid);\n    }\n    return this._extensions;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInstalledAddOnContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nInstalledAddOnContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  InstalledAddOnList: InstalledAddOnList,\n  InstalledAddOnPage: InstalledAddOnPage,\n  InstalledAddOnInstance: InstalledAddOnInstance,\n  InstalledAddOnContext: InstalledAddOnContext\n};","map":{"version":3,"names":["Q","require","_","util","InstalledAddOnExtensionList","Page","deserialize","serialize","values","InstalledAddOnList","InstalledAddOnPage","InstalledAddOnInstance","InstalledAddOnContext","version","InstalledAddOnListInstance","sid","get","_version","_solution","_uri","template","create","opts","callback","isUndefined","Error","availableAddOnSid","acceptTermsOfService","deferred","defer","data","of","bool","object","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","pageLimit","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","friendlyName","friendly_name","description","configuration","uniqueName","unique_name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","remove","_proxy","fetch","update","extensions","_extensions","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/preview/marketplace/installedAddOn.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar InstalledAddOnExtensionList = require(\n    './installedAddOn/installedAddOnExtension').InstalledAddOnExtensionList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar InstalledAddOnList;\nvar InstalledAddOnPage;\nvar InstalledAddOnInstance;\nvar InstalledAddOnContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnList\n *\n * @param {Twilio.Preview.Marketplace} version - Version of the resource\n */\n/* jshint ignore:end */\nInstalledAddOnList = function InstalledAddOnList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function installedAddOns\n   * @memberof Twilio.Preview.Marketplace#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext}\n   */\n  /* jshint ignore:end */\n  function InstalledAddOnListInstance(sid) {\n    return InstalledAddOnListInstance.get(sid);\n  }\n\n  InstalledAddOnListInstance._version = version;\n  // Path Solution\n  InstalledAddOnListInstance._solution = {};\n  InstalledAddOnListInstance._uri = _.template(\n    '/InstalledAddOns' // jshint ignore:line\n  )(InstalledAddOnListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a InstalledAddOnInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.availableAddOnSid -\n   *          A string that uniquely identifies the Add-on to install\n   * @param {boolean} opts.acceptTermsOfService -\n   *          A boolean reflecting your acceptance of the Terms of Service\n   * @param {string} [opts.configuration] -\n   *          The JSON object representing the configuration\n   * @param {string} [opts.uniqueName] -\n   *          The string that uniquely identifies this Add-on installation\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed InstalledAddOnInstance\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.availableAddOnSid)) {\n      throw new Error('Required parameter \"opts.availableAddOnSid\" missing.');\n    }\n    if (_.isUndefined(opts.acceptTermsOfService)) {\n      throw new Error('Required parameter \"opts.acceptTermsOfService\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'AvailableAddOnSid': _.get(opts, 'availableAddOnSid'),\n      'AcceptTermsOfService': serialize.bool(_.get(opts, 'acceptTermsOfService')),\n      'Configuration': serialize.object(_.get(opts, 'configuration')),\n      'UniqueName': _.get(opts, 'uniqueName')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new InstalledAddOnInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams InstalledAddOnInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists InstalledAddOnInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of InstalledAddOnInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new InstalledAddOnPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of InstalledAddOnInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new InstalledAddOnPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a installed_add_on\n   *\n   * @function get\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {string} sid - The unique Installed Add-on Sid\n   *\n   * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext}\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.get = function get(sid) {\n    return new InstalledAddOnContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  InstalledAddOnListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return InstalledAddOnListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnPage\n *\n * @param {Marketplace} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {InstalledAddOnSolution} solution - Path solution\n *\n * @returns InstalledAddOnPage\n */\n/* jshint ignore:end */\nInstalledAddOnPage = function InstalledAddOnPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(InstalledAddOnPage.prototype, Page.prototype);\nInstalledAddOnPage.prototype.constructor = InstalledAddOnPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of InstalledAddOnInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnPage#\n *\n * @param {InstalledAddOnPayload} payload - Payload response from the API\n *\n * @returns InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnPage.prototype.getInstance = function getInstance(payload) {\n  return new InstalledAddOnInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInstalledAddOnPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nInstalledAddOnPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnInstance\n *\n * @property {string} sid -\n *          A string that uniquely identifies this Add-on installation\n * @property {string} accountSid - The Account id that has installed this Add-on\n * @property {string} friendlyName - A description of this Add-on installation\n * @property {string} description - A short description of the Add-on functionality\n * @property {string} configuration -\n *          The JSON object representing the current configuration\n * @property {string} uniqueName -\n *          The string that uniquely identifies this Add-on installation\n * @property {Date} dateCreated - The date this Add-on installation was created\n * @property {Date} dateUpdated -\n *          The date this Add-on installation was last updated\n * @property {string} url - The url\n * @property {string} links - A dictionary of URLs for related resource.\n *\n * @param {Marketplace} version - Version of the resource\n * @param {InstalledAddOnPayload} payload - The instance payload\n * @param {sid} sid - The unique Installed Add-on Sid\n */\n/* jshint ignore:end */\nInstalledAddOnInstance = function InstalledAddOnInstance(version, payload, sid)\n                                                          {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.description = payload.description; // jshint ignore:line\n  this.configuration = payload.configuration; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(InstalledAddOnInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new InstalledAddOnContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * remove a InstalledAddOnInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a InstalledAddOnInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a InstalledAddOnInstance\n *\n * @function update\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.configuration] -\n *          The JSON object representing the configuration\n * @param {string} [opts.uniqueName] -\n *          The string that uniquely identifies this Add-on installation\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the extensions\n *\n * @function extensions\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList}\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.extensions = function extensions() {\n  return this._proxy.extensions;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nInstalledAddOnInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnContext\n *\n * @property {Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList} extensions -\n *          extensions resource\n *\n * @param {Marketplace} version - Version of the resource\n * @param {sid} sid - The unique Installed Add-on Sid\n */\n/* jshint ignore:end */\nInstalledAddOnContext = function InstalledAddOnContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = _.template(\n    '/InstalledAddOns/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._extensions = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * remove a InstalledAddOnInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a InstalledAddOnInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new InstalledAddOnInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a InstalledAddOnInstance\n *\n * @function update\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.configuration] -\n *          The JSON object representing the configuration\n * @param {string} [opts.uniqueName] -\n *          The string that uniquely identifies this Add-on installation\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Configuration': serialize.object(_.get(opts, 'configuration')),\n    'UniqueName': _.get(opts, 'uniqueName')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new InstalledAddOnInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(InstalledAddOnContext.prototype,\n  'extensions', {\n  get: function() {\n    if (!this._extensions) {\n      this._extensions = new InstalledAddOnExtensionList(this._version, this._solution.sid);\n    }\n    return this._extensions;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInstalledAddOnContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nInstalledAddOnContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  InstalledAddOnList: InstalledAddOnList,\n  InstalledAddOnPage: InstalledAddOnPage,\n  InstalledAddOnInstance: InstalledAddOnInstance,\n  InstalledAddOnContext: InstalledAddOnContext\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAE;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC,CAAC,CAAE;AAC7B,IAAIG,2BAA2B,GAAGH,OAAO,CACrC,0CAA0C,CAAC,CAACG,2BAA2B;AAC3E,IAAIC,IAAI,GAAGJ,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAE;AAC3C,IAAIK,WAAW,GAAGL,OAAO,CACrB,2BAA2B,CAAC,CAAC,CAAE;AACnC,IAAIM,SAAS,GAAGN,OAAO,CAAC,yBAAyB,CAAC,CAAC,CAAE;AACrD,IAAIO,MAAM,GAAGP,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAE;;AAE/C,IAAIQ,kBAAkB;AACtB,IAAIC,kBAAkB;AACtB,IAAIC,sBAAsB;AAC1B,IAAIC,qBAAqB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,kBAAkB,GAAG,SAASA,kBAAkBA,CAACI,OAAO,EAAE;EACxD;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA,SAASC,0BAA0BA,CAACC,GAAG,EAAE;IACvC,OAAOD,0BAA0B,CAACE,GAAG,CAACD,GAAG,CAAC;EAC5C;EAEAD,0BAA0B,CAACG,QAAQ,GAAGJ,OAAO;EAC7C;EACAC,0BAA0B,CAACI,SAAS,GAAG,CAAC,CAAC;EACzCJ,0BAA0B,CAACK,IAAI,GAAGjB,CAAC,CAACkB,QAAQ,CAC1C,kBAAkB,CAAC;EACrB,CAAC,CAACN,0BAA0B,CAACI,SAAS,CAAC;EACvC;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAJ,0BAA0B,CAACO,MAAM,GAAG,SAASA,MAAMA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IAClE,IAAIrB,CAAC,CAACsB,WAAW,CAACF,IAAI,CAAC,EAAE;MACvB,MAAM,IAAIG,KAAK,CAAC,oCAAoC,CAAC;IACvD;IACA,IAAIvB,CAAC,CAACsB,WAAW,CAACF,IAAI,CAACI,iBAAiB,CAAC,EAAE;MACzC,MAAM,IAAID,KAAK,CAAC,sDAAsD,CAAC;IACzE;IACA,IAAIvB,CAAC,CAACsB,WAAW,CAACF,IAAI,CAACK,oBAAoB,CAAC,EAAE;MAC5C,MAAM,IAAIF,KAAK,CAAC,yDAAyD,CAAC;IAC5E;IAEA,IAAIG,QAAQ,GAAG5B,CAAC,CAAC6B,KAAK,CAAC,CAAC;IACxB,IAAIC,IAAI,GAAGtB,MAAM,CAACuB,EAAE,CAAC;MACnB,mBAAmB,EAAE7B,CAAC,CAACc,GAAG,CAACM,IAAI,EAAE,mBAAmB,CAAC;MACrD,sBAAsB,EAAEf,SAAS,CAACyB,IAAI,CAAC9B,CAAC,CAACc,GAAG,CAACM,IAAI,EAAE,sBAAsB,CAAC,CAAC;MAC3E,eAAe,EAAEf,SAAS,CAAC0B,MAAM,CAAC/B,CAAC,CAACc,GAAG,CAACM,IAAI,EAAE,eAAe,CAAC,CAAC;MAC/D,YAAY,EAAEpB,CAAC,CAACc,GAAG,CAACM,IAAI,EAAE,YAAY;IACxC,CAAC,CAAC;IAEF,IAAIY,OAAO,GAAG,IAAI,CAACjB,QAAQ,CAACI,MAAM,CAAC;MAACc,GAAG,EAAE,IAAI,CAAChB,IAAI;MAAEiB,MAAM,EAAE,MAAM;MAAEN,IAAI,EAAEA;IAAI,CAAC,CAAC;IAEhFI,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;MACvCV,QAAQ,CAACW,OAAO,CAAC,IAAI5B,sBAAsB,CAAC,IAAI,CAACM,QAAQ,EAAEqB,OAAO,EAAE,IAAI,CAACpB,SAAS,CAACH,GAAG,CAAC,CAAC;IAC1F,CAAC,CAACyB,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;MAC5Bd,QAAQ,CAACe,MAAM,CAACD,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIxC,CAAC,CAAC0C,UAAU,CAACrB,QAAQ,CAAC,EAAE;MAC1BK,QAAQ,CAACM,OAAO,CAACW,OAAO,CAACtB,QAAQ,CAAC;IACpC;IAEA,OAAOK,QAAQ,CAACM,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACApB,0BAA0B,CAACgC,IAAI,GAAG,SAASA,IAAIA,CAACxB,IAAI,EAAEC,QAAQ,EAAE;IAC9D,IAAIrB,CAAC,CAAC0C,UAAU,CAACtB,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAIA,IAAI,CAACC,QAAQ,EAAE;MACjBA,QAAQ,GAAGD,IAAI,CAACC,QAAQ;IAC1B;IACA,IAAIrB,CAAC,CAACsB,WAAW,CAACD,QAAQ,CAAC,EAAE;MAC3B,MAAM,IAAIE,KAAK,CAAC,oCAAoC,CAAC;IACvD;IAEA,IAAIsB,IAAI,GAAG,KAAK;IAChB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIC,MAAM,GAAG,IAAI,CAACjC,QAAQ,CAACkC,UAAU,CAAC;MACpCC,KAAK,EAAE9B,IAAI,CAAC8B,KAAK;MACjBC,QAAQ,EAAE/B,IAAI,CAAC+B;IACjB,CAAC,CAAC;IAEF,SAASC,UAAUA,CAACZ,KAAK,EAAE;MACzBK,IAAI,GAAG,IAAI;MACX,IAAI7C,CAAC,CAAC0C,UAAU,CAACtB,IAAI,CAACyB,IAAI,CAAC,EAAE;QAC3BzB,IAAI,CAACyB,IAAI,CAACL,KAAK,CAAC;MAClB;IACF;IAEA,SAASa,aAAaA,CAACC,EAAE,EAAE;MACzB,IAAItB,OAAO,GAAGsB,EAAE,CAAC,CAAC;MAClB,IAAItD,CAAC,CAACsB,WAAW,CAACU,OAAO,CAAC,EAAE;QAC1BoB,UAAU,CAAC,CAAC;QACZ;MACF;MAEApB,OAAO,CAACG,IAAI,CAAC,UAASoB,IAAI,EAAE;QAC1BvD,CAAC,CAAC4C,IAAI,CAACW,IAAI,CAACC,SAAS,EAAE,UAASC,QAAQ,EAAE;UACxC,IAAIZ,IAAI,IAAK,CAAC7C,CAAC,CAACsB,WAAW,CAACF,IAAI,CAAC8B,KAAK,CAAC,IAAIH,eAAe,IAAI3B,IAAI,CAAC8B,KAAM,EAAE;YACzEL,IAAI,GAAG,IAAI;YACX,OAAO,KAAK;UACd;UAEAE,eAAe,EAAE;UACjB1B,QAAQ,CAACoC,QAAQ,EAAEL,UAAU,CAAC;QAChC,CAAC,CAAC;QAEF,IAAKJ,MAAM,CAACU,SAAS,IAAIV,MAAM,CAACU,SAAS,IAAIZ,WAAW,EAAG;UACzDM,UAAU,CAAC,CAAC;QACd,CAAC,MAAM,IAAI,CAACP,IAAI,EAAE;UAChBC,WAAW,EAAE;UACbO,aAAa,CAACrD,CAAC,CAACsC,IAAI,CAACiB,IAAI,CAACI,QAAQ,EAAEJ,IAAI,CAAC,CAAC;QAC5C;MACF,CAAC,CAAC;MAEFvB,OAAO,CAACO,KAAK,CAACa,UAAU,CAAC;IAC3B;IAEAC,aAAa,CAACrD,CAAC,CAACsC,IAAI,CAAC,IAAI,CAACiB,IAAI,EAAE,IAAI,EAAEvD,CAAC,CAAC4D,KAAK,CAACxC,IAAI,EAAE4B,MAAM,CAAC,CAAC,CAAC;EAC/D,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACApC,0BAA0B,CAACiD,IAAI,GAAG,SAASA,IAAIA,CAACzC,IAAI,EAAEC,QAAQ,EAAE;IAC9D,IAAIrB,CAAC,CAAC0C,UAAU,CAACtB,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAIM,QAAQ,GAAG5B,CAAC,CAAC6B,KAAK,CAAC,CAAC;IACxB,IAAImC,YAAY,GAAG,EAAE;IACrB1C,IAAI,CAACC,QAAQ,GAAG,UAAS0C,QAAQ,EAAElB,IAAI,EAAE;MACvCiB,YAAY,CAACE,IAAI,CAACD,QAAQ,CAAC;MAE3B,IAAI,CAAC/D,CAAC,CAACsB,WAAW,CAACF,IAAI,CAAC8B,KAAK,CAAC,IAAIY,YAAY,CAACG,MAAM,KAAK7C,IAAI,CAAC8B,KAAK,EAAE;QACpEL,IAAI,CAAC,CAAC;MACR;IACF,CAAC;IAEDzB,IAAI,CAACyB,IAAI,GAAG,UAASL,KAAK,EAAE;MAC1B,IAAIxC,CAAC,CAACsB,WAAW,CAACkB,KAAK,CAAC,EAAE;QACxBd,QAAQ,CAACW,OAAO,CAACyB,YAAY,CAAC;MAChC,CAAC,MAAM;QACLpC,QAAQ,CAACe,MAAM,CAACD,KAAK,CAAC;MACxB;IACF,CAAC;IAED,IAAIxC,CAAC,CAAC0C,UAAU,CAACrB,QAAQ,CAAC,EAAE;MAC1BK,QAAQ,CAACM,OAAO,CAACW,OAAO,CAACtB,QAAQ,CAAC;IACpC;IAEA,IAAI,CAACuB,IAAI,CAACxB,IAAI,CAAC;IACf,OAAOM,QAAQ,CAACM,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACApB,0BAA0B,CAAC2C,IAAI,GAAG,SAASA,IAAIA,CAACnC,IAAI,EAAEC,QAAQ,EAAE;IAC9D,IAAIrB,CAAC,CAAC0C,UAAU,CAACtB,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IAEjB,IAAIM,QAAQ,GAAG5B,CAAC,CAAC6B,KAAK,CAAC,CAAC;IACxB,IAAIC,IAAI,GAAGtB,MAAM,CAACuB,EAAE,CAAC;MACnB,WAAW,EAAET,IAAI,CAAC8C,SAAS;MAC3B,MAAM,EAAE9C,IAAI,CAAC+C,UAAU;MACvB,UAAU,EAAE/C,IAAI,CAAC+B;IACnB,CAAC,CAAC;IAEF,IAAInB,OAAO,GAAG,IAAI,CAACjB,QAAQ,CAACwC,IAAI,CAAC;MAACtB,GAAG,EAAE,IAAI,CAAChB,IAAI;MAAEiB,MAAM,EAAE,KAAK;MAAEkC,MAAM,EAAExC;IAAI,CAAC,CAAC;IAE/EI,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;MACvCV,QAAQ,CAACW,OAAO,CAAC,IAAI7B,kBAAkB,CAAC,IAAI,CAACO,QAAQ,EAAEqB,OAAO,EAAE,IAAI,CAACpB,SAAS,CAAC,CAAC;IAClF,CAAC,CAACsB,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;MAC5Bd,QAAQ,CAACe,MAAM,CAACD,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIxC,CAAC,CAAC0C,UAAU,CAACrB,QAAQ,CAAC,EAAE;MAC1BK,QAAQ,CAACM,OAAO,CAACW,OAAO,CAACtB,QAAQ,CAAC;IACpC;IAEA,OAAOK,QAAQ,CAACM,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACApB,0BAA0B,CAACyD,OAAO,GAAG,SAASA,OAAOA,CAACC,SAAS,EAAEjD,QAAQ,EAAE;IACzE,IAAIK,QAAQ,GAAG5B,CAAC,CAAC6B,KAAK,CAAC,CAAC;IAExB,IAAIK,OAAO,GAAG,IAAI,CAACjB,QAAQ,CAACwD,OAAO,CAACC,MAAM,CAACC,OAAO,CAAC;MAACvC,MAAM,EAAE,KAAK;MAAED,GAAG,EAAEqC;IAAS,CAAC,CAAC;IAEnFtC,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;MACvCV,QAAQ,CAACW,OAAO,CAAC,IAAI7B,kBAAkB,CAAC,IAAI,CAACO,QAAQ,EAAEqB,OAAO,EAAE,IAAI,CAACpB,SAAS,CAAC,CAAC;IAClF,CAAC,CAACsB,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;MAC5Bd,QAAQ,CAACe,MAAM,CAACD,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIxC,CAAC,CAAC0C,UAAU,CAACrB,QAAQ,CAAC,EAAE;MAC1BK,QAAQ,CAACM,OAAO,CAACW,OAAO,CAACtB,QAAQ,CAAC;IACpC;IAEA,OAAOK,QAAQ,CAACM,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACApB,0BAA0B,CAACE,GAAG,GAAG,SAASA,GAAGA,CAACD,GAAG,EAAE;IACjD,OAAO,IAAIH,qBAAqB,CAAC,IAAI,CAACK,QAAQ,EAAEF,GAAG,CAAC;EACtD,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAD,0BAA0B,CAAC8D,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;IACpD,OAAO,IAAI,CAAC1D,SAAS;EACvB,CAAC;EAEDJ,0BAA0B,CAACX,IAAI,CAAC0E,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EACpEC,OAAO,EAAE;IACX,OAAO7E,IAAI,CAAC0E,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;EAC7C,CAAC;EAED,OAAOlE,0BAA0B;AACnC,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,kBAAkB,GAAG,SAASA,kBAAkBA,CAACG,OAAO,EAAEoE,QAAQ,EAAEC,QAAQ,EAAE;EAC5E;EACA,IAAI,CAAChE,SAAS,GAAGgE,QAAQ;EAEzB7E,IAAI,CAAC8E,SAAS,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI,EAAExE,OAAO,EAAEoE,QAAQ,EAAE,IAAI,CAAC/D,SAAS,CAAC;AAC1E,CAAC;AAEDhB,CAAC,CAACoF,MAAM,CAAC5E,kBAAkB,CAACyE,SAAS,EAAE9E,IAAI,CAAC8E,SAAS,CAAC;AACtDzE,kBAAkB,CAACyE,SAAS,CAACC,WAAW,GAAG1E,kBAAkB;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,kBAAkB,CAACyE,SAAS,CAACI,WAAW,GAAG,SAASA,WAAWA,CAACjD,OAAO,EAAE;EACvE,OAAO,IAAI3B,sBAAsB,CAAC,IAAI,CAACM,QAAQ,EAAEqB,OAAO,CAAC;AAC3D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5B,kBAAkB,CAACyE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EACtD,IAAIY,KAAK,GAAG,CAAC,CAAC;EACdtF,CAAC,CAACuF,MAAM,CAAC,IAAI,EAAE,UAASC,KAAK,EAAEC,GAAG,EAAE;IAClC,IAAI,CAACzF,CAAC,CAAC0F,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,IAAI,CAAEzF,CAAC,CAAC0C,UAAU,CAAC8C,KAAK,CAAC,EAAE;MACpDF,KAAK,CAACG,GAAG,CAAC,GAAGD,KAAK;IACpB;EACF,CAAC,CAAC;EACF,OAAOF,KAAK;AACd,CAAC;AAED9E,kBAAkB,CAACyE,SAAS,CAAChF,IAAI,CAAC0E,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EACtEC,OAAO,EAAE;EACX,OAAO7E,IAAI,CAAC0E,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArE,sBAAsB,GAAG,SAASA,sBAAsBA,CAACE,OAAO,EAAEyB,OAAO,EAAEvB,GAAG,EACpB;EACxD,IAAI,CAACE,QAAQ,GAAGJ,OAAO;;EAEvB;EACA,IAAI,CAACE,GAAG,GAAGuB,OAAO,CAACvB,GAAG,CAAC,CAAC;EACxB,IAAI,CAAC8E,UAAU,GAAGvD,OAAO,CAACwD,WAAW,CAAC,CAAC;EACvC,IAAI,CAACC,YAAY,GAAGzD,OAAO,CAAC0D,aAAa,CAAC,CAAC;EAC3C,IAAI,CAACC,WAAW,GAAG3D,OAAO,CAAC2D,WAAW,CAAC,CAAC;EACxC,IAAI,CAACC,aAAa,GAAG5D,OAAO,CAAC4D,aAAa,CAAC,CAAC;EAC5C,IAAI,CAACC,UAAU,GAAG7D,OAAO,CAAC8D,WAAW,CAAC,CAAC;EACvC,IAAI,CAACC,WAAW,GAAG/F,WAAW,CAACgG,eAAe,CAAChE,OAAO,CAACiE,YAAY,CAAC,CAAC,CAAC;EACtE,IAAI,CAACC,WAAW,GAAGlG,WAAW,CAACgG,eAAe,CAAChE,OAAO,CAACmE,YAAY,CAAC,CAAC,CAAC;EACtE,IAAI,CAACC,GAAG,GAAGpE,OAAO,CAACoE,GAAG,CAAC,CAAC;EACxB,IAAI,CAACC,KAAK,GAAGrE,OAAO,CAACqE,KAAK,CAAC,CAAC;;EAE5B;EACA,IAAI,CAACC,QAAQ,GAAGC,SAAS;EACzB,IAAI,CAAC3F,SAAS,GAAG;IAACH,GAAG,EAAEA,GAAG,IAAI,IAAI,CAACA;EAAK,CAAC;AAC3C,CAAC;AAED+F,MAAM,CAACC,cAAc,CAACpG,sBAAsB,CAACwE,SAAS,EACpD,QAAQ,EAAE;EACVnE,GAAG,EAAE,SAAAA,CAAA,EAAW;IACd,IAAI,CAAC,IAAI,CAAC4F,QAAQ,EAAE;MAClB,IAAI,CAACA,QAAQ,GAAG,IAAIhG,qBAAqB,CAAC,IAAI,CAACK,QAAQ,EAAE,IAAI,CAACC,SAAS,CAACH,GAAG,CAAC;IAC9E;IAEA,OAAO,IAAI,CAAC6F,QAAQ;EACtB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjG,sBAAsB,CAACwE,SAAS,CAAC6B,MAAM,GAAG,SAASA,MAAMA,CAACzF,QAAQ,EAAE;EAClE,OAAO,IAAI,CAAC0F,MAAM,CAACD,MAAM,CAACzF,QAAQ,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,sBAAsB,CAACwE,SAAS,CAAC+B,KAAK,GAAG,SAASA,KAAKA,CAAC3F,QAAQ,EAAE;EAChE,OAAO,IAAI,CAAC0F,MAAM,CAACC,KAAK,CAAC3F,QAAQ,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,sBAAsB,CAACwE,SAAS,CAACgC,MAAM,GAAG,SAASA,MAAMA,CAAC7F,IAAI,EAAEC,QAAQ,EAAE;EACxE,OAAO,IAAI,CAAC0F,MAAM,CAACE,MAAM,CAAC7F,IAAI,EAAEC,QAAQ,CAAC;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,sBAAsB,CAACwE,SAAS,CAACiC,UAAU,GAAG,SAASA,UAAUA,CAAA,EAAG;EAClE,OAAO,IAAI,CAACH,MAAM,CAACG,UAAU;AAC/B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAzG,sBAAsB,CAACwE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EAC1D,IAAIY,KAAK,GAAG,CAAC,CAAC;EACdtF,CAAC,CAACuF,MAAM,CAAC,IAAI,EAAE,UAASC,KAAK,EAAEC,GAAG,EAAE;IAClC,IAAI,CAACzF,CAAC,CAAC0F,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,IAAI,CAAEzF,CAAC,CAAC0C,UAAU,CAAC8C,KAAK,CAAC,EAAE;MACpDF,KAAK,CAACG,GAAG,CAAC,GAAGD,KAAK;IACpB;EACF,CAAC,CAAC;EACF,OAAOF,KAAK;AACd,CAAC;AAED7E,sBAAsB,CAACwE,SAAS,CAAChF,IAAI,CAAC0E,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EAC1EC,OAAO,EAAE;EACX,OAAO7E,IAAI,CAAC0E,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACApE,qBAAqB,GAAG,SAASA,qBAAqBA,CAACC,OAAO,EAAEE,GAAG,EAAE;EACnE,IAAI,CAACE,QAAQ,GAAGJ,OAAO;;EAEvB;EACA,IAAI,CAACK,SAAS,GAAG;IAACH,GAAG,EAAEA;EAAK,CAAC;EAC7B,IAAI,CAACI,IAAI,GAAGjB,CAAC,CAACkB,QAAQ,CACpB,6BAA6B,CAAC;EAChC,CAAC,CAAC,IAAI,CAACF,SAAS,CAAC;;EAEjB;EACA,IAAI,CAACmG,WAAW,GAAGR,SAAS;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjG,qBAAqB,CAACuE,SAAS,CAAC6B,MAAM,GAAG,SAASA,MAAMA,CAACzF,QAAQ,EAAE;EACjE,IAAIK,QAAQ,GAAG5B,CAAC,CAAC6B,KAAK,CAAC,CAAC;EACxB,IAAIK,OAAO,GAAG,IAAI,CAACjB,QAAQ,CAAC+F,MAAM,CAAC;IAAC7E,GAAG,EAAE,IAAI,CAAChB,IAAI;IAAEiB,MAAM,EAAE;EAAQ,CAAC,CAAC;EAEtEF,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;IACvCV,QAAQ,CAACW,OAAO,CAACD,OAAO,CAAC;EAC3B,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;IAC5Bd,QAAQ,CAACe,MAAM,CAACD,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIxC,CAAC,CAAC0C,UAAU,CAACrB,QAAQ,CAAC,EAAE;IAC1BK,QAAQ,CAACM,OAAO,CAACW,OAAO,CAACtB,QAAQ,CAAC;EACpC;EAEA,OAAOK,QAAQ,CAACM,OAAO;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtB,qBAAqB,CAACuE,SAAS,CAAC+B,KAAK,GAAG,SAASA,KAAKA,CAAC3F,QAAQ,EAAE;EAC/D,IAAIK,QAAQ,GAAG5B,CAAC,CAAC6B,KAAK,CAAC,CAAC;EACxB,IAAIK,OAAO,GAAG,IAAI,CAACjB,QAAQ,CAACiG,KAAK,CAAC;IAAC/E,GAAG,EAAE,IAAI,CAAChB,IAAI;IAAEiB,MAAM,EAAE;EAAK,CAAC,CAAC;EAElEF,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;IACvCV,QAAQ,CAACW,OAAO,CAAC,IAAI5B,sBAAsB,CAAC,IAAI,CAACM,QAAQ,EAAEqB,OAAO,EAAE,IAAI,CAACpB,SAAS,CAACH,GAAG,CAAC,CAAC;EAC1F,CAAC,CAACyB,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;IAC5Bd,QAAQ,CAACe,MAAM,CAACD,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIxC,CAAC,CAAC0C,UAAU,CAACrB,QAAQ,CAAC,EAAE;IAC1BK,QAAQ,CAACM,OAAO,CAACW,OAAO,CAACtB,QAAQ,CAAC;EACpC;EAEA,OAAOK,QAAQ,CAACM,OAAO;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtB,qBAAqB,CAACuE,SAAS,CAACgC,MAAM,GAAG,SAASA,MAAMA,CAAC7F,IAAI,EAAEC,QAAQ,EAAE;EACvE,IAAIrB,CAAC,CAAC0C,UAAU,CAACtB,IAAI,CAAC,EAAE;IACtBC,QAAQ,GAAGD,IAAI;IACfA,IAAI,GAAG,CAAC,CAAC;EACX;EACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;EAEjB,IAAIM,QAAQ,GAAG5B,CAAC,CAAC6B,KAAK,CAAC,CAAC;EACxB,IAAIC,IAAI,GAAGtB,MAAM,CAACuB,EAAE,CAAC;IACnB,eAAe,EAAExB,SAAS,CAAC0B,MAAM,CAAC/B,CAAC,CAACc,GAAG,CAACM,IAAI,EAAE,eAAe,CAAC,CAAC;IAC/D,YAAY,EAAEpB,CAAC,CAACc,GAAG,CAACM,IAAI,EAAE,YAAY;EACxC,CAAC,CAAC;EAEF,IAAIY,OAAO,GAAG,IAAI,CAACjB,QAAQ,CAACkG,MAAM,CAAC;IAAChF,GAAG,EAAE,IAAI,CAAChB,IAAI;IAAEiB,MAAM,EAAE,MAAM;IAAEN,IAAI,EAAEA;EAAI,CAAC,CAAC;EAEhFI,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;IACvCV,QAAQ,CAACW,OAAO,CAAC,IAAI5B,sBAAsB,CAAC,IAAI,CAACM,QAAQ,EAAEqB,OAAO,EAAE,IAAI,CAACpB,SAAS,CAACH,GAAG,CAAC,CAAC;EAC1F,CAAC,CAACyB,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;IAC5Bd,QAAQ,CAACe,MAAM,CAACD,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIxC,CAAC,CAAC0C,UAAU,CAACrB,QAAQ,CAAC,EAAE;IAC1BK,QAAQ,CAACM,OAAO,CAACW,OAAO,CAACtB,QAAQ,CAAC;EACpC;EAEA,OAAOK,QAAQ,CAACM,OAAO;AACzB,CAAC;AAED4E,MAAM,CAACC,cAAc,CAACnG,qBAAqB,CAACuE,SAAS,EACnD,YAAY,EAAE;EACdnE,GAAG,EAAE,SAAAA,CAAA,EAAW;IACd,IAAI,CAAC,IAAI,CAACqG,WAAW,EAAE;MACrB,IAAI,CAACA,WAAW,GAAG,IAAIjH,2BAA2B,CAAC,IAAI,CAACa,QAAQ,EAAE,IAAI,CAACC,SAAS,CAACH,GAAG,CAAC;IACvF;IACA,OAAO,IAAI,CAACsG,WAAW;EACzB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAzG,qBAAqB,CAACuE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EACzD,OAAO,IAAI,CAAC1D,SAAS;AACvB,CAAC;AAEDN,qBAAqB,CAACuE,SAAS,CAAChF,IAAI,CAAC0E,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EACzEC,OAAO,EAAE;EACX,OAAO7E,IAAI,CAAC0E,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;AAEDsC,MAAM,CAACC,OAAO,GAAG;EACf9G,kBAAkB,EAAEA,kBAAkB;EACtCC,kBAAkB,EAAEA,kBAAkB;EACtCC,sBAAsB,EAAEA,sBAAsB;EAC9CC,qBAAqB,EAAEA;AACzB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}