{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar MessageList = require('./session/message').MessageList;\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar ParticipantList = require('./session/participant').ParticipantList;\nvar WebhookList = require('./session/webhook').WebhookList;\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar SessionList;\nvar SessionPage;\nvar SessionInstance;\nvar SessionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Messaging.V1.SessionList\n *\n * @param {Twilio.Messaging.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nSessionList = function SessionList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function sessions\n   * @memberof Twilio.Messaging.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Messaging.V1.SessionContext}\n   */\n  /* jshint ignore:end */\n  function SessionListInstance(sid) {\n    return SessionListInstance.get(sid);\n  }\n  SessionListInstance._version = version;\n  // Path Solution\n  SessionListInstance._solution = {};\n  SessionListInstance._uri = _.template('/Sessions' // jshint ignore:line\n  )(SessionListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a SessionInstance\n   *\n   * @function create\n   * @memberof Twilio.Messaging.V1.SessionList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.messagingServiceSid -\n   *          The unique id of the SMS Service this session belongs to.\n   * @param {string} [opts.friendlyName] - The human-readable name of this session.\n   * @param {string} [opts.attributes] -\n   *          An optional string metadata field you can use to store any data you wish.\n   * @param {Date} [opts.dateCreated] - The date that this resource was created.\n   * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n   * @param {string} [opts.createdBy] - Identity of the session's creator.\n   * @param {string} [opts.twilioAddress] -\n   *          Twilio address the participant is contacting to.\n   * @param {string} [opts.userAddress] - Address the participant is contacting from.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SessionInstance\n   */\n  /* jshint ignore:end */\n  SessionListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.messagingServiceSid)) {\n      throw new Error('Required parameter \"opts.messagingServiceSid\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Attributes': _.get(opts, 'attributes'),\n      'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n      'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n      'CreatedBy': _.get(opts, 'createdBy'),\n      'TwilioAddress': _.get(opts, 'twilioAddress'),\n      'UserAddress': _.get(opts, 'userAddress')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SessionInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams SessionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Messaging.V1.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SessionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SessionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Messaging.V1.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SessionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SessionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Messaging.V1.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SessionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SessionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SessionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Messaging.V1.SessionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SessionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SessionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a session\n   *\n   * @function get\n   * @memberof Twilio.Messaging.V1.SessionList#\n   *\n   * @param {string} sid -\n   *          A 34 character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Messaging.V1.SessionContext}\n   */\n  /* jshint ignore:end */\n  SessionListInstance.get = function get(sid) {\n    return new SessionContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Messaging.V1.SessionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SessionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  SessionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return SessionListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Messaging.V1.SessionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SessionSolution} solution - Path solution\n *\n * @returns SessionPage\n */\n/* jshint ignore:end */\nSessionPage = function SessionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(SessionPage.prototype, Page.prototype);\nSessionPage.prototype.constructor = SessionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SessionInstance\n *\n * @function getInstance\n * @memberof Twilio.Messaging.V1.SessionPage#\n *\n * @param {SessionPayload} payload - Payload response from the API\n *\n * @returns SessionInstance\n */\n/* jshint ignore:end */\nSessionPage.prototype.getInstance = function getInstance(payload) {\n  return new SessionInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.SessionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSessionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nSessionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Messaging.V1.SessionInstance\n *\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} accountSid -\n *          The unique id of the Account responsible for this session.\n * @property {string} serviceSid -\n *          The unique id of the Chat Service this session belongs to.\n * @property {string} messagingServiceSid -\n *          The unique id of the SMS Service this session belongs to.\n * @property {string} friendlyName - The human-readable name of this session.\n * @property {string} attributes -\n *          An optional string metadata field you can use to store any data you wish.\n * @property {string} createdBy - Identity of the session's creator.\n * @property {Date} dateCreated - The date that this resource was created.\n * @property {Date} dateUpdated - The date that this resource was last updated.\n * @property {string} url - An absolute URL for this session.\n * @property {string} links -\n *          Absolute URLs to access the Participants and Messages for this Session.\n *\n * @param {V1} version - Version of the resource\n * @param {SessionPayload} payload - The instance payload\n * @param {sid} sid - A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nSessionInstance = function SessionInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.messagingServiceSid = payload.messaging_service_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n  this.createdBy = payload.created_by; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(SessionInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new SessionContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SessionInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.SessionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a SessionInstance\n *\n * @function remove\n * @memberof Twilio.Messaging.V1.SessionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a SessionInstance\n *\n * @function update\n * @memberof Twilio.Messaging.V1.SessionInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - The human-readable name of this session.\n * @param {string} [opts.attributes] -\n *          An optional string metadata field you can use to store any data you wish.\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.createdBy] - Identity of the session's creator.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Messaging.V1.SessionInstance#\n *\n * @returns {Twilio.Messaging.V1.SessionContext.ParticipantList}\n */\n/* jshint ignore:end */\nSessionInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n\n/* jshint ignore:start */\n/**\n * Access the messages\n *\n * @function messages\n * @memberof Twilio.Messaging.V1.SessionInstance#\n *\n * @returns {Twilio.Messaging.V1.SessionContext.MessageList}\n */\n/* jshint ignore:end */\nSessionInstance.prototype.messages = function messages() {\n  return this._proxy.messages;\n};\n\n/* jshint ignore:start */\n/**\n * Access the webhooks\n *\n * @function webhooks\n * @memberof Twilio.Messaging.V1.SessionInstance#\n *\n * @returns {Twilio.Messaging.V1.SessionContext.WebhookList}\n */\n/* jshint ignore:end */\nSessionInstance.prototype.webhooks = function webhooks() {\n  return this._proxy.webhooks;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.SessionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSessionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nSessionInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Messaging.V1.SessionContext\n *\n * @property {Twilio.Messaging.V1.SessionContext.ParticipantList} participants -\n *          participants resource\n * @property {Twilio.Messaging.V1.SessionContext.MessageList} messages -\n *          messages resource\n * @property {Twilio.Messaging.V1.SessionContext.WebhookList} webhooks -\n *          webhooks resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nSessionContext = function SessionContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = _.template('/Sessions/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._participants = undefined;\n  this._messages = undefined;\n  this._webhooks = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SessionInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.SessionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SessionInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a SessionInstance\n *\n * @function remove\n * @memberof Twilio.Messaging.V1.SessionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a SessionInstance\n *\n * @function update\n * @memberof Twilio.Messaging.V1.SessionContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - The human-readable name of this session.\n * @param {string} [opts.attributes] -\n *          An optional string metadata field you can use to store any data you wish.\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.createdBy] - Identity of the session's creator.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Attributes': _.get(opts, 'attributes'),\n    'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n    'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n    'CreatedBy': _.get(opts, 'createdBy')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SessionInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(SessionContext.prototype, 'participants', {\n  get: function () {\n    if (!this._participants) {\n      this._participants = new ParticipantList(this._version, this._solution.sid);\n    }\n    return this._participants;\n  }\n});\nObject.defineProperty(SessionContext.prototype, 'messages', {\n  get: function () {\n    if (!this._messages) {\n      this._messages = new MessageList(this._version, this._solution.sid);\n    }\n    return this._messages;\n  }\n});\nObject.defineProperty(SessionContext.prototype, 'webhooks', {\n  get: function () {\n    if (!this._webhooks) {\n      this._webhooks = new WebhookList(this._version, this._solution.sid);\n    }\n    return this._webhooks;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.SessionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSessionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nSessionContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  SessionList: SessionList,\n  SessionPage: SessionPage,\n  SessionInstance: SessionInstance,\n  SessionContext: SessionContext\n};","map":{"version":3,"names":["Q","require","_","util","MessageList","Page","ParticipantList","WebhookList","deserialize","serialize","values","SessionList","SessionPage","SessionInstance","SessionContext","version","SessionListInstance","sid","get","_version","_solution","_uri","template","create","opts","callback","isUndefined","Error","messagingServiceSid","deferred","defer","data","of","iso8601DateTime","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","pageLimit","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","serviceSid","service_sid","messaging_service_sid","friendlyName","friendly_name","attributes","createdBy","created_by","dateCreated","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","participants","messages","webhooks","_participants","_messages","_webhooks","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/messaging/v1/session.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar MessageList = require('./session/message').MessageList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar ParticipantList = require('./session/participant').ParticipantList;\nvar WebhookList = require('./session/webhook').WebhookList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar SessionList;\nvar SessionPage;\nvar SessionInstance;\nvar SessionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Messaging.V1.SessionList\n *\n * @param {Twilio.Messaging.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nSessionList = function SessionList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function sessions\n   * @memberof Twilio.Messaging.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Messaging.V1.SessionContext}\n   */\n  /* jshint ignore:end */\n  function SessionListInstance(sid) {\n    return SessionListInstance.get(sid);\n  }\n\n  SessionListInstance._version = version;\n  // Path Solution\n  SessionListInstance._solution = {};\n  SessionListInstance._uri = _.template(\n    '/Sessions' // jshint ignore:line\n  )(SessionListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a SessionInstance\n   *\n   * @function create\n   * @memberof Twilio.Messaging.V1.SessionList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.messagingServiceSid -\n   *          The unique id of the SMS Service this session belongs to.\n   * @param {string} [opts.friendlyName] - The human-readable name of this session.\n   * @param {string} [opts.attributes] -\n   *          An optional string metadata field you can use to store any data you wish.\n   * @param {Date} [opts.dateCreated] - The date that this resource was created.\n   * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n   * @param {string} [opts.createdBy] - Identity of the session's creator.\n   * @param {string} [opts.twilioAddress] -\n   *          Twilio address the participant is contacting to.\n   * @param {string} [opts.userAddress] - Address the participant is contacting from.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SessionInstance\n   */\n  /* jshint ignore:end */\n  SessionListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.messagingServiceSid)) {\n      throw new Error('Required parameter \"opts.messagingServiceSid\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Attributes': _.get(opts, 'attributes'),\n      'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n      'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n      'CreatedBy': _.get(opts, 'createdBy'),\n      'TwilioAddress': _.get(opts, 'twilioAddress'),\n      'UserAddress': _.get(opts, 'userAddress')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SessionInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams SessionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Messaging.V1.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SessionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SessionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Messaging.V1.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SessionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SessionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Messaging.V1.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SessionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SessionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SessionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Messaging.V1.SessionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SessionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SessionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a session\n   *\n   * @function get\n   * @memberof Twilio.Messaging.V1.SessionList#\n   *\n   * @param {string} sid -\n   *          A 34 character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Messaging.V1.SessionContext}\n   */\n  /* jshint ignore:end */\n  SessionListInstance.get = function get(sid) {\n    return new SessionContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Messaging.V1.SessionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SessionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SessionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SessionListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Messaging.V1.SessionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SessionSolution} solution - Path solution\n *\n * @returns SessionPage\n */\n/* jshint ignore:end */\nSessionPage = function SessionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SessionPage.prototype, Page.prototype);\nSessionPage.prototype.constructor = SessionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SessionInstance\n *\n * @function getInstance\n * @memberof Twilio.Messaging.V1.SessionPage#\n *\n * @param {SessionPayload} payload - Payload response from the API\n *\n * @returns SessionInstance\n */\n/* jshint ignore:end */\nSessionPage.prototype.getInstance = function getInstance(payload) {\n  return new SessionInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.SessionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSessionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSessionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Messaging.V1.SessionInstance\n *\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} accountSid -\n *          The unique id of the Account responsible for this session.\n * @property {string} serviceSid -\n *          The unique id of the Chat Service this session belongs to.\n * @property {string} messagingServiceSid -\n *          The unique id of the SMS Service this session belongs to.\n * @property {string} friendlyName - The human-readable name of this session.\n * @property {string} attributes -\n *          An optional string metadata field you can use to store any data you wish.\n * @property {string} createdBy - Identity of the session's creator.\n * @property {Date} dateCreated - The date that this resource was created.\n * @property {Date} dateUpdated - The date that this resource was last updated.\n * @property {string} url - An absolute URL for this session.\n * @property {string} links -\n *          Absolute URLs to access the Participants and Messages for this Session.\n *\n * @param {V1} version - Version of the resource\n * @param {SessionPayload} payload - The instance payload\n * @param {sid} sid - A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nSessionInstance = function SessionInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.messagingServiceSid = payload.messaging_service_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n  this.createdBy = payload.created_by; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(SessionInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new SessionContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SessionInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.SessionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a SessionInstance\n *\n * @function remove\n * @memberof Twilio.Messaging.V1.SessionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a SessionInstance\n *\n * @function update\n * @memberof Twilio.Messaging.V1.SessionInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - The human-readable name of this session.\n * @param {string} [opts.attributes] -\n *          An optional string metadata field you can use to store any data you wish.\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.createdBy] - Identity of the session's creator.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Messaging.V1.SessionInstance#\n *\n * @returns {Twilio.Messaging.V1.SessionContext.ParticipantList}\n */\n/* jshint ignore:end */\nSessionInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n\n/* jshint ignore:start */\n/**\n * Access the messages\n *\n * @function messages\n * @memberof Twilio.Messaging.V1.SessionInstance#\n *\n * @returns {Twilio.Messaging.V1.SessionContext.MessageList}\n */\n/* jshint ignore:end */\nSessionInstance.prototype.messages = function messages() {\n  return this._proxy.messages;\n};\n\n/* jshint ignore:start */\n/**\n * Access the webhooks\n *\n * @function webhooks\n * @memberof Twilio.Messaging.V1.SessionInstance#\n *\n * @returns {Twilio.Messaging.V1.SessionContext.WebhookList}\n */\n/* jshint ignore:end */\nSessionInstance.prototype.webhooks = function webhooks() {\n  return this._proxy.webhooks;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.SessionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSessionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSessionInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Messaging.V1.SessionContext\n *\n * @property {Twilio.Messaging.V1.SessionContext.ParticipantList} participants -\n *          participants resource\n * @property {Twilio.Messaging.V1.SessionContext.MessageList} messages -\n *          messages resource\n * @property {Twilio.Messaging.V1.SessionContext.WebhookList} webhooks -\n *          webhooks resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nSessionContext = function SessionContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = _.template(\n    '/Sessions/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._participants = undefined;\n  this._messages = undefined;\n  this._webhooks = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SessionInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.SessionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SessionInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a SessionInstance\n *\n * @function remove\n * @memberof Twilio.Messaging.V1.SessionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a SessionInstance\n *\n * @function update\n * @memberof Twilio.Messaging.V1.SessionContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - The human-readable name of this session.\n * @param {string} [opts.attributes] -\n *          An optional string metadata field you can use to store any data you wish.\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.createdBy] - Identity of the session's creator.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Attributes': _.get(opts, 'attributes'),\n    'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n    'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n    'CreatedBy': _.get(opts, 'createdBy')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SessionInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(SessionContext.prototype,\n  'participants', {\n  get: function() {\n    if (!this._participants) {\n      this._participants = new ParticipantList(this._version, this._solution.sid);\n    }\n    return this._participants;\n  }\n});\n\nObject.defineProperty(SessionContext.prototype,\n  'messages', {\n  get: function() {\n    if (!this._messages) {\n      this._messages = new MessageList(this._version, this._solution.sid);\n    }\n    return this._messages;\n  }\n});\n\nObject.defineProperty(SessionContext.prototype,\n  'webhooks', {\n  get: function() {\n    if (!this._webhooks) {\n      this._webhooks = new WebhookList(this._version, this._solution.sid);\n    }\n    return this._webhooks;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.SessionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSessionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSessionContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SessionList: SessionList,\n  SessionPage: SessionPage,\n  SessionInstance: SessionInstance,\n  SessionContext: SessionContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}