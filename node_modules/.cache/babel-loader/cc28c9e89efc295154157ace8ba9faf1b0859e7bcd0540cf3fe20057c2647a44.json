{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar FaxMediaList = require('./fax/faxMedia').FaxMediaList;\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar FaxList;\nvar FaxPage;\nvar FaxInstance;\nvar FaxContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the FaxList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxList\n *\n * @param {Twilio.Fax.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nFaxList = function FaxList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function faxes\n   * @memberof Twilio.Fax.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Fax.V1.FaxContext}\n   */\n  /* jshint ignore:end */\n  function FaxListInstance(sid) {\n    return FaxListInstance.get(sid);\n  }\n  FaxListInstance._version = version;\n  // Path Solution\n  FaxListInstance._solution = {};\n  FaxListInstance._uri = _.template('/Faxes' // jshint ignore:line\n  )(FaxListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams FaxInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.from] -\n   *          Retrieve only those faxes sent from this phone number\n   * @param {string} [opts.to] - Retrieve only those faxes sent to this phone number\n   * @param {Date} [opts.dateCreatedOnOrBefore] -\n   *          Retrieve only faxes created on or before this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Retrieve only faxes created after this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  FaxListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists FaxInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.from] -\n   *          Retrieve only those faxes sent from this phone number\n   * @param {string} [opts.to] - Retrieve only those faxes sent to this phone number\n   * @param {Date} [opts.dateCreatedOnOrBefore] -\n   *          Retrieve only faxes created on or before this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Retrieve only faxes created after this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FaxListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of FaxInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.from] -\n   *          Retrieve only those faxes sent from this phone number\n   * @param {string} [opts.to] - Retrieve only those faxes sent to this phone number\n   * @param {Date} [opts.dateCreatedOnOrBefore] -\n   *          Retrieve only faxes created on or before this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Retrieve only faxes created after this date\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FaxListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'From': _.get(opts, 'from'),\n      'To': _.get(opts, 'to'),\n      'DateCreatedOnOrBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedOnOrBefore')),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FaxPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of FaxInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FaxListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FaxPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a FaxInstance\n   *\n   * @function create\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to - The phone number to receive the fax\n   * @param {string} opts.mediaUrl -\n   *          The Twilio-hosted URL of the PDF that contains the fax\n   * @param {fax.quality} [opts.quality] - The quality of this fax\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.from] - The number the fax was sent from\n   * @param {string} [opts.sipAuthUsername] - The username for SIP authentication\n   * @param {string} [opts.sipAuthPassword] - The password for SIP authentication\n   * @param {boolean} [opts.storeMedia] - Whether to store a copy of the sent media\n   * @param {number} [opts.ttl] - How long in minutes to try to send the fax\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FaxInstance\n   */\n  /* jshint ignore:end */\n  FaxListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n    if (_.isUndefined(opts.mediaUrl)) {\n      throw new Error('Required parameter \"opts.mediaUrl\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'MediaUrl': _.get(opts, 'mediaUrl'),\n      'Quality': _.get(opts, 'quality'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'From': _.get(opts, 'from'),\n      'SipAuthUsername': _.get(opts, 'sipAuthUsername'),\n      'SipAuthPassword': _.get(opts, 'sipAuthPassword'),\n      'StoreMedia': serialize.bool(_.get(opts, 'storeMedia')),\n      'Ttl': _.get(opts, 'ttl')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FaxInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a fax\n   *\n   * @function get\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Fax.V1.FaxContext}\n   */\n  /* jshint ignore:end */\n  FaxListInstance.get = function get(sid) {\n    return new FaxContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  FaxListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  FaxListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return FaxListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the FaxPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FaxSolution} solution - Path solution\n *\n * @returns FaxPage\n */\n/* jshint ignore:end */\nFaxPage = function FaxPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(FaxPage.prototype, Page.prototype);\nFaxPage.prototype.constructor = FaxPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of FaxInstance\n *\n * @function getInstance\n * @memberof Twilio.Fax.V1.FaxPage#\n *\n * @param {FaxPayload} payload - Payload response from the API\n *\n * @returns FaxInstance\n */\n/* jshint ignore:end */\nFaxPage.prototype.getInstance = function getInstance(payload) {\n  return new FaxInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFaxPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nFaxPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the FaxContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} from - The number the fax was sent from\n * @property {string} to - The phone number that received the fax\n * @property {fax.quality} quality - The quality of the fax\n * @property {string} mediaSid -\n *          The SID of the FaxMedia resource that is associated with the Fax\n * @property {string} mediaUrl -\n *          The Twilio-hosted URL that can be used to download fax media\n * @property {number} numPages - The number of pages contained in the fax document\n * @property {number} duration - The time it took to transmit the fax\n * @property {fax.status} status - The status of the fax\n * @property {fax.direction} direction - The direction of the fax\n * @property {string} apiVersion - The API version used to transmit the fax\n * @property {number} price - The fax transmission price\n * @property {string} priceUnit - The ISO 4217 currency used for billing\n * @property {Date} dateCreated -\n *          The ISO 8601 formatted date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 formatted date and time in GMT when the resource was last updated\n * @property {string} links - The URLs of the fax's related resources\n * @property {string} url - The absolute URL of the fax resource\n *\n * @param {V1} version - Version of the resource\n * @param {FaxPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nFaxInstance = function FaxInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.from = payload.from; // jshint ignore:line\n  this.to = payload.to; // jshint ignore:line\n  this.quality = payload.quality; // jshint ignore:line\n  this.mediaSid = payload.media_sid; // jshint ignore:line\n  this.mediaUrl = payload.media_url; // jshint ignore:line\n  this.numPages = deserialize.integer(payload.num_pages); // jshint ignore:line\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.direction = payload.direction; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.price = deserialize.decimal(payload.price); // jshint ignore:line\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(FaxInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new FaxContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a FaxInstance\n *\n * @function fetch\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n/* jshint ignore:end */\nFaxInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a FaxInstance\n *\n * @function update\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {fax.update_status} [opts.status] - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n/* jshint ignore:end */\nFaxInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a FaxInstance\n *\n * @function remove\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n/* jshint ignore:end */\nFaxInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the media\n *\n * @function media\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @returns {Twilio.Fax.V1.FaxContext.FaxMediaList}\n */\n/* jshint ignore:end */\nFaxInstance.prototype.media = function media() {\n  return this._proxy.media;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFaxInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nFaxInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the FaxContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxContext\n *\n * @property {Twilio.Fax.V1.FaxContext.FaxMediaList} media - media resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nFaxContext = function FaxContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = _.template('/Faxes/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._media = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a FaxInstance\n *\n * @function fetch\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n/* jshint ignore:end */\nFaxContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FaxInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a FaxInstance\n *\n * @function update\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @param {object} [opts] - Options for request\n * @param {fax.update_status} [opts.status] - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n/* jshint ignore:end */\nFaxContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FaxInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a FaxInstance\n *\n * @function remove\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n/* jshint ignore:end */\nFaxContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(FaxContext.prototype, 'media', {\n  get: function () {\n    if (!this._media) {\n      this._media = new FaxMediaList(this._version, this._solution.sid);\n    }\n    return this._media;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFaxContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nFaxContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  FaxList: FaxList,\n  FaxPage: FaxPage,\n  FaxInstance: FaxInstance,\n  FaxContext: FaxContext\n};","map":{"version":3,"names":["Q","require","_","util","FaxMediaList","Page","deserialize","serialize","values","FaxList","FaxPage","FaxInstance","FaxContext","version","FaxListInstance","sid","get","_version","_solution","_uri","template","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601DateTime","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","to","mediaUrl","bool","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","from","quality","mediaSid","media_sid","media_url","numPages","integer","num_pages","duration","status","direction","apiVersion","api_version","price","decimal","priceUnit","price_unit","dateCreated","date_created","dateUpdated","date_updated","links","url","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","media","_media","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/fax/v1/fax.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar FaxMediaList = require('./fax/faxMedia').FaxMediaList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar FaxList;\nvar FaxPage;\nvar FaxInstance;\nvar FaxContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the FaxList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxList\n *\n * @param {Twilio.Fax.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nFaxList = function FaxList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function faxes\n   * @memberof Twilio.Fax.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Fax.V1.FaxContext}\n   */\n  /* jshint ignore:end */\n  function FaxListInstance(sid) {\n    return FaxListInstance.get(sid);\n  }\n\n  FaxListInstance._version = version;\n  // Path Solution\n  FaxListInstance._solution = {};\n  FaxListInstance._uri = _.template(\n    '/Faxes' // jshint ignore:line\n  )(FaxListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams FaxInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.from] -\n   *          Retrieve only those faxes sent from this phone number\n   * @param {string} [opts.to] - Retrieve only those faxes sent to this phone number\n   * @param {Date} [opts.dateCreatedOnOrBefore] -\n   *          Retrieve only faxes created on or before this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Retrieve only faxes created after this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  FaxListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists FaxInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.from] -\n   *          Retrieve only those faxes sent from this phone number\n   * @param {string} [opts.to] - Retrieve only those faxes sent to this phone number\n   * @param {Date} [opts.dateCreatedOnOrBefore] -\n   *          Retrieve only faxes created on or before this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Retrieve only faxes created after this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FaxListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of FaxInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.from] -\n   *          Retrieve only those faxes sent from this phone number\n   * @param {string} [opts.to] - Retrieve only those faxes sent to this phone number\n   * @param {Date} [opts.dateCreatedOnOrBefore] -\n   *          Retrieve only faxes created on or before this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Retrieve only faxes created after this date\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FaxListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'From': _.get(opts, 'from'),\n      'To': _.get(opts, 'to'),\n      'DateCreatedOnOrBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedOnOrBefore')),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FaxPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of FaxInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FaxListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FaxPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a FaxInstance\n   *\n   * @function create\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to - The phone number to receive the fax\n   * @param {string} opts.mediaUrl -\n   *          The Twilio-hosted URL of the PDF that contains the fax\n   * @param {fax.quality} [opts.quality] - The quality of this fax\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.from] - The number the fax was sent from\n   * @param {string} [opts.sipAuthUsername] - The username for SIP authentication\n   * @param {string} [opts.sipAuthPassword] - The password for SIP authentication\n   * @param {boolean} [opts.storeMedia] - Whether to store a copy of the sent media\n   * @param {number} [opts.ttl] - How long in minutes to try to send the fax\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FaxInstance\n   */\n  /* jshint ignore:end */\n  FaxListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n    if (_.isUndefined(opts.mediaUrl)) {\n      throw new Error('Required parameter \"opts.mediaUrl\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'MediaUrl': _.get(opts, 'mediaUrl'),\n      'Quality': _.get(opts, 'quality'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'From': _.get(opts, 'from'),\n      'SipAuthUsername': _.get(opts, 'sipAuthUsername'),\n      'SipAuthPassword': _.get(opts, 'sipAuthPassword'),\n      'StoreMedia': serialize.bool(_.get(opts, 'storeMedia')),\n      'Ttl': _.get(opts, 'ttl')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FaxInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a fax\n   *\n   * @function get\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Fax.V1.FaxContext}\n   */\n  /* jshint ignore:end */\n  FaxListInstance.get = function get(sid) {\n    return new FaxContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  FaxListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FaxListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FaxListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FaxPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FaxSolution} solution - Path solution\n *\n * @returns FaxPage\n */\n/* jshint ignore:end */\nFaxPage = function FaxPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FaxPage.prototype, Page.prototype);\nFaxPage.prototype.constructor = FaxPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of FaxInstance\n *\n * @function getInstance\n * @memberof Twilio.Fax.V1.FaxPage#\n *\n * @param {FaxPayload} payload - Payload response from the API\n *\n * @returns FaxInstance\n */\n/* jshint ignore:end */\nFaxPage.prototype.getInstance = function getInstance(payload) {\n  return new FaxInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFaxPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFaxPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FaxContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} from - The number the fax was sent from\n * @property {string} to - The phone number that received the fax\n * @property {fax.quality} quality - The quality of the fax\n * @property {string} mediaSid -\n *          The SID of the FaxMedia resource that is associated with the Fax\n * @property {string} mediaUrl -\n *          The Twilio-hosted URL that can be used to download fax media\n * @property {number} numPages - The number of pages contained in the fax document\n * @property {number} duration - The time it took to transmit the fax\n * @property {fax.status} status - The status of the fax\n * @property {fax.direction} direction - The direction of the fax\n * @property {string} apiVersion - The API version used to transmit the fax\n * @property {number} price - The fax transmission price\n * @property {string} priceUnit - The ISO 4217 currency used for billing\n * @property {Date} dateCreated -\n *          The ISO 8601 formatted date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 formatted date and time in GMT when the resource was last updated\n * @property {string} links - The URLs of the fax's related resources\n * @property {string} url - The absolute URL of the fax resource\n *\n * @param {V1} version - Version of the resource\n * @param {FaxPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nFaxInstance = function FaxInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.from = payload.from; // jshint ignore:line\n  this.to = payload.to; // jshint ignore:line\n  this.quality = payload.quality; // jshint ignore:line\n  this.mediaSid = payload.media_sid; // jshint ignore:line\n  this.mediaUrl = payload.media_url; // jshint ignore:line\n  this.numPages = deserialize.integer(payload.num_pages); // jshint ignore:line\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.direction = payload.direction; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.price = deserialize.decimal(payload.price); // jshint ignore:line\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(FaxInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new FaxContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a FaxInstance\n *\n * @function fetch\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n/* jshint ignore:end */\nFaxInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a FaxInstance\n *\n * @function update\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {fax.update_status} [opts.status] - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n/* jshint ignore:end */\nFaxInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a FaxInstance\n *\n * @function remove\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n/* jshint ignore:end */\nFaxInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the media\n *\n * @function media\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @returns {Twilio.Fax.V1.FaxContext.FaxMediaList}\n */\n/* jshint ignore:end */\nFaxInstance.prototype.media = function media() {\n  return this._proxy.media;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFaxInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFaxInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FaxContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxContext\n *\n * @property {Twilio.Fax.V1.FaxContext.FaxMediaList} media - media resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nFaxContext = function FaxContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = _.template(\n    '/Faxes/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._media = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a FaxInstance\n *\n * @function fetch\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n/* jshint ignore:end */\nFaxContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FaxInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a FaxInstance\n *\n * @function update\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @param {object} [opts] - Options for request\n * @param {fax.update_status} [opts.status] - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n/* jshint ignore:end */\nFaxContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'Status': _.get(opts, 'status')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FaxInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a FaxInstance\n *\n * @function remove\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n/* jshint ignore:end */\nFaxContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(FaxContext.prototype,\n  'media', {\n  get: function() {\n    if (!this._media) {\n      this._media = new FaxMediaList(this._version, this._solution.sid);\n    }\n    return this._media;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFaxContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFaxContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FaxList: FaxList,\n  FaxPage: FaxPage,\n  FaxInstance: FaxInstance,\n  FaxContext: FaxContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}