{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../../base/values'); /* jshint ignore:line */\n\nvar ReservationList;\nvar ReservationPage;\nvar ReservationInstance;\nvar ReservationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ReservationList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid - The workspace_sid\n * @param {string} workerSid - The worker_sid\n */\n/* jshint ignore:end */\nReservationList = function ReservationList(version, workspaceSid, workerSid) {\n  /* jshint ignore:start */\n  /**\n   * @function reservations\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext}\n   */\n  /* jshint ignore:end */\n  function ReservationListInstance(sid) {\n    return ReservationListInstance.get(sid);\n  }\n  ReservationListInstance._version = version;\n  // Path Solution\n  ReservationListInstance._solution = {\n    workspaceSid: workspaceSid,\n    workerSid: workerSid\n  };\n  ReservationListInstance._uri = _.template('/Workspaces/<%= workspaceSid %>/Workers/<%= workerSid %>/Reservations' // jshint ignore:line\n  )(ReservationListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams ReservationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Filter by a worker's reservation status\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ReservationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Filter by a worker's reservation status\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ReservationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Filter by a worker's reservation status\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'ReservationStatus': _.get(opts, 'reservationStatus'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ReservationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ReservationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ReservationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a reservation\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext}\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.get = function get(sid) {\n    return new ReservationContext(this._version, this._solution.workspaceSid, this._solution.workerSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  ReservationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return ReservationListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ReservationPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ReservationSolution} solution - Path solution\n *\n * @returns ReservationPage\n */\n/* jshint ignore:end */\nReservationPage = function ReservationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(ReservationPage.prototype, Page.prototype);\nReservationPage.prototype.constructor = ReservationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ReservationInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationPage#\n *\n * @param {ReservationPayload} payload - Payload response from the API\n *\n * @returns ReservationInstance\n */\n/* jshint ignore:end */\nReservationPage.prototype.getInstance = function getInstance(payload) {\n  return new ReservationInstance(this._version, payload, this._solution.workspaceSid, this._solution.workerSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nReservationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nReservationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ReservationContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance\n *\n * @property {string} accountSid - The account_sid\n * @property {Date} dateCreated - The date_created\n * @property {Date} dateUpdated - The date_updated\n * @property {reservation.status} reservationStatus -\n *          Filter by a worker's reservation status\n * @property {string} sid - The sid\n * @property {string} taskSid - The task_sid\n * @property {string} workerName - The worker_name\n * @property {string} workerSid - The worker_sid\n * @property {string} workspaceSid - The workspace_sid\n * @property {string} url - The url\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {ReservationPayload} payload - The instance payload\n * @param {sid} workspaceSid - The workspace_sid\n * @param {sid} workerSid - The worker_sid\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nReservationInstance = function ReservationInstance(version, payload, workspaceSid, workerSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.reservationStatus = payload.reservation_status; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.taskSid = payload.task_sid; // jshint ignore:line\n  this.workerName = payload.worker_name; // jshint ignore:line\n  this.workerSid = payload.worker_sid; // jshint ignore:line\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid,\n    workerSid: workerSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(ReservationInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ReservationContext(this._version, this._solution.workspaceSid, this._solution.workerSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ReservationInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n/* jshint ignore:end */\nReservationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ReservationInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {reservation.status} [opts.reservationStatus] - Yes\n * @param {string} [opts.workerActivitySid] - No\n * @param {string} [opts.instruction] - Yes\n * @param {string} [opts.dequeuePostWorkActivitySid] - No\n * @param {string} [opts.dequeueFrom] - Yes\n * @param {string} [opts.dequeueRecord] - The dequeue_record\n * @param {number} [opts.dequeueTimeout] - The dequeue_timeout\n * @param {string} [opts.dequeueTo] - The dequeue_to\n * @param {string} [opts.dequeueStatusCallbackUrl] -\n *          The dequeue_status_callback_url\n * @param {string} [opts.callFrom] - Yes\n * @param {string} [opts.callRecord] - The call_record\n * @param {number} [opts.callTimeout] - The call_timeout\n * @param {string} [opts.callTo] - The call_to\n * @param {string} [opts.callUrl] - Yes\n * @param {string} [opts.callStatusCallbackUrl] - No\n * @param {boolean} [opts.callAccept] - No\n * @param {string} [opts.redirectCallSid] - The redirect_call_sid\n * @param {boolean} [opts.redirectAccept] - The redirect_accept\n * @param {string} [opts.redirectUrl] - The redirect_url\n * @param {string} [opts.to] - The to\n * @param {string} [opts.from] - The from\n * @param {string} [opts.statusCallback] - The status_callback\n * @param {string} [opts.statusCallbackMethod] - The status_callback_method\n * @param {reservation.call_status|list} [opts.statusCallbackEvent] -\n *          The status_callback_event\n * @param {number} [opts.timeout] - The timeout\n * @param {boolean} [opts.record] - The record\n * @param {boolean} [opts.muted] - The muted\n * @param {string} [opts.beep] - The beep\n * @param {boolean} [opts.startConferenceOnEnter] - The start_conference_on_enter\n * @param {boolean} [opts.endConferenceOnExit] - The end_conference_on_exit\n * @param {string} [opts.waitUrl] - The wait_url\n * @param {string} [opts.waitMethod] - The wait_method\n * @param {boolean} [opts.earlyMedia] - The early_media\n * @param {number} [opts.maxParticipants] - The max_participants\n * @param {string} [opts.conferenceStatusCallback] - The conference_status_callback\n * @param {string} [opts.conferenceStatusCallbackMethod] -\n *          The conference_status_callback_method\n * @param {reservation.conference_event|list} [opts.conferenceStatusCallbackEvent] -\n *          The conference_status_callback_event\n * @param {string} [opts.conferenceRecord] - The conference_record\n * @param {string} [opts.conferenceTrim] - The conference_trim\n * @param {string} [opts.recordingChannels] - The recording_channels\n * @param {string} [opts.recordingStatusCallback] - The recording_status_callback\n * @param {string} [opts.recordingStatusCallbackMethod] -\n *          The recording_status_callback_method\n * @param {string} [opts.conferenceRecordingStatusCallback] -\n *          The conference_recording_status_callback\n * @param {string} [opts.conferenceRecordingStatusCallbackMethod] -\n *          The conference_recording_status_callback_method\n * @param {string} [opts.region] - The region\n * @param {string} [opts.sipAuthUsername] - The sip_auth_username\n * @param {string} [opts.sipAuthPassword] - The sip_auth_password\n * @param {string|list} [opts.dequeueStatusCallbackEvent] -\n *          The dequeue_status_callback_event\n * @param {string} [opts.postWorkActivitySid] - The post_work_activity_sid\n * @param {boolean} [opts.endConferenceOnCustomerExit] -\n *          The end_conference_on_customer_exit\n * @param {boolean} [opts.beepOnCustomerEntrance] - The beep_on_customer_entrance\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n/* jshint ignore:end */\nReservationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nReservationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nReservationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ReservationContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The workspace_sid\n * @param {sid} workerSid - The worker_sid\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nReservationContext = function ReservationContext(version, workspaceSid, workerSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    workspaceSid: workspaceSid,\n    workerSid: workerSid,\n    sid: sid\n  };\n  this._uri = _.template('/Workspaces/<%= workspaceSid %>/Workers/<%= workerSid %>/Reservations/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ReservationInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n/* jshint ignore:end */\nReservationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ReservationInstance(this._version, payload, this._solution.workspaceSid, this._solution.workerSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ReservationInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {reservation.status} [opts.reservationStatus] - Yes\n * @param {string} [opts.workerActivitySid] - No\n * @param {string} [opts.instruction] - Yes\n * @param {string} [opts.dequeuePostWorkActivitySid] - No\n * @param {string} [opts.dequeueFrom] - Yes\n * @param {string} [opts.dequeueRecord] - The dequeue_record\n * @param {number} [opts.dequeueTimeout] - The dequeue_timeout\n * @param {string} [opts.dequeueTo] - The dequeue_to\n * @param {string} [opts.dequeueStatusCallbackUrl] -\n *          The dequeue_status_callback_url\n * @param {string} [opts.callFrom] - Yes\n * @param {string} [opts.callRecord] - The call_record\n * @param {number} [opts.callTimeout] - The call_timeout\n * @param {string} [opts.callTo] - The call_to\n * @param {string} [opts.callUrl] - Yes\n * @param {string} [opts.callStatusCallbackUrl] - No\n * @param {boolean} [opts.callAccept] - No\n * @param {string} [opts.redirectCallSid] - The redirect_call_sid\n * @param {boolean} [opts.redirectAccept] - The redirect_accept\n * @param {string} [opts.redirectUrl] - The redirect_url\n * @param {string} [opts.to] - The to\n * @param {string} [opts.from] - The from\n * @param {string} [opts.statusCallback] - The status_callback\n * @param {string} [opts.statusCallbackMethod] - The status_callback_method\n * @param {reservation.call_status|list} [opts.statusCallbackEvent] -\n *          The status_callback_event\n * @param {number} [opts.timeout] - The timeout\n * @param {boolean} [opts.record] - The record\n * @param {boolean} [opts.muted] - The muted\n * @param {string} [opts.beep] - The beep\n * @param {boolean} [opts.startConferenceOnEnter] - The start_conference_on_enter\n * @param {boolean} [opts.endConferenceOnExit] - The end_conference_on_exit\n * @param {string} [opts.waitUrl] - The wait_url\n * @param {string} [opts.waitMethod] - The wait_method\n * @param {boolean} [opts.earlyMedia] - The early_media\n * @param {number} [opts.maxParticipants] - The max_participants\n * @param {string} [opts.conferenceStatusCallback] - The conference_status_callback\n * @param {string} [opts.conferenceStatusCallbackMethod] -\n *          The conference_status_callback_method\n * @param {reservation.conference_event|list} [opts.conferenceStatusCallbackEvent] -\n *          The conference_status_callback_event\n * @param {string} [opts.conferenceRecord] - The conference_record\n * @param {string} [opts.conferenceTrim] - The conference_trim\n * @param {string} [opts.recordingChannels] - The recording_channels\n * @param {string} [opts.recordingStatusCallback] - The recording_status_callback\n * @param {string} [opts.recordingStatusCallbackMethod] -\n *          The recording_status_callback_method\n * @param {string} [opts.conferenceRecordingStatusCallback] -\n *          The conference_recording_status_callback\n * @param {string} [opts.conferenceRecordingStatusCallbackMethod] -\n *          The conference_recording_status_callback_method\n * @param {string} [opts.region] - The region\n * @param {string} [opts.sipAuthUsername] - The sip_auth_username\n * @param {string} [opts.sipAuthPassword] - The sip_auth_password\n * @param {string|list} [opts.dequeueStatusCallbackEvent] -\n *          The dequeue_status_callback_event\n * @param {string} [opts.postWorkActivitySid] - The post_work_activity_sid\n * @param {boolean} [opts.endConferenceOnCustomerExit] -\n *          The end_conference_on_customer_exit\n * @param {boolean} [opts.beepOnCustomerEntrance] - The beep_on_customer_entrance\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n/* jshint ignore:end */\nReservationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'ReservationStatus': _.get(opts, 'reservationStatus'),\n    'WorkerActivitySid': _.get(opts, 'workerActivitySid'),\n    'Instruction': _.get(opts, 'instruction'),\n    'DequeuePostWorkActivitySid': _.get(opts, 'dequeuePostWorkActivitySid'),\n    'DequeueFrom': _.get(opts, 'dequeueFrom'),\n    'DequeueRecord': _.get(opts, 'dequeueRecord'),\n    'DequeueTimeout': _.get(opts, 'dequeueTimeout'),\n    'DequeueTo': _.get(opts, 'dequeueTo'),\n    'DequeueStatusCallbackUrl': _.get(opts, 'dequeueStatusCallbackUrl'),\n    'CallFrom': _.get(opts, 'callFrom'),\n    'CallRecord': _.get(opts, 'callRecord'),\n    'CallTimeout': _.get(opts, 'callTimeout'),\n    'CallTo': _.get(opts, 'callTo'),\n    'CallUrl': _.get(opts, 'callUrl'),\n    'CallStatusCallbackUrl': _.get(opts, 'callStatusCallbackUrl'),\n    'CallAccept': serialize.bool(_.get(opts, 'callAccept')),\n    'RedirectCallSid': _.get(opts, 'redirectCallSid'),\n    'RedirectAccept': serialize.bool(_.get(opts, 'redirectAccept')),\n    'RedirectUrl': _.get(opts, 'redirectUrl'),\n    'To': _.get(opts, 'to'),\n    'From': _.get(opts, 'from'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n    'StatusCallbackEvent': serialize.map(_.get(opts, 'statusCallbackEvent'), function (e) {\n      return e;\n    }),\n    'Timeout': _.get(opts, 'timeout'),\n    'Record': serialize.bool(_.get(opts, 'record')),\n    'Muted': serialize.bool(_.get(opts, 'muted')),\n    'Beep': _.get(opts, 'beep'),\n    'StartConferenceOnEnter': serialize.bool(_.get(opts, 'startConferenceOnEnter')),\n    'EndConferenceOnExit': serialize.bool(_.get(opts, 'endConferenceOnExit')),\n    'WaitUrl': _.get(opts, 'waitUrl'),\n    'WaitMethod': _.get(opts, 'waitMethod'),\n    'EarlyMedia': serialize.bool(_.get(opts, 'earlyMedia')),\n    'MaxParticipants': _.get(opts, 'maxParticipants'),\n    'ConferenceStatusCallback': _.get(opts, 'conferenceStatusCallback'),\n    'ConferenceStatusCallbackMethod': _.get(opts, 'conferenceStatusCallbackMethod'),\n    'ConferenceStatusCallbackEvent': serialize.map(_.get(opts, 'conferenceStatusCallbackEvent'), function (e) {\n      return e;\n    }),\n    'ConferenceRecord': _.get(opts, 'conferenceRecord'),\n    'ConferenceTrim': _.get(opts, 'conferenceTrim'),\n    'RecordingChannels': _.get(opts, 'recordingChannels'),\n    'RecordingStatusCallback': _.get(opts, 'recordingStatusCallback'),\n    'RecordingStatusCallbackMethod': _.get(opts, 'recordingStatusCallbackMethod'),\n    'ConferenceRecordingStatusCallback': _.get(opts, 'conferenceRecordingStatusCallback'),\n    'ConferenceRecordingStatusCallbackMethod': _.get(opts, 'conferenceRecordingStatusCallbackMethod'),\n    'Region': _.get(opts, 'region'),\n    'SipAuthUsername': _.get(opts, 'sipAuthUsername'),\n    'SipAuthPassword': _.get(opts, 'sipAuthPassword'),\n    'DequeueStatusCallbackEvent': serialize.map(_.get(opts, 'dequeueStatusCallbackEvent'), function (e) {\n      return e;\n    }),\n    'PostWorkActivitySid': _.get(opts, 'postWorkActivitySid'),\n    'EndConferenceOnCustomerExit': serialize.bool(_.get(opts, 'endConferenceOnCustomerExit')),\n    'BeepOnCustomerEntrance': serialize.bool(_.get(opts, 'beepOnCustomerEntrance'))\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ReservationInstance(this._version, payload, this._solution.workspaceSid, this._solution.workerSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nReservationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nReservationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  ReservationList: ReservationList,\n  ReservationPage: ReservationPage,\n  ReservationInstance: ReservationInstance,\n  ReservationContext: ReservationContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","ReservationList","ReservationPage","ReservationInstance","ReservationContext","version","workspaceSid","workerSid","ReservationListInstance","sid","get","_version","_solution","_uri","template","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","reservationStatus","reservation_status","taskSid","task_sid","workerName","worker_name","worker_sid","workspace_sid","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","bool","map","e","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/taskrouter/v1/workspace/worker/reservation.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar ReservationList;\nvar ReservationPage;\nvar ReservationInstance;\nvar ReservationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ReservationList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid - The workspace_sid\n * @param {string} workerSid - The worker_sid\n */\n/* jshint ignore:end */\nReservationList = function ReservationList(version, workspaceSid, workerSid) {\n  /* jshint ignore:start */\n  /**\n   * @function reservations\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext}\n   */\n  /* jshint ignore:end */\n  function ReservationListInstance(sid) {\n    return ReservationListInstance.get(sid);\n  }\n\n  ReservationListInstance._version = version;\n  // Path Solution\n  ReservationListInstance._solution = {workspaceSid: workspaceSid, workerSid: workerSid};\n  ReservationListInstance._uri = _.template(\n    '/Workspaces/<%= workspaceSid %>/Workers/<%= workerSid %>/Reservations' // jshint ignore:line\n  )(ReservationListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams ReservationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Filter by a worker's reservation status\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ReservationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Filter by a worker's reservation status\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ReservationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Filter by a worker's reservation status\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'ReservationStatus': _.get(opts, 'reservationStatus'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ReservationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ReservationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ReservationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a reservation\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext}\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.get = function get(sid) {\n    return new ReservationContext(\n      this._version,\n      this._solution.workspaceSid,\n      this._solution.workerSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ReservationListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ReservationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ReservationPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ReservationSolution} solution - Path solution\n *\n * @returns ReservationPage\n */\n/* jshint ignore:end */\nReservationPage = function ReservationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ReservationPage.prototype, Page.prototype);\nReservationPage.prototype.constructor = ReservationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ReservationInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationPage#\n *\n * @param {ReservationPayload} payload - Payload response from the API\n *\n * @returns ReservationInstance\n */\n/* jshint ignore:end */\nReservationPage.prototype.getInstance = function getInstance(payload) {\n  return new ReservationInstance(\n    this._version,\n    payload,\n    this._solution.workspaceSid,\n    this._solution.workerSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nReservationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nReservationPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ReservationContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance\n *\n * @property {string} accountSid - The account_sid\n * @property {Date} dateCreated - The date_created\n * @property {Date} dateUpdated - The date_updated\n * @property {reservation.status} reservationStatus -\n *          Filter by a worker's reservation status\n * @property {string} sid - The sid\n * @property {string} taskSid - The task_sid\n * @property {string} workerName - The worker_name\n * @property {string} workerSid - The worker_sid\n * @property {string} workspaceSid - The workspace_sid\n * @property {string} url - The url\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {ReservationPayload} payload - The instance payload\n * @param {sid} workspaceSid - The workspace_sid\n * @param {sid} workerSid - The worker_sid\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nReservationInstance = function ReservationInstance(version, payload,\n                                                    workspaceSid, workerSid,\n                                                    sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.reservationStatus = payload.reservation_status; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.taskSid = payload.task_sid; // jshint ignore:line\n  this.workerName = payload.worker_name; // jshint ignore:line\n  this.workerSid = payload.worker_sid; // jshint ignore:line\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {workspaceSid: workspaceSid, workerSid: workerSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(ReservationInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new ReservationContext(\n        this._version,\n        this._solution.workspaceSid,\n        this._solution.workerSid,\n        this._solution.sid\n      );\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ReservationInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n/* jshint ignore:end */\nReservationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ReservationInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {reservation.status} [opts.reservationStatus] - Yes\n * @param {string} [opts.workerActivitySid] - No\n * @param {string} [opts.instruction] - Yes\n * @param {string} [opts.dequeuePostWorkActivitySid] - No\n * @param {string} [opts.dequeueFrom] - Yes\n * @param {string} [opts.dequeueRecord] - The dequeue_record\n * @param {number} [opts.dequeueTimeout] - The dequeue_timeout\n * @param {string} [opts.dequeueTo] - The dequeue_to\n * @param {string} [opts.dequeueStatusCallbackUrl] -\n *          The dequeue_status_callback_url\n * @param {string} [opts.callFrom] - Yes\n * @param {string} [opts.callRecord] - The call_record\n * @param {number} [opts.callTimeout] - The call_timeout\n * @param {string} [opts.callTo] - The call_to\n * @param {string} [opts.callUrl] - Yes\n * @param {string} [opts.callStatusCallbackUrl] - No\n * @param {boolean} [opts.callAccept] - No\n * @param {string} [opts.redirectCallSid] - The redirect_call_sid\n * @param {boolean} [opts.redirectAccept] - The redirect_accept\n * @param {string} [opts.redirectUrl] - The redirect_url\n * @param {string} [opts.to] - The to\n * @param {string} [opts.from] - The from\n * @param {string} [opts.statusCallback] - The status_callback\n * @param {string} [opts.statusCallbackMethod] - The status_callback_method\n * @param {reservation.call_status|list} [opts.statusCallbackEvent] -\n *          The status_callback_event\n * @param {number} [opts.timeout] - The timeout\n * @param {boolean} [opts.record] - The record\n * @param {boolean} [opts.muted] - The muted\n * @param {string} [opts.beep] - The beep\n * @param {boolean} [opts.startConferenceOnEnter] - The start_conference_on_enter\n * @param {boolean} [opts.endConferenceOnExit] - The end_conference_on_exit\n * @param {string} [opts.waitUrl] - The wait_url\n * @param {string} [opts.waitMethod] - The wait_method\n * @param {boolean} [opts.earlyMedia] - The early_media\n * @param {number} [opts.maxParticipants] - The max_participants\n * @param {string} [opts.conferenceStatusCallback] - The conference_status_callback\n * @param {string} [opts.conferenceStatusCallbackMethod] -\n *          The conference_status_callback_method\n * @param {reservation.conference_event|list} [opts.conferenceStatusCallbackEvent] -\n *          The conference_status_callback_event\n * @param {string} [opts.conferenceRecord] - The conference_record\n * @param {string} [opts.conferenceTrim] - The conference_trim\n * @param {string} [opts.recordingChannels] - The recording_channels\n * @param {string} [opts.recordingStatusCallback] - The recording_status_callback\n * @param {string} [opts.recordingStatusCallbackMethod] -\n *          The recording_status_callback_method\n * @param {string} [opts.conferenceRecordingStatusCallback] -\n *          The conference_recording_status_callback\n * @param {string} [opts.conferenceRecordingStatusCallbackMethod] -\n *          The conference_recording_status_callback_method\n * @param {string} [opts.region] - The region\n * @param {string} [opts.sipAuthUsername] - The sip_auth_username\n * @param {string} [opts.sipAuthPassword] - The sip_auth_password\n * @param {string|list} [opts.dequeueStatusCallbackEvent] -\n *          The dequeue_status_callback_event\n * @param {string} [opts.postWorkActivitySid] - The post_work_activity_sid\n * @param {boolean} [opts.endConferenceOnCustomerExit] -\n *          The end_conference_on_customer_exit\n * @param {boolean} [opts.beepOnCustomerEntrance] - The beep_on_customer_entrance\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n/* jshint ignore:end */\nReservationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nReservationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nReservationInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ReservationContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The workspace_sid\n * @param {sid} workerSid - The worker_sid\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nReservationContext = function ReservationContext(version, workspaceSid,\n                                                  workerSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {workspaceSid: workspaceSid, workerSid: workerSid, sid: sid, };\n  this._uri = _.template(\n    '/Workspaces/<%= workspaceSid %>/Workers/<%= workerSid %>/Reservations/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ReservationInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n/* jshint ignore:end */\nReservationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ReservationInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.workerSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ReservationInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {reservation.status} [opts.reservationStatus] - Yes\n * @param {string} [opts.workerActivitySid] - No\n * @param {string} [opts.instruction] - Yes\n * @param {string} [opts.dequeuePostWorkActivitySid] - No\n * @param {string} [opts.dequeueFrom] - Yes\n * @param {string} [opts.dequeueRecord] - The dequeue_record\n * @param {number} [opts.dequeueTimeout] - The dequeue_timeout\n * @param {string} [opts.dequeueTo] - The dequeue_to\n * @param {string} [opts.dequeueStatusCallbackUrl] -\n *          The dequeue_status_callback_url\n * @param {string} [opts.callFrom] - Yes\n * @param {string} [opts.callRecord] - The call_record\n * @param {number} [opts.callTimeout] - The call_timeout\n * @param {string} [opts.callTo] - The call_to\n * @param {string} [opts.callUrl] - Yes\n * @param {string} [opts.callStatusCallbackUrl] - No\n * @param {boolean} [opts.callAccept] - No\n * @param {string} [opts.redirectCallSid] - The redirect_call_sid\n * @param {boolean} [opts.redirectAccept] - The redirect_accept\n * @param {string} [opts.redirectUrl] - The redirect_url\n * @param {string} [opts.to] - The to\n * @param {string} [opts.from] - The from\n * @param {string} [opts.statusCallback] - The status_callback\n * @param {string} [opts.statusCallbackMethod] - The status_callback_method\n * @param {reservation.call_status|list} [opts.statusCallbackEvent] -\n *          The status_callback_event\n * @param {number} [opts.timeout] - The timeout\n * @param {boolean} [opts.record] - The record\n * @param {boolean} [opts.muted] - The muted\n * @param {string} [opts.beep] - The beep\n * @param {boolean} [opts.startConferenceOnEnter] - The start_conference_on_enter\n * @param {boolean} [opts.endConferenceOnExit] - The end_conference_on_exit\n * @param {string} [opts.waitUrl] - The wait_url\n * @param {string} [opts.waitMethod] - The wait_method\n * @param {boolean} [opts.earlyMedia] - The early_media\n * @param {number} [opts.maxParticipants] - The max_participants\n * @param {string} [opts.conferenceStatusCallback] - The conference_status_callback\n * @param {string} [opts.conferenceStatusCallbackMethod] -\n *          The conference_status_callback_method\n * @param {reservation.conference_event|list} [opts.conferenceStatusCallbackEvent] -\n *          The conference_status_callback_event\n * @param {string} [opts.conferenceRecord] - The conference_record\n * @param {string} [opts.conferenceTrim] - The conference_trim\n * @param {string} [opts.recordingChannels] - The recording_channels\n * @param {string} [opts.recordingStatusCallback] - The recording_status_callback\n * @param {string} [opts.recordingStatusCallbackMethod] -\n *          The recording_status_callback_method\n * @param {string} [opts.conferenceRecordingStatusCallback] -\n *          The conference_recording_status_callback\n * @param {string} [opts.conferenceRecordingStatusCallbackMethod] -\n *          The conference_recording_status_callback_method\n * @param {string} [opts.region] - The region\n * @param {string} [opts.sipAuthUsername] - The sip_auth_username\n * @param {string} [opts.sipAuthPassword] - The sip_auth_password\n * @param {string|list} [opts.dequeueStatusCallbackEvent] -\n *          The dequeue_status_callback_event\n * @param {string} [opts.postWorkActivitySid] - The post_work_activity_sid\n * @param {boolean} [opts.endConferenceOnCustomerExit] -\n *          The end_conference_on_customer_exit\n * @param {boolean} [opts.beepOnCustomerEntrance] - The beep_on_customer_entrance\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n/* jshint ignore:end */\nReservationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'ReservationStatus': _.get(opts, 'reservationStatus'),\n    'WorkerActivitySid': _.get(opts, 'workerActivitySid'),\n    'Instruction': _.get(opts, 'instruction'),\n    'DequeuePostWorkActivitySid': _.get(opts, 'dequeuePostWorkActivitySid'),\n    'DequeueFrom': _.get(opts, 'dequeueFrom'),\n    'DequeueRecord': _.get(opts, 'dequeueRecord'),\n    'DequeueTimeout': _.get(opts, 'dequeueTimeout'),\n    'DequeueTo': _.get(opts, 'dequeueTo'),\n    'DequeueStatusCallbackUrl': _.get(opts, 'dequeueStatusCallbackUrl'),\n    'CallFrom': _.get(opts, 'callFrom'),\n    'CallRecord': _.get(opts, 'callRecord'),\n    'CallTimeout': _.get(opts, 'callTimeout'),\n    'CallTo': _.get(opts, 'callTo'),\n    'CallUrl': _.get(opts, 'callUrl'),\n    'CallStatusCallbackUrl': _.get(opts, 'callStatusCallbackUrl'),\n    'CallAccept': serialize.bool(_.get(opts, 'callAccept')),\n    'RedirectCallSid': _.get(opts, 'redirectCallSid'),\n    'RedirectAccept': serialize.bool(_.get(opts, 'redirectAccept')),\n    'RedirectUrl': _.get(opts, 'redirectUrl'),\n    'To': _.get(opts, 'to'),\n    'From': _.get(opts, 'from'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n    'StatusCallbackEvent': serialize.map(_.get(opts, 'statusCallbackEvent'), function(e) { return e; }),\n    'Timeout': _.get(opts, 'timeout'),\n    'Record': serialize.bool(_.get(opts, 'record')),\n    'Muted': serialize.bool(_.get(opts, 'muted')),\n    'Beep': _.get(opts, 'beep'),\n    'StartConferenceOnEnter': serialize.bool(_.get(opts, 'startConferenceOnEnter')),\n    'EndConferenceOnExit': serialize.bool(_.get(opts, 'endConferenceOnExit')),\n    'WaitUrl': _.get(opts, 'waitUrl'),\n    'WaitMethod': _.get(opts, 'waitMethod'),\n    'EarlyMedia': serialize.bool(_.get(opts, 'earlyMedia')),\n    'MaxParticipants': _.get(opts, 'maxParticipants'),\n    'ConferenceStatusCallback': _.get(opts, 'conferenceStatusCallback'),\n    'ConferenceStatusCallbackMethod': _.get(opts, 'conferenceStatusCallbackMethod'),\n    'ConferenceStatusCallbackEvent': serialize.map(_.get(opts, 'conferenceStatusCallbackEvent'), function(e) { return e; }),\n    'ConferenceRecord': _.get(opts, 'conferenceRecord'),\n    'ConferenceTrim': _.get(opts, 'conferenceTrim'),\n    'RecordingChannels': _.get(opts, 'recordingChannels'),\n    'RecordingStatusCallback': _.get(opts, 'recordingStatusCallback'),\n    'RecordingStatusCallbackMethod': _.get(opts, 'recordingStatusCallbackMethod'),\n    'ConferenceRecordingStatusCallback': _.get(opts, 'conferenceRecordingStatusCallback'),\n    'ConferenceRecordingStatusCallbackMethod': _.get(opts, 'conferenceRecordingStatusCallbackMethod'),\n    'Region': _.get(opts, 'region'),\n    'SipAuthUsername': _.get(opts, 'sipAuthUsername'),\n    'SipAuthPassword': _.get(opts, 'sipAuthPassword'),\n    'DequeueStatusCallbackEvent': serialize.map(_.get(opts, 'dequeueStatusCallbackEvent'), function(e) { return e; }),\n    'PostWorkActivitySid': _.get(opts, 'postWorkActivitySid'),\n    'EndConferenceOnCustomerExit': serialize.bool(_.get(opts, 'endConferenceOnCustomerExit')),\n    'BeepOnCustomerEntrance': serialize.bool(_.get(opts, 'beepOnCustomerEntrance'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ReservationInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.workerSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nReservationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nReservationContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ReservationList: ReservationList,\n  ReservationPage: ReservationPage,\n  ReservationInstance: ReservationInstance,\n  ReservationContext: ReservationContext\n};\n"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,mBAAmB,CAACqE,SAAS,CAACiC,MAAM,GAAG,SAASA,MAAMA,CAACzF,IAAI,EAAEC,QAAQ,EAAE;EACrE,OAAO,IAAI,CAACuF,MAAM,CAACC,MAAM,CAACzF,IAAI,EAAEC,QAAQ,CAAC;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,mBAAmB,CAACqE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EACvD,IAAIY,KAAK,GAAG,CAAC,CAAC;EACdlF,CAAC,CAACmF,MAAM,CAAC,IAAI,EAAE,UAASC,KAAK,EAAEC,GAAG,EAAE;IAClC,IAAI,CAACrF,CAAC,CAACsF,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,IAAI,CAAErF,CAAC,CAACuB,UAAU,CAAC6D,KAAK,CAAC,EAAE;MACpDF,KAAK,CAACG,GAAG,CAAC,GAAGD,KAAK;IACpB;EACF,CAAC,CAAC;EACF,OAAOF,KAAK;AACd,CAAC;AAED1E,mBAAmB,CAACqE,SAAS,CAAC5E,IAAI,CAACsE,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EACvEC,OAAO,EAAE;EACX,OAAOzE,IAAI,CAACsE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjE,kBAAkB,GAAG,SAASA,kBAAkBA,CAACC,OAAO,EAAEC,YAAY,EACpBC,SAAS,EAAEE,GAAG,EAAE;EAChE,IAAI,CAACE,QAAQ,GAAGN,OAAO;;EAEvB;EACA,IAAI,CAACO,SAAS,GAAG;IAACN,YAAY,EAAEA,YAAY;IAAEC,SAAS,EAAEA,SAAS;IAAEE,GAAG,EAAEA;EAAK,CAAC;EAC/E,IAAI,CAACI,IAAI,GAAGlB,CAAC,CAACmB,QAAQ,CACpB,kFAAkF,CAAC;EACrF,CAAC,CAAC,IAAI,CAACF,SAAS,CAAC;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,kBAAkB,CAACoE,SAAS,CAAC+B,KAAK,GAAG,SAASA,KAAKA,CAACtF,QAAQ,EAAE;EAC5D,IAAI0B,QAAQ,GAAGlD,CAAC,CAACmD,KAAK,CAAC,CAAC;EACxB,IAAIZ,OAAO,GAAG,IAAI,CAACrB,QAAQ,CAAC4F,KAAK,CAAC;IAAC/C,GAAG,EAAE,IAAI,CAAC3C,IAAI;IAAE4C,MAAM,EAAE;EAAK,CAAC,CAAC;EAElEzB,OAAO,GAAGA,OAAO,CAACC,IAAI,CAAC,UAAS0B,OAAO,EAAE;IACvChB,QAAQ,CAACM,OAAO,CAAC,IAAI9C,mBAAmB,CACtC,IAAI,CAACQ,QAAQ,EACbgD,OAAO,EACP,IAAI,CAAC/C,SAAS,CAACN,YAAY,EAC3B,IAAI,CAACM,SAAS,CAACL,SAAS,EACxB,IAAI,CAACK,SAAS,CAACH,GACjB,CAAC,CAAC;EACJ,CAAC,CAAC6B,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbN,OAAO,CAACQ,KAAK,CAAC,UAASX,KAAK,EAAE;IAC5Bc,QAAQ,CAACO,MAAM,CAACrB,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;IAC1B0B,QAAQ,CAACX,OAAO,CAACmB,OAAO,CAAClC,QAAQ,CAAC;EACpC;EAEA,OAAO0B,QAAQ,CAACX,OAAO;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5B,kBAAkB,CAACoE,SAAS,CAACiC,MAAM,GAAG,SAASA,MAAMA,CAACzF,IAAI,EAAEC,QAAQ,EAAE;EACpE,IAAItB,CAAC,CAACuB,UAAU,CAACF,IAAI,CAAC,EAAE;IACtBC,QAAQ,GAAGD,IAAI;IACfA,IAAI,GAAG,CAAC,CAAC;EACX;EACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;EAEjB,IAAI2B,QAAQ,GAAGlD,CAAC,CAACmD,KAAK,CAAC,CAAC;EACxB,IAAIQ,IAAI,GAAGpD,MAAM,CAACqD,EAAE,CAAC;IACnB,mBAAmB,EAAE1D,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,mBAAmB,CAAC;IACrD,mBAAmB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,mBAAmB,CAAC;IACrD,aAAa,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,aAAa,CAAC;IACzC,4BAA4B,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,4BAA4B,CAAC;IACvE,aAAa,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,aAAa,CAAC;IACzC,eAAe,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,eAAe,CAAC;IAC7C,gBAAgB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,gBAAgB,CAAC;IAC/C,WAAW,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,WAAW,CAAC;IACrC,0BAA0B,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,0BAA0B,CAAC;IACnE,UAAU,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,UAAU,CAAC;IACnC,YAAY,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,YAAY,CAAC;IACvC,aAAa,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,aAAa,CAAC;IACzC,QAAQ,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,QAAQ,CAAC;IAC/B,SAAS,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,SAAS,CAAC;IACjC,uBAAuB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,uBAAuB,CAAC;IAC7D,YAAY,EAAEjB,SAAS,CAAC2G,IAAI,CAAC/G,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,YAAY,CAAC,CAAC;IACvD,iBAAiB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,iBAAiB,CAAC;IACjD,gBAAgB,EAAEjB,SAAS,CAAC2G,IAAI,CAAC/G,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,gBAAgB,CAAC,CAAC;IAC/D,aAAa,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,aAAa,CAAC;IACzC,IAAI,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,IAAI,CAAC;IACvB,MAAM,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,MAAM,CAAC;IAC3B,gBAAgB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,gBAAgB,CAAC;IAC/C,sBAAsB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,sBAAsB,CAAC;IAC3D,qBAAqB,EAAEjB,SAAS,CAAC4G,GAAG,CAAChH,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,qBAAqB,CAAC,EAAE,UAAS4F,CAAC,EAAE;MAAE,OAAOA,CAAC;IAAE,CAAC,CAAC;IACnG,SAAS,EAAEjH,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,SAAS,CAAC;IACjC,QAAQ,EAAEjB,SAAS,CAAC2G,IAAI,CAAC/G,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC/C,OAAO,EAAEjB,SAAS,CAAC2G,IAAI,CAAC/G,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,OAAO,CAAC,CAAC;IAC7C,MAAM,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,MAAM,CAAC;IAC3B,wBAAwB,EAAEjB,SAAS,CAAC2G,IAAI,CAAC/G,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,wBAAwB,CAAC,CAAC;IAC/E,qBAAqB,EAAEjB,SAAS,CAAC2G,IAAI,CAAC/G,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,qBAAqB,CAAC,CAAC;IACzE,SAAS,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,SAAS,CAAC;IACjC,YAAY,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,YAAY,CAAC;IACvC,YAAY,EAAEjB,SAAS,CAAC2G,IAAI,CAAC/G,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,YAAY,CAAC,CAAC;IACvD,iBAAiB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,iBAAiB,CAAC;IACjD,0BAA0B,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,0BAA0B,CAAC;IACnE,gCAAgC,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,gCAAgC,CAAC;IAC/E,+BAA+B,EAAEjB,SAAS,CAAC4G,GAAG,CAAChH,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,+BAA+B,CAAC,EAAE,UAAS4F,CAAC,EAAE;MAAE,OAAOA,CAAC;IAAE,CAAC,CAAC;IACvH,kBAAkB,EAAEjH,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,kBAAkB,CAAC;IACnD,gBAAgB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,gBAAgB,CAAC;IAC/C,mBAAmB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,mBAAmB,CAAC;IACrD,yBAAyB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,yBAAyB,CAAC;IACjE,+BAA+B,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,+BAA+B,CAAC;IAC7E,mCAAmC,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,mCAAmC,CAAC;IACrF,yCAAyC,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,yCAAyC,CAAC;IACjG,QAAQ,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,QAAQ,CAAC;IAC/B,iBAAiB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,iBAAiB,CAAC;IACjD,iBAAiB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,iBAAiB,CAAC;IACjD,4BAA4B,EAAEjB,SAAS,CAAC4G,GAAG,CAAChH,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,4BAA4B,CAAC,EAAE,UAAS4F,CAAC,EAAE;MAAE,OAAOA,CAAC;IAAE,CAAC,CAAC;IACjH,qBAAqB,EAAEjH,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,qBAAqB,CAAC;IACzD,6BAA6B,EAAEjB,SAAS,CAAC2G,IAAI,CAAC/G,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,6BAA6B,CAAC,CAAC;IACzF,wBAAwB,EAAEjB,SAAS,CAAC2G,IAAI,CAAC/G,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,wBAAwB,CAAC;EAChF,CAAC,CAAC;EAEF,IAAIgB,OAAO,GAAG,IAAI,CAACrB,QAAQ,CAAC8F,MAAM,CAAC;IAACjD,GAAG,EAAE,IAAI,CAAC3C,IAAI;IAAE4C,MAAM,EAAE,MAAM;IAAEL,IAAI,EAAEA;EAAI,CAAC,CAAC;EAEhFpB,OAAO,GAAGA,OAAO,CAACC,IAAI,CAAC,UAAS0B,OAAO,EAAE;IACvChB,QAAQ,CAACM,OAAO,CAAC,IAAI9C,mBAAmB,CACtC,IAAI,CAACQ,QAAQ,EACbgD,OAAO,EACP,IAAI,CAAC/C,SAAS,CAACN,YAAY,EAC3B,IAAI,CAACM,SAAS,CAACL,SAAS,EACxB,IAAI,CAACK,SAAS,CAACH,GACjB,CAAC,CAAC;EACJ,CAAC,CAAC6B,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbN,OAAO,CAACQ,KAAK,CAAC,UAASX,KAAK,EAAE;IAC5Bc,QAAQ,CAACO,MAAM,CAACrB,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIlC,CAAC,CAACuB,UAAU,CAACD,QAAQ,CAAC,EAAE;IAC1B0B,QAAQ,CAACX,OAAO,CAACmB,OAAO,CAAClC,QAAQ,CAAC;EACpC;EAEA,OAAO0B,QAAQ,CAACX,OAAO;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5B,kBAAkB,CAACoE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EACtD,OAAO,IAAI,CAACrD,SAAS;AACvB,CAAC;AAEDR,kBAAkB,CAACoE,SAAS,CAAC5E,IAAI,CAACsE,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EACtEC,OAAO,EAAE;EACX,OAAOzE,IAAI,CAACsE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;AAEDwC,MAAM,CAACC,OAAO,GAAG;EACf7G,eAAe,EAAEA,eAAe;EAChCC,eAAe,EAAEA,eAAe;EAChCC,mBAAmB,EAAEA,mBAAmB;EACxCC,kBAAkB,EAAEA;AACtB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}