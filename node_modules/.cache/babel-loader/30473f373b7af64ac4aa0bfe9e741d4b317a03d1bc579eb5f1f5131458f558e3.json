{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar DependentPhoneNumberList = require('./address/dependentPhoneNumber').DependentPhoneNumberList;\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar AddressList;\nvar AddressPage;\nvar AddressInstance;\nvar AddressContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the AddressList\n *\n * @constructor Twilio.Api.V2010.AccountContext.AddressList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          The SID of the Account that is responsible for the resource\n */\n/* jshint ignore:end */\nAddressList = function AddressList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function addresses\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AddressContext}\n   */\n  /* jshint ignore:end */\n  function AddressListInstance(sid) {\n    return AddressListInstance.get(sid);\n  }\n  AddressListInstance._version = version;\n  // Path Solution\n  AddressListInstance._solution = {\n    accountSid: accountSid\n  };\n  AddressListInstance._uri = _.template('/Accounts/<%= accountSid %>/Addresses.json' // jshint ignore:line\n  )(AddressListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a AddressInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.customerName - The name to associate with the new address\n   * @param {string} opts.street - The number and street address of the new address\n   * @param {string} opts.city - The city of the new address\n   * @param {string} opts.region - The state or region of the new address\n   * @param {string} opts.postalCode - The postal code of the new address\n   * @param {string} opts.isoCountry - The ISO country code of the new address\n   * @param {string} [opts.friendlyName] - A string to describe the new resource\n   * @param {boolean} [opts.emergencyEnabled] -\n   *          Whether to enable emergency calling on the new address\n   * @param {boolean} [opts.autoCorrectAddress] -\n   *          Whether we should automatically correct the address\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AddressInstance\n   */\n  /* jshint ignore:end */\n  AddressListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.customerName)) {\n      throw new Error('Required parameter \"opts.customerName\" missing.');\n    }\n    if (_.isUndefined(opts.street)) {\n      throw new Error('Required parameter \"opts.street\" missing.');\n    }\n    if (_.isUndefined(opts.city)) {\n      throw new Error('Required parameter \"opts.city\" missing.');\n    }\n    if (_.isUndefined(opts.region)) {\n      throw new Error('Required parameter \"opts.region\" missing.');\n    }\n    if (_.isUndefined(opts.postalCode)) {\n      throw new Error('Required parameter \"opts.postalCode\" missing.');\n    }\n    if (_.isUndefined(opts.isoCountry)) {\n      throw new Error('Required parameter \"opts.isoCountry\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'CustomerName': _.get(opts, 'customerName'),\n      'Street': _.get(opts, 'street'),\n      'City': _.get(opts, 'city'),\n      'Region': _.get(opts, 'region'),\n      'PostalCode': _.get(opts, 'postalCode'),\n      'IsoCountry': _.get(opts, 'isoCountry'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'EmergencyEnabled': serialize.bool(_.get(opts, 'emergencyEnabled')),\n      'AutoCorrectAddress': serialize.bool(_.get(opts, 'autoCorrectAddress'))\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AddressInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams AddressInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.customerName] -\n   *          The `customer_name` of the Address resources to read\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Address resources to read\n   * @param {string} [opts.isoCountry] -\n   *          The ISO country code of the Address resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  AddressListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists AddressInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.customerName] -\n   *          The `customer_name` of the Address resources to read\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Address resources to read\n   * @param {string} [opts.isoCountry] -\n   *          The ISO country code of the Address resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AddressListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of AddressInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.customerName] -\n   *          The `customer_name` of the Address resources to read\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Address resources to read\n   * @param {string} [opts.isoCountry] -\n   *          The ISO country code of the Address resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AddressListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'CustomerName': _.get(opts, 'customerName'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'IsoCountry': _.get(opts, 'isoCountry'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AddressPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of AddressInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AddressListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AddressPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a address\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AddressContext}\n   */\n  /* jshint ignore:end */\n  AddressListInstance.get = function get(sid) {\n    return new AddressContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  AddressListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  AddressListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return AddressListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the AddressPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.AddressPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AddressSolution} solution - Path solution\n *\n * @returns AddressPage\n */\n/* jshint ignore:end */\nAddressPage = function AddressPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(AddressPage.prototype, Page.prototype);\nAddressPage.prototype.constructor = AddressPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of AddressInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.AddressPage#\n *\n * @param {AddressPayload} payload - Payload response from the API\n *\n * @returns AddressInstance\n */\n/* jshint ignore:end */\nAddressPage.prototype.getInstance = function getInstance(payload) {\n  return new AddressInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AddressPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAddressPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nAddressPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the AddressContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AddressInstance\n *\n * @property {string} accountSid -\n *          The SID of the Account that is responsible for the resource\n * @property {string} city - The city in which the address is located\n * @property {string} customerName - The name associated with the address\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} isoCountry - The ISO country code of the address\n * @property {string} postalCode - The postal code of the address\n * @property {string} region - The state or region of the address\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} street - The number and street address of the address\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {boolean} emergencyEnabled -\n *          Whether emergency calling has been enabled on this number\n * @property {boolean} validated -\n *          Whether the address has been validated to comply with local regulation\n *\n * @param {V2010} version - Version of the resource\n * @param {AddressPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          The SID of the Account that is responsible for the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAddressInstance = function AddressInstance(version, payload, accountSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.city = payload.city; // jshint ignore:line\n  this.customerName = payload.customer_name; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.isoCountry = payload.iso_country; // jshint ignore:line\n  this.postalCode = payload.postal_code; // jshint ignore:line\n  this.region = payload.region; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.street = payload.street; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.emergencyEnabled = payload.emergency_enabled; // jshint ignore:line\n  this.validated = payload.validated; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(AddressInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new AddressContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * remove a AddressInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n/* jshint ignore:end */\nAddressInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a AddressInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n/* jshint ignore:end */\nAddressInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a AddressInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.customerName] - The name to associate with the address\n * @param {string} [opts.street] - The number and street address of the address\n * @param {string} [opts.city] - The city of the address\n * @param {string} [opts.region] - The state or region of the address\n * @param {string} [opts.postalCode] - The postal code of the address\n * @param {boolean} [opts.emergencyEnabled] -\n *          Whether to enable emergency calling on the address\n * @param {boolean} [opts.autoCorrectAddress] -\n *          Whether we should automatically correct the address\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n/* jshint ignore:end */\nAddressInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the dependentPhoneNumbers\n *\n * @function dependentPhoneNumbers\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AddressContext.DependentPhoneNumberList}\n */\n/* jshint ignore:end */\nAddressInstance.prototype.dependentPhoneNumbers = function dependentPhoneNumbers() {\n  return this._proxy.dependentPhoneNumbers;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAddressInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nAddressInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the AddressContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AddressContext\n *\n * @property {Twilio.Api.V2010.AccountContext.AddressContext.DependentPhoneNumberList} dependentPhoneNumbers -\n *          dependentPhoneNumbers resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that is responsible for this address\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAddressContext = function AddressContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = _.template('/Accounts/<%= accountSid %>/Addresses/<%= sid %>.json' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._dependentPhoneNumbers = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * remove a AddressInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.AddressContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n/* jshint ignore:end */\nAddressContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a AddressInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AddressContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n/* jshint ignore:end */\nAddressContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AddressInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a AddressInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.AddressContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.customerName] - The name to associate with the address\n * @param {string} [opts.street] - The number and street address of the address\n * @param {string} [opts.city] - The city of the address\n * @param {string} [opts.region] - The state or region of the address\n * @param {string} [opts.postalCode] - The postal code of the address\n * @param {boolean} [opts.emergencyEnabled] -\n *          Whether to enable emergency calling on the address\n * @param {boolean} [opts.autoCorrectAddress] -\n *          Whether we should automatically correct the address\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n/* jshint ignore:end */\nAddressContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'CustomerName': _.get(opts, 'customerName'),\n    'Street': _.get(opts, 'street'),\n    'City': _.get(opts, 'city'),\n    'Region': _.get(opts, 'region'),\n    'PostalCode': _.get(opts, 'postalCode'),\n    'EmergencyEnabled': serialize.bool(_.get(opts, 'emergencyEnabled')),\n    'AutoCorrectAddress': serialize.bool(_.get(opts, 'autoCorrectAddress'))\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AddressInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(AddressContext.prototype, 'dependentPhoneNumbers', {\n  get: function () {\n    if (!this._dependentPhoneNumbers) {\n      this._dependentPhoneNumbers = new DependentPhoneNumberList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n    return this._dependentPhoneNumbers;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AddressContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAddressContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nAddressContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  AddressList: AddressList,\n  AddressPage: AddressPage,\n  AddressInstance: AddressInstance,\n  AddressContext: AddressContext\n};","map":{"version":3,"names":["Q","require","_","util","DependentPhoneNumberList","Page","deserialize","serialize","values","AddressList","AddressPage","AddressInstance","AddressContext","version","accountSid","AddressListInstance","sid","get","_version","_solution","_uri","template","create","opts","callback","isUndefined","Error","customerName","street","city","region","postalCode","isoCountry","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","pageLimit","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","customer_name","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","friendlyName","friendly_name","iso_country","postal_code","emergencyEnabled","emergency_enabled","validated","_context","undefined","Object","defineProperty","remove","_proxy","fetch","update","dependentPhoneNumbers","_dependentPhoneNumbers","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/api/v2010/account/address.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar DependentPhoneNumberList = require(\n    './address/dependentPhoneNumber').DependentPhoneNumberList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar AddressList;\nvar AddressPage;\nvar AddressInstance;\nvar AddressContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the AddressList\n *\n * @constructor Twilio.Api.V2010.AccountContext.AddressList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          The SID of the Account that is responsible for the resource\n */\n/* jshint ignore:end */\nAddressList = function AddressList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function addresses\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AddressContext}\n   */\n  /* jshint ignore:end */\n  function AddressListInstance(sid) {\n    return AddressListInstance.get(sid);\n  }\n\n  AddressListInstance._version = version;\n  // Path Solution\n  AddressListInstance._solution = {accountSid: accountSid};\n  AddressListInstance._uri = _.template(\n    '/Accounts/<%= accountSid %>/Addresses.json' // jshint ignore:line\n  )(AddressListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a AddressInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.customerName - The name to associate with the new address\n   * @param {string} opts.street - The number and street address of the new address\n   * @param {string} opts.city - The city of the new address\n   * @param {string} opts.region - The state or region of the new address\n   * @param {string} opts.postalCode - The postal code of the new address\n   * @param {string} opts.isoCountry - The ISO country code of the new address\n   * @param {string} [opts.friendlyName] - A string to describe the new resource\n   * @param {boolean} [opts.emergencyEnabled] -\n   *          Whether to enable emergency calling on the new address\n   * @param {boolean} [opts.autoCorrectAddress] -\n   *          Whether we should automatically correct the address\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AddressInstance\n   */\n  /* jshint ignore:end */\n  AddressListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.customerName)) {\n      throw new Error('Required parameter \"opts.customerName\" missing.');\n    }\n    if (_.isUndefined(opts.street)) {\n      throw new Error('Required parameter \"opts.street\" missing.');\n    }\n    if (_.isUndefined(opts.city)) {\n      throw new Error('Required parameter \"opts.city\" missing.');\n    }\n    if (_.isUndefined(opts.region)) {\n      throw new Error('Required parameter \"opts.region\" missing.');\n    }\n    if (_.isUndefined(opts.postalCode)) {\n      throw new Error('Required parameter \"opts.postalCode\" missing.');\n    }\n    if (_.isUndefined(opts.isoCountry)) {\n      throw new Error('Required parameter \"opts.isoCountry\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'CustomerName': _.get(opts, 'customerName'),\n      'Street': _.get(opts, 'street'),\n      'City': _.get(opts, 'city'),\n      'Region': _.get(opts, 'region'),\n      'PostalCode': _.get(opts, 'postalCode'),\n      'IsoCountry': _.get(opts, 'isoCountry'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'EmergencyEnabled': serialize.bool(_.get(opts, 'emergencyEnabled')),\n      'AutoCorrectAddress': serialize.bool(_.get(opts, 'autoCorrectAddress'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AddressInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams AddressInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.customerName] -\n   *          The `customer_name` of the Address resources to read\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Address resources to read\n   * @param {string} [opts.isoCountry] -\n   *          The ISO country code of the Address resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  AddressListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists AddressInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.customerName] -\n   *          The `customer_name` of the Address resources to read\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Address resources to read\n   * @param {string} [opts.isoCountry] -\n   *          The ISO country code of the Address resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AddressListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of AddressInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.customerName] -\n   *          The `customer_name` of the Address resources to read\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Address resources to read\n   * @param {string} [opts.isoCountry] -\n   *          The ISO country code of the Address resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AddressListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'CustomerName': _.get(opts, 'customerName'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'IsoCountry': _.get(opts, 'isoCountry'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AddressPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of AddressInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AddressListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AddressPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a address\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AddressContext}\n   */\n  /* jshint ignore:end */\n  AddressListInstance.get = function get(sid) {\n    return new AddressContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.AddressList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  AddressListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AddressListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AddressListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AddressPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.AddressPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AddressSolution} solution - Path solution\n *\n * @returns AddressPage\n */\n/* jshint ignore:end */\nAddressPage = function AddressPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AddressPage.prototype, Page.prototype);\nAddressPage.prototype.constructor = AddressPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of AddressInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.AddressPage#\n *\n * @param {AddressPayload} payload - Payload response from the API\n *\n * @returns AddressInstance\n */\n/* jshint ignore:end */\nAddressPage.prototype.getInstance = function getInstance(payload) {\n  return new AddressInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AddressPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAddressPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAddressPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AddressContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AddressInstance\n *\n * @property {string} accountSid -\n *          The SID of the Account that is responsible for the resource\n * @property {string} city - The city in which the address is located\n * @property {string} customerName - The name associated with the address\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} isoCountry - The ISO country code of the address\n * @property {string} postalCode - The postal code of the address\n * @property {string} region - The state or region of the address\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} street - The number and street address of the address\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {boolean} emergencyEnabled -\n *          Whether emergency calling has been enabled on this number\n * @property {boolean} validated -\n *          Whether the address has been validated to comply with local regulation\n *\n * @param {V2010} version - Version of the resource\n * @param {AddressPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          The SID of the Account that is responsible for the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAddressInstance = function AddressInstance(version, payload, accountSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.city = payload.city; // jshint ignore:line\n  this.customerName = payload.customer_name; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.isoCountry = payload.iso_country; // jshint ignore:line\n  this.postalCode = payload.postal_code; // jshint ignore:line\n  this.region = payload.region; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.street = payload.street; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.emergencyEnabled = payload.emergency_enabled; // jshint ignore:line\n  this.validated = payload.validated; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(AddressInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new AddressContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * remove a AddressInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n/* jshint ignore:end */\nAddressInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a AddressInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n/* jshint ignore:end */\nAddressInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a AddressInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.customerName] - The name to associate with the address\n * @param {string} [opts.street] - The number and street address of the address\n * @param {string} [opts.city] - The city of the address\n * @param {string} [opts.region] - The state or region of the address\n * @param {string} [opts.postalCode] - The postal code of the address\n * @param {boolean} [opts.emergencyEnabled] -\n *          Whether to enable emergency calling on the address\n * @param {boolean} [opts.autoCorrectAddress] -\n *          Whether we should automatically correct the address\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n/* jshint ignore:end */\nAddressInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the dependentPhoneNumbers\n *\n * @function dependentPhoneNumbers\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AddressContext.DependentPhoneNumberList}\n */\n/* jshint ignore:end */\nAddressInstance.prototype.dependentPhoneNumbers = function\n    dependentPhoneNumbers() {\n  return this._proxy.dependentPhoneNumbers;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AddressInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAddressInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAddressInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AddressContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AddressContext\n *\n * @property {Twilio.Api.V2010.AccountContext.AddressContext.DependentPhoneNumberList} dependentPhoneNumbers -\n *          dependentPhoneNumbers resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that is responsible for this address\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAddressContext = function AddressContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, sid: sid, };\n  this._uri = _.template(\n    '/Accounts/<%= accountSid %>/Addresses/<%= sid %>.json' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._dependentPhoneNumbers = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * remove a AddressInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.AddressContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n/* jshint ignore:end */\nAddressContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a AddressInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AddressContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n/* jshint ignore:end */\nAddressContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new AddressInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a AddressInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.AddressContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.customerName] - The name to associate with the address\n * @param {string} [opts.street] - The number and street address of the address\n * @param {string} [opts.city] - The city of the address\n * @param {string} [opts.region] - The state or region of the address\n * @param {string} [opts.postalCode] - The postal code of the address\n * @param {boolean} [opts.emergencyEnabled] -\n *          Whether to enable emergency calling on the address\n * @param {boolean} [opts.autoCorrectAddress] -\n *          Whether we should automatically correct the address\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AddressInstance\n */\n/* jshint ignore:end */\nAddressContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'CustomerName': _.get(opts, 'customerName'),\n    'Street': _.get(opts, 'street'),\n    'City': _.get(opts, 'city'),\n    'Region': _.get(opts, 'region'),\n    'PostalCode': _.get(opts, 'postalCode'),\n    'EmergencyEnabled': serialize.bool(_.get(opts, 'emergencyEnabled')),\n    'AutoCorrectAddress': serialize.bool(_.get(opts, 'autoCorrectAddress'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new AddressInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(AddressContext.prototype,\n  'dependentPhoneNumbers', {\n  get: function() {\n    if (!this._dependentPhoneNumbers) {\n      this._dependentPhoneNumbers = new DependentPhoneNumberList(\n        this._version,\n        this._solution.accountSid,\n        this._solution.sid\n      );\n    }\n    return this._dependentPhoneNumbers;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AddressContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAddressContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAddressContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AddressList: AddressList,\n  AddressPage: AddressPage,\n  AddressInstance: AddressInstance,\n  AddressContext: AddressContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}