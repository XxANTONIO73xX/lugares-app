{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar BindingList;\nvar BindingPage;\nvar BindingInstance;\nvar BindingContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the BindingList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Notify.V1.ServiceContext.BindingList\n *\n * @param {Twilio.Notify.V1} version - Version of the resource\n * @param {string} serviceSid - The service_sid\n */\n/* jshint ignore:end */\nBindingList = function BindingList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function bindings\n   * @memberof Twilio.Notify.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Notify.V1.ServiceContext.BindingContext}\n   */\n  /* jshint ignore:end */\n  function BindingListInstance(sid) {\n    return BindingListInstance.get(sid);\n  }\n  BindingListInstance._version = version;\n  // Path Solution\n  BindingListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  BindingListInstance._uri = _.template('/Services/<%= serviceSid %>/Bindings' // jshint ignore:line\n  )(BindingListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a BindingInstance\n   *\n   * @function create\n   * @memberof Twilio.Notify.V1.ServiceContext.BindingList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.identity - The Identity to which this Binding belongs to.\n   * @param {binding.binding_type} opts.bindingType - The type of the Binding.\n   * @param {string} opts.address - The address specific to the channel.\n   * @param {string|list} [opts.tag] - The list of tags associated with this Binding.\n   * @param {string} [opts.notificationProtocolVersion] -\n   *          The version of the protocol used to send the notification.\n   * @param {string} [opts.credentialSid] -\n   *          The unique identifier of the Credential resource to be used to send notifications to this Binding.\n   * @param {string} [opts.endpoint] - DEPRECATED*\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed BindingInstance\n   */\n  /* jshint ignore:end */\n  BindingListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.identity)) {\n      throw new Error('Required parameter \"opts.identity\" missing.');\n    }\n    if (_.isUndefined(opts.bindingType)) {\n      throw new Error('Required parameter \"opts.bindingType\" missing.');\n    }\n    if (_.isUndefined(opts.address)) {\n      throw new Error('Required parameter \"opts.address\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'Identity': _.get(opts, 'identity'),\n      'BindingType': _.get(opts, 'bindingType'),\n      'Address': _.get(opts, 'address'),\n      'Tag': serialize.map(_.get(opts, 'tag'), function (e) {\n        return e;\n      }),\n      'NotificationProtocolVersion': _.get(opts, 'notificationProtocolVersion'),\n      'CredentialSid': _.get(opts, 'credentialSid'),\n      'Endpoint': _.get(opts, 'endpoint')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new BindingInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams BindingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Notify.V1.ServiceContext.BindingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.startDate] -\n   *          Only list Bindings created on or after the given date.\n   * @param {Date} [opts.endDate] -\n   *          Only list Bindings created on or before the given date.\n   * @param {string|list} [opts.identity] -\n   *          Only list Bindings that have any of the specified Identities.\n   * @param {string|list} [opts.tag] -\n   *          Only list Bindings that have all of the specified Tags.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  BindingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists BindingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Notify.V1.ServiceContext.BindingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.startDate] -\n   *          Only list Bindings created on or after the given date.\n   * @param {Date} [opts.endDate] -\n   *          Only list Bindings created on or before the given date.\n   * @param {string|list} [opts.identity] -\n   *          Only list Bindings that have any of the specified Identities.\n   * @param {string|list} [opts.tag] -\n   *          Only list Bindings that have all of the specified Tags.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  BindingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of BindingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Notify.V1.ServiceContext.BindingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.startDate] -\n   *          Only list Bindings created on or after the given date.\n   * @param {Date} [opts.endDate] -\n   *          Only list Bindings created on or before the given date.\n   * @param {string|list} [opts.identity] -\n   *          Only list Bindings that have any of the specified Identities.\n   * @param {string|list} [opts.tag] -\n   *          Only list Bindings that have all of the specified Tags.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  BindingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'StartDate': serialize.iso8601Date(_.get(opts, 'startDate')),\n      'EndDate': serialize.iso8601Date(_.get(opts, 'endDate')),\n      'Identity': serialize.map(_.get(opts, 'identity'), function (e) {\n        return e;\n      }),\n      'Tag': serialize.map(_.get(opts, 'tag'), function (e) {\n        return e;\n      }),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new BindingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of BindingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Notify.V1.ServiceContext.BindingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  BindingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new BindingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a binding\n   *\n   * @function get\n   * @memberof Twilio.Notify.V1.ServiceContext.BindingList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.Notify.V1.ServiceContext.BindingContext}\n   */\n  /* jshint ignore:end */\n  BindingListInstance.get = function get(sid) {\n    return new BindingContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Notify.V1.ServiceContext.BindingList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  BindingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  BindingListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return BindingListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the BindingPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Notify.V1.ServiceContext.BindingPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {BindingSolution} solution - Path solution\n *\n * @returns BindingPage\n */\n/* jshint ignore:end */\nBindingPage = function BindingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(BindingPage.prototype, Page.prototype);\nBindingPage.prototype.constructor = BindingPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of BindingInstance\n *\n * @function getInstance\n * @memberof Twilio.Notify.V1.ServiceContext.BindingPage#\n *\n * @param {BindingPayload} payload - Payload response from the API\n *\n * @returns BindingInstance\n */\n/* jshint ignore:end */\nBindingPage.prototype.getInstance = function getInstance(payload) {\n  return new BindingInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Notify.V1.ServiceContext.BindingPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nBindingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nBindingPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the BindingContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Notify.V1.ServiceContext.BindingInstance\n *\n * @property {string} sid - The sid\n * @property {string} accountSid - The account_sid\n * @property {string} serviceSid - The service_sid\n * @property {string} credentialSid -\n *          The unique identifier of the Credential resource to be used to send notifications to this Binding.\n * @property {Date} dateCreated - The date_created\n * @property {Date} dateUpdated - The date_updated\n * @property {string} notificationProtocolVersion -\n *          The version of the protocol used to send the notification.\n * @property {string} endpoint - DEPRECATED*\n * @property {string} identity - The Identity to which this Binding belongs to.\n * @property {string} bindingType - The type of the Binding.\n * @property {string} address - The address specific to the channel.\n * @property {string} tags - The list of tags associated with this Binding.\n * @property {string} url - The url\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {BindingPayload} payload - The instance payload\n * @param {sid} serviceSid - The service_sid\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nBindingInstance = function BindingInstance(version, payload, serviceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.credentialSid = payload.credential_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.notificationProtocolVersion = payload.notification_protocol_version; // jshint ignore:line\n  this.endpoint = payload.endpoint; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.bindingType = payload.binding_type; // jshint ignore:line\n  this.address = payload.address; // jshint ignore:line\n  this.tags = payload.tags; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(BindingInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new BindingContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a BindingInstance\n *\n * @function fetch\n * @memberof Twilio.Notify.V1.ServiceContext.BindingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BindingInstance\n */\n/* jshint ignore:end */\nBindingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a BindingInstance\n *\n * @function remove\n * @memberof Twilio.Notify.V1.ServiceContext.BindingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BindingInstance\n */\n/* jshint ignore:end */\nBindingInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Notify.V1.ServiceContext.BindingInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nBindingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nBindingInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the BindingContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Notify.V1.ServiceContext.BindingContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid - The service_sid\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nBindingContext = function BindingContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid\n  };\n  this._uri = _.template('/Services/<%= serviceSid %>/Bindings/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a BindingInstance\n *\n * @function fetch\n * @memberof Twilio.Notify.V1.ServiceContext.BindingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BindingInstance\n */\n/* jshint ignore:end */\nBindingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new BindingInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a BindingInstance\n *\n * @function remove\n * @memberof Twilio.Notify.V1.ServiceContext.BindingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BindingInstance\n */\n/* jshint ignore:end */\nBindingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Notify.V1.ServiceContext.BindingContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nBindingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nBindingContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  BindingList: BindingList,\n  BindingPage: BindingPage,\n  BindingInstance: BindingInstance,\n  BindingContext: BindingContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","BindingList","BindingPage","BindingInstance","BindingContext","version","serviceSid","BindingListInstance","sid","get","_version","_solution","_uri","template","create","opts","callback","isUndefined","Error","identity","bindingType","address","deferred","defer","data","of","map","e","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","pageLimit","nextPage","merge","list","allResources","resource","push","length","iso8601Date","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","credentialSid","credential_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","notificationProtocolVersion","notification_protocol_version","endpoint","binding_type","tags","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/notify/v1/service/binding.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar BindingList;\nvar BindingPage;\nvar BindingInstance;\nvar BindingContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the BindingList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Notify.V1.ServiceContext.BindingList\n *\n * @param {Twilio.Notify.V1} version - Version of the resource\n * @param {string} serviceSid - The service_sid\n */\n/* jshint ignore:end */\nBindingList = function BindingList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function bindings\n   * @memberof Twilio.Notify.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Notify.V1.ServiceContext.BindingContext}\n   */\n  /* jshint ignore:end */\n  function BindingListInstance(sid) {\n    return BindingListInstance.get(sid);\n  }\n\n  BindingListInstance._version = version;\n  // Path Solution\n  BindingListInstance._solution = {serviceSid: serviceSid};\n  BindingListInstance._uri = _.template(\n    '/Services/<%= serviceSid %>/Bindings' // jshint ignore:line\n  )(BindingListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a BindingInstance\n   *\n   * @function create\n   * @memberof Twilio.Notify.V1.ServiceContext.BindingList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.identity - The Identity to which this Binding belongs to.\n   * @param {binding.binding_type} opts.bindingType - The type of the Binding.\n   * @param {string} opts.address - The address specific to the channel.\n   * @param {string|list} [opts.tag] - The list of tags associated with this Binding.\n   * @param {string} [opts.notificationProtocolVersion] -\n   *          The version of the protocol used to send the notification.\n   * @param {string} [opts.credentialSid] -\n   *          The unique identifier of the Credential resource to be used to send notifications to this Binding.\n   * @param {string} [opts.endpoint] - DEPRECATED*\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed BindingInstance\n   */\n  /* jshint ignore:end */\n  BindingListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.identity)) {\n      throw new Error('Required parameter \"opts.identity\" missing.');\n    }\n    if (_.isUndefined(opts.bindingType)) {\n      throw new Error('Required parameter \"opts.bindingType\" missing.');\n    }\n    if (_.isUndefined(opts.address)) {\n      throw new Error('Required parameter \"opts.address\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Identity': _.get(opts, 'identity'),\n      'BindingType': _.get(opts, 'bindingType'),\n      'Address': _.get(opts, 'address'),\n      'Tag': serialize.map(_.get(opts, 'tag'), function(e) { return e; }),\n      'NotificationProtocolVersion': _.get(opts, 'notificationProtocolVersion'),\n      'CredentialSid': _.get(opts, 'credentialSid'),\n      'Endpoint': _.get(opts, 'endpoint')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new BindingInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams BindingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Notify.V1.ServiceContext.BindingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.startDate] -\n   *          Only list Bindings created on or after the given date.\n   * @param {Date} [opts.endDate] -\n   *          Only list Bindings created on or before the given date.\n   * @param {string|list} [opts.identity] -\n   *          Only list Bindings that have any of the specified Identities.\n   * @param {string|list} [opts.tag] -\n   *          Only list Bindings that have all of the specified Tags.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  BindingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists BindingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Notify.V1.ServiceContext.BindingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.startDate] -\n   *          Only list Bindings created on or after the given date.\n   * @param {Date} [opts.endDate] -\n   *          Only list Bindings created on or before the given date.\n   * @param {string|list} [opts.identity] -\n   *          Only list Bindings that have any of the specified Identities.\n   * @param {string|list} [opts.tag] -\n   *          Only list Bindings that have all of the specified Tags.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  BindingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of BindingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Notify.V1.ServiceContext.BindingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.startDate] -\n   *          Only list Bindings created on or after the given date.\n   * @param {Date} [opts.endDate] -\n   *          Only list Bindings created on or before the given date.\n   * @param {string|list} [opts.identity] -\n   *          Only list Bindings that have any of the specified Identities.\n   * @param {string|list} [opts.tag] -\n   *          Only list Bindings that have all of the specified Tags.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  BindingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'StartDate': serialize.iso8601Date(_.get(opts, 'startDate')),\n      'EndDate': serialize.iso8601Date(_.get(opts, 'endDate')),\n      'Identity': serialize.map(_.get(opts, 'identity'), function(e) { return e; }),\n      'Tag': serialize.map(_.get(opts, 'tag'), function(e) { return e; }),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new BindingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of BindingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Notify.V1.ServiceContext.BindingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  BindingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new BindingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a binding\n   *\n   * @function get\n   * @memberof Twilio.Notify.V1.ServiceContext.BindingList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.Notify.V1.ServiceContext.BindingContext}\n   */\n  /* jshint ignore:end */\n  BindingListInstance.get = function get(sid) {\n    return new BindingContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Notify.V1.ServiceContext.BindingList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  BindingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  BindingListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return BindingListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the BindingPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Notify.V1.ServiceContext.BindingPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {BindingSolution} solution - Path solution\n *\n * @returns BindingPage\n */\n/* jshint ignore:end */\nBindingPage = function BindingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(BindingPage.prototype, Page.prototype);\nBindingPage.prototype.constructor = BindingPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of BindingInstance\n *\n * @function getInstance\n * @memberof Twilio.Notify.V1.ServiceContext.BindingPage#\n *\n * @param {BindingPayload} payload - Payload response from the API\n *\n * @returns BindingInstance\n */\n/* jshint ignore:end */\nBindingPage.prototype.getInstance = function getInstance(payload) {\n  return new BindingInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Notify.V1.ServiceContext.BindingPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nBindingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nBindingPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the BindingContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Notify.V1.ServiceContext.BindingInstance\n *\n * @property {string} sid - The sid\n * @property {string} accountSid - The account_sid\n * @property {string} serviceSid - The service_sid\n * @property {string} credentialSid -\n *          The unique identifier of the Credential resource to be used to send notifications to this Binding.\n * @property {Date} dateCreated - The date_created\n * @property {Date} dateUpdated - The date_updated\n * @property {string} notificationProtocolVersion -\n *          The version of the protocol used to send the notification.\n * @property {string} endpoint - DEPRECATED*\n * @property {string} identity - The Identity to which this Binding belongs to.\n * @property {string} bindingType - The type of the Binding.\n * @property {string} address - The address specific to the channel.\n * @property {string} tags - The list of tags associated with this Binding.\n * @property {string} url - The url\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {BindingPayload} payload - The instance payload\n * @param {sid} serviceSid - The service_sid\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nBindingInstance = function BindingInstance(version, payload, serviceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.credentialSid = payload.credential_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.notificationProtocolVersion = payload.notification_protocol_version; // jshint ignore:line\n  this.endpoint = payload.endpoint; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.bindingType = payload.binding_type; // jshint ignore:line\n  this.address = payload.address; // jshint ignore:line\n  this.tags = payload.tags; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(BindingInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new BindingContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a BindingInstance\n *\n * @function fetch\n * @memberof Twilio.Notify.V1.ServiceContext.BindingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BindingInstance\n */\n/* jshint ignore:end */\nBindingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a BindingInstance\n *\n * @function remove\n * @memberof Twilio.Notify.V1.ServiceContext.BindingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BindingInstance\n */\n/* jshint ignore:end */\nBindingInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Notify.V1.ServiceContext.BindingInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nBindingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nBindingInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the BindingContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Notify.V1.ServiceContext.BindingContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid - The service_sid\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nBindingContext = function BindingContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, sid: sid, };\n  this._uri = _.template(\n    '/Services/<%= serviceSid %>/Bindings/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a BindingInstance\n *\n * @function fetch\n * @memberof Twilio.Notify.V1.ServiceContext.BindingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BindingInstance\n */\n/* jshint ignore:end */\nBindingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new BindingInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a BindingInstance\n *\n * @function remove\n * @memberof Twilio.Notify.V1.ServiceContext.BindingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BindingInstance\n */\n/* jshint ignore:end */\nBindingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Notify.V1.ServiceContext.BindingContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nBindingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nBindingContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  BindingList: BindingList,\n  BindingPage: BindingPage,\n  BindingInstance: BindingInstance,\n  BindingContext: BindingContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}