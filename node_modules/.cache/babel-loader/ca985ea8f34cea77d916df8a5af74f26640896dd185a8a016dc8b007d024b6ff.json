{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../../base/values'); /* jshint ignore:line */\n\nvar SubscribedTrackList;\nvar SubscribedTrackPage;\nvar SubscribedTrackInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscribedTrackList\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n * @param {string} roomSid - The room_sid\n * @param {string} subscriberSid - The subscriber_sid\n */\n/* jshint ignore:end */\nSubscribedTrackList = function SubscribedTrackList(version, roomSid, subscriberSid) {\n  /* jshint ignore:start */\n  /**\n   * @function subscribedTracks\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackContext}\n   */\n  /* jshint ignore:end */\n  function SubscribedTrackListInstance(sid) {\n    return SubscribedTrackListInstance.get(sid);\n  }\n  SubscribedTrackListInstance._version = version;\n  // Path Solution\n  SubscribedTrackListInstance._solution = {\n    roomSid: roomSid,\n    subscriberSid: subscriberSid\n  };\n  SubscribedTrackListInstance._uri = _.template('/Rooms/<%= roomSid %>/Participants/<%= subscriberSid %>/SubscribedTracks' // jshint ignore:line\n  )(SubscribedTrackListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams SubscribedTrackInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedAfter] - The date_created_after\n   * @param {Date} [opts.dateCreatedBefore] - The date_created_before\n   * @param {string} [opts.track] - The track\n   * @param {string} [opts.publisher] - The publisher\n   * @param {subscribed_track.kind} [opts.kind] - The kind\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SubscribedTrackInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedAfter] - The date_created_after\n   * @param {Date} [opts.dateCreatedBefore] - The date_created_before\n   * @param {string} [opts.track] - The track\n   * @param {string} [opts.publisher] - The publisher\n   * @param {subscribed_track.kind} [opts.kind] - The kind\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SubscribedTrackInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedAfter] - The date_created_after\n   * @param {Date} [opts.dateCreatedBefore] - The date_created_before\n   * @param {string} [opts.track] - The track\n   * @param {string} [opts.publisher] - The publisher\n   * @param {subscribed_track.kind} [opts.kind] - The kind\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'Track': _.get(opts, 'track'),\n      'Publisher': _.get(opts, 'publisher'),\n      'Kind': _.get(opts, 'kind'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SubscribedTrackPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SubscribedTrackInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SubscribedTrackPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * update a SubscribedTrackInstance\n   *\n   * @function update\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.track] - The track\n   * @param {string} [opts.publisher] - The publisher\n   * @param {subscribed_track.kind} [opts.kind] - The kind\n   * @param {subscribed_track.status} [opts.status] - The status\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SubscribedTrackInstance\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.update = function update(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Track': _.get(opts, 'track'),\n      'Publisher': _.get(opts, 'publisher'),\n      'Kind': _.get(opts, 'kind'),\n      'Status': _.get(opts, 'status')\n    });\n    var promise = this._version.update({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SubscribedTrackInstance(this._version, payload));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  SubscribedTrackListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return SubscribedTrackListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscribedTrackPage\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SubscribedTrackSolution} solution - Path solution\n *\n * @returns SubscribedTrackPage\n */\n/* jshint ignore:end */\nSubscribedTrackPage = function SubscribedTrackPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(SubscribedTrackPage.prototype, Page.prototype);\nSubscribedTrackPage.prototype.constructor = SubscribedTrackPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SubscribedTrackInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackPage#\n *\n * @param {SubscribedTrackPayload} payload - Payload response from the API\n *\n * @returns SubscribedTrackInstance\n */\n/* jshint ignore:end */\nSubscribedTrackPage.prototype.getInstance = function getInstance(payload) {\n  return new SubscribedTrackInstance(this._version, payload, this._solution.roomSid, this._solution.subscriberSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscribedTrackPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nSubscribedTrackPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscribedTrackContext\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackInstance\n *\n * @property {string} sid - The sid\n * @property {string} roomSid - The room_sid\n * @property {string} name - The name\n * @property {string} publisherSid - The publisher_sid\n * @property {string} subscriberSid - The subscriber_sid\n * @property {Date} dateCreated - The date_created\n * @property {Date} dateUpdated - The date_updated\n * @property {boolean} enabled - The enabled\n * @property {subscribed_track.kind} kind - The kind\n *\n * @param {V1} version - Version of the resource\n * @param {SubscribedTrackPayload} payload - The instance payload\n * @param {sid} roomSid - The room_sid\n * @param {sid} subscriberSid - The subscriber_sid\n */\n/* jshint ignore:end */\nSubscribedTrackInstance = function SubscribedTrackInstance(version, payload, roomSid, subscriberSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.roomSid = payload.room_sid; // jshint ignore:line\n  this.name = payload.name; // jshint ignore:line\n  this.publisherSid = payload.publisher_sid; // jshint ignore:line\n  this.subscriberSid = payload.subscriber_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.enabled = payload.enabled; // jshint ignore:line\n  this.kind = payload.kind; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    roomSid: roomSid,\n    subscriberSid: subscriberSid\n  };\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscribedTrackInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nSubscribedTrackInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  SubscribedTrackList: SubscribedTrackList,\n  SubscribedTrackPage: SubscribedTrackPage,\n  SubscribedTrackInstance: SubscribedTrackInstance\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","SubscribedTrackList","SubscribedTrackPage","SubscribedTrackInstance","version","roomSid","subscriberSid","SubscribedTrackListInstance","sid","get","_version","_solution","_uri","template","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601DateTime","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","update","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","room_sid","name","publisherSid","publisher_sid","subscriber_sid","dateCreated","date_created","dateUpdated","date_updated","enabled","kind","_context","undefined","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/video/v1/room/roomParticipant/roomParticipantSubscribedTrack.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar SubscribedTrackList;\nvar SubscribedTrackPage;\nvar SubscribedTrackInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscribedTrackList\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n * @param {string} roomSid - The room_sid\n * @param {string} subscriberSid - The subscriber_sid\n */\n/* jshint ignore:end */\nSubscribedTrackList = function SubscribedTrackList(version, roomSid,\n                                                    subscriberSid) {\n  /* jshint ignore:start */\n  /**\n   * @function subscribedTracks\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackContext}\n   */\n  /* jshint ignore:end */\n  function SubscribedTrackListInstance(sid) {\n    return SubscribedTrackListInstance.get(sid);\n  }\n\n  SubscribedTrackListInstance._version = version;\n  // Path Solution\n  SubscribedTrackListInstance._solution = {roomSid: roomSid, subscriberSid: subscriberSid};\n  SubscribedTrackListInstance._uri = _.template(\n    '/Rooms/<%= roomSid %>/Participants/<%= subscriberSid %>/SubscribedTracks' // jshint ignore:line\n  )(SubscribedTrackListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams SubscribedTrackInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedAfter] - The date_created_after\n   * @param {Date} [opts.dateCreatedBefore] - The date_created_before\n   * @param {string} [opts.track] - The track\n   * @param {string} [opts.publisher] - The publisher\n   * @param {subscribed_track.kind} [opts.kind] - The kind\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SubscribedTrackInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedAfter] - The date_created_after\n   * @param {Date} [opts.dateCreatedBefore] - The date_created_before\n   * @param {string} [opts.track] - The track\n   * @param {string} [opts.publisher] - The publisher\n   * @param {subscribed_track.kind} [opts.kind] - The kind\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SubscribedTrackInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedAfter] - The date_created_after\n   * @param {Date} [opts.dateCreatedBefore] - The date_created_before\n   * @param {string} [opts.track] - The track\n   * @param {string} [opts.publisher] - The publisher\n   * @param {subscribed_track.kind} [opts.kind] - The kind\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'Track': _.get(opts, 'track'),\n      'Publisher': _.get(opts, 'publisher'),\n      'Kind': _.get(opts, 'kind'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SubscribedTrackPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SubscribedTrackInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SubscribedTrackPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * update a SubscribedTrackInstance\n   *\n   * @function update\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.track] - The track\n   * @param {string} [opts.publisher] - The publisher\n   * @param {subscribed_track.kind} [opts.kind] - The kind\n   * @param {subscribed_track.status} [opts.status] - The status\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SubscribedTrackInstance\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.update = function update(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Track': _.get(opts, 'track'),\n      'Publisher': _.get(opts, 'publisher'),\n      'Kind': _.get(opts, 'kind'),\n      'Status': _.get(opts, 'status')\n    });\n\n    var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SubscribedTrackInstance(this._version, payload));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SubscribedTrackListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SubscribedTrackListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SubscribedTrackListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscribedTrackPage\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SubscribedTrackSolution} solution - Path solution\n *\n * @returns SubscribedTrackPage\n */\n/* jshint ignore:end */\nSubscribedTrackPage = function SubscribedTrackPage(version, response, solution)\n                                                    {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SubscribedTrackPage.prototype, Page.prototype);\nSubscribedTrackPage.prototype.constructor = SubscribedTrackPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SubscribedTrackInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackPage#\n *\n * @param {SubscribedTrackPayload} payload - Payload response from the API\n *\n * @returns SubscribedTrackInstance\n */\n/* jshint ignore:end */\nSubscribedTrackPage.prototype.getInstance = function getInstance(payload) {\n  return new SubscribedTrackInstance(\n    this._version,\n    payload,\n    this._solution.roomSid,\n    this._solution.subscriberSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscribedTrackPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSubscribedTrackPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscribedTrackContext\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackInstance\n *\n * @property {string} sid - The sid\n * @property {string} roomSid - The room_sid\n * @property {string} name - The name\n * @property {string} publisherSid - The publisher_sid\n * @property {string} subscriberSid - The subscriber_sid\n * @property {Date} dateCreated - The date_created\n * @property {Date} dateUpdated - The date_updated\n * @property {boolean} enabled - The enabled\n * @property {subscribed_track.kind} kind - The kind\n *\n * @param {V1} version - Version of the resource\n * @param {SubscribedTrackPayload} payload - The instance payload\n * @param {sid} roomSid - The room_sid\n * @param {sid} subscriberSid - The subscriber_sid\n */\n/* jshint ignore:end */\nSubscribedTrackInstance = function SubscribedTrackInstance(version, payload,\n                                                            roomSid,\n                                                            subscriberSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.roomSid = payload.room_sid; // jshint ignore:line\n  this.name = payload.name; // jshint ignore:line\n  this.publisherSid = payload.publisher_sid; // jshint ignore:line\n  this.subscriberSid = payload.subscriber_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.enabled = payload.enabled; // jshint ignore:line\n  this.kind = payload.kind; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {roomSid: roomSid, subscriberSid: subscriberSid, };\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscribedTrackInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSubscribedTrackInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SubscribedTrackList: SubscribedTrackList,\n  SubscribedTrackPage: SubscribedTrackPage,\n  SubscribedTrackInstance: SubscribedTrackInstance\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}