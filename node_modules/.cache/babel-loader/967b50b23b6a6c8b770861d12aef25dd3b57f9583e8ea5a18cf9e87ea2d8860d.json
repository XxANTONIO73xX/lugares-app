{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar serialize = require('../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar RecordingSettingsList;\nvar RecordingSettingsPage;\nvar RecordingSettingsInstance;\nvar RecordingSettingsContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the RecordingSettingsList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.RecordingSettingsList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nRecordingSettingsList = function RecordingSettingsList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function recordingSettings\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RecordingSettingsContext}\n   */\n  /* jshint ignore:end */\n  function RecordingSettingsListInstance(sid) {\n    return RecordingSettingsListInstance.get(sid);\n  }\n  RecordingSettingsListInstance._version = version;\n  // Path Solution\n  RecordingSettingsListInstance._solution = {};\n  /* jshint ignore:start */\n  /**\n   * Constructs a recording_settings\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RecordingSettingsList#\n   *\n   * @returns {Twilio.Video.V1.RecordingSettingsContext}\n   */\n  /* jshint ignore:end */\n  RecordingSettingsListInstance.get = function get() {\n    return new RecordingSettingsContext(this._version);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RecordingSettingsList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  RecordingSettingsListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  RecordingSettingsListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return RecordingSettingsListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the RecordingSettingsPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.RecordingSettingsPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {RecordingSettingsSolution} solution - Path solution\n *\n * @returns RecordingSettingsPage\n */\n/* jshint ignore:end */\nRecordingSettingsPage = function RecordingSettingsPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(RecordingSettingsPage.prototype, Page.prototype);\nRecordingSettingsPage.prototype.constructor = RecordingSettingsPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of RecordingSettingsInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RecordingSettingsPage#\n *\n * @param {RecordingSettingsPayload} payload - Payload response from the API\n *\n * @returns RecordingSettingsInstance\n */\n/* jshint ignore:end */\nRecordingSettingsPage.prototype.getInstance = function getInstance(payload) {\n  return new RecordingSettingsInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RecordingSettingsPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRecordingSettingsPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nRecordingSettingsPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the RecordingSettingsContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.RecordingSettingsInstance\n *\n * @property {string} accountSid - The Twilio Account SID associated with this item\n * @property {string} friendlyName -\n *          Friendly name of the configuration to be shown in the console\n * @property {string} awsCredentialsSid -\n *          SID of the Stored Credential resource CRxx\n * @property {string} awsS3Url -\n *          URL of the S3 bucket where the recordings should be stored. We only support DNS-compliant URLs like http://<my-bucket>.s3-<aws-region>.amazonaws.com/recordings, where recordings is the path where you want recordings to be stored.\n * @property {boolean} awsStorageEnabled -\n *          true|false When set to true, all Recordings will be written to the AwsS3Url specified above. When set to false, all Recordings will be stored in Twilio's cloud.\n * @property {string} encryptionKeySid - SID of the Public Key resource CRxx\n * @property {boolean} encryptionEnabled -\n *          true|false When set to true, all Recordings will be stored encrypted.\n * @property {string} url - The url\n *\n * @param {V1} version - Version of the resource\n * @param {RecordingSettingsPayload} payload - The instance payload\n */\n/* jshint ignore:end */\nRecordingSettingsInstance = function RecordingSettingsInstance(version, payload) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.awsCredentialsSid = payload.aws_credentials_sid; // jshint ignore:line\n  this.awsS3Url = payload.aws_s3_url; // jshint ignore:line\n  this.awsStorageEnabled = payload.aws_storage_enabled; // jshint ignore:line\n  this.encryptionKeySid = payload.encryption_key_sid; // jshint ignore:line\n  this.encryptionEnabled = payload.encryption_enabled; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {};\n};\nObject.defineProperty(RecordingSettingsInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new RecordingSettingsContext(this._version);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a RecordingSettingsInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RecordingSettingsInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RecordingSettingsInstance\n */\n/* jshint ignore:end */\nRecordingSettingsInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * create a RecordingSettingsInstance\n *\n * @function create\n * @memberof Twilio.Video.V1.RecordingSettingsInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName -\n *          Friendly name of the configuration to be shown in the console\n * @param {string} [opts.awsCredentialsSid] -\n *          SID of the Stored Credential resource CRxx\n * @param {string} [opts.encryptionKeySid] - SID of the Public Key resource CRxx\n * @param {string} [opts.awsS3Url] -\n *          Identity of the external location where the recordings should be stored. We only support DNS-compliant URLs like http://<my-bucket>.s3-<aws-region>.amazonaws.com/recordings, where recordings is the path where you want recordings to be stored.\n * @param {boolean} [opts.awsStorageEnabled] -\n *          true|false When set to true, all Recordings will be written to the AwsS3Url specified above. When set to false, all Recordings will be stored in Twilio's cloud.\n * @param {boolean} [opts.encryptionEnabled] -\n *          true|false When set to true, all Recordings will be stored encrypted.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RecordingSettingsInstance\n */\n/* jshint ignore:end */\nRecordingSettingsInstance.prototype.create = function create(opts, callback) {\n  return this._proxy.create(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RecordingSettingsInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRecordingSettingsInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nRecordingSettingsInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the RecordingSettingsContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.RecordingSettingsContext\n *\n * @param {V1} version - Version of the resource\n */\n/* jshint ignore:end */\nRecordingSettingsContext = function RecordingSettingsContext(version) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {};\n  this._uri = _.template('/RecordingSettings/Default' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a RecordingSettingsInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RecordingSettingsContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RecordingSettingsInstance\n */\n/* jshint ignore:end */\nRecordingSettingsContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new RecordingSettingsInstance(this._version, payload));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * create a RecordingSettingsInstance\n *\n * @function create\n * @memberof Twilio.Video.V1.RecordingSettingsContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName -\n *          Friendly name of the configuration to be shown in the console\n * @param {string} [opts.awsCredentialsSid] -\n *          SID of the Stored Credential resource CRxx\n * @param {string} [opts.encryptionKeySid] - SID of the Public Key resource CRxx\n * @param {string} [opts.awsS3Url] -\n *          Identity of the external location where the recordings should be stored. We only support DNS-compliant URLs like http://<my-bucket>.s3-<aws-region>.amazonaws.com/recordings, where recordings is the path where you want recordings to be stored.\n * @param {boolean} [opts.awsStorageEnabled] -\n *          true|false When set to true, all Recordings will be written to the AwsS3Url specified above. When set to false, all Recordings will be stored in Twilio's cloud.\n * @param {boolean} [opts.encryptionEnabled] -\n *          true|false When set to true, all Recordings will be stored encrypted.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RecordingSettingsInstance\n */\n/* jshint ignore:end */\nRecordingSettingsContext.prototype.create = function create(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.friendlyName)) {\n    throw new Error('Required parameter \"opts.friendlyName\" missing.');\n  }\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'AwsCredentialsSid': _.get(opts, 'awsCredentialsSid'),\n    'EncryptionKeySid': _.get(opts, 'encryptionKeySid'),\n    'AwsS3Url': _.get(opts, 'awsS3Url'),\n    'AwsStorageEnabled': serialize.bool(_.get(opts, 'awsStorageEnabled')),\n    'EncryptionEnabled': serialize.bool(_.get(opts, 'encryptionEnabled'))\n  });\n  var promise = this._version.create({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new RecordingSettingsInstance(this._version, payload));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RecordingSettingsContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRecordingSettingsContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nRecordingSettingsContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  RecordingSettingsList: RecordingSettingsList,\n  RecordingSettingsPage: RecordingSettingsPage,\n  RecordingSettingsInstance: RecordingSettingsInstance,\n  RecordingSettingsContext: RecordingSettingsContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","serialize","values","RecordingSettingsList","RecordingSettingsPage","RecordingSettingsInstance","RecordingSettingsContext","version","RecordingSettingsListInstance","sid","get","_version","_solution","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","payload","clone","forOwn","value","key","startsWith","isFunction","accountSid","account_sid","friendlyName","friendly_name","awsCredentialsSid","aws_credentials_sid","awsS3Url","aws_s3_url","awsStorageEnabled","aws_storage_enabled","encryptionKeySid","encryption_key_sid","encryptionEnabled","encryption_enabled","url","_context","undefined","Object","defineProperty","fetch","callback","_proxy","create","opts","_uri","template","deferred","defer","promise","uri","method","then","resolve","bind","catch","error","reject","nodeify","isUndefined","Error","data","of","bool","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/video/v1/recordingSettings.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar RecordingSettingsList;\nvar RecordingSettingsPage;\nvar RecordingSettingsInstance;\nvar RecordingSettingsContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the RecordingSettingsList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.RecordingSettingsList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nRecordingSettingsList = function RecordingSettingsList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function recordingSettings\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RecordingSettingsContext}\n   */\n  /* jshint ignore:end */\n  function RecordingSettingsListInstance(sid) {\n    return RecordingSettingsListInstance.get(sid);\n  }\n\n  RecordingSettingsListInstance._version = version;\n  // Path Solution\n  RecordingSettingsListInstance._solution = {};\n  /* jshint ignore:start */\n  /**\n   * Constructs a recording_settings\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RecordingSettingsList#\n   *\n   * @returns {Twilio.Video.V1.RecordingSettingsContext}\n   */\n  /* jshint ignore:end */\n  RecordingSettingsListInstance.get = function get() {\n    return new RecordingSettingsContext(this._version);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RecordingSettingsList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  RecordingSettingsListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  RecordingSettingsListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return RecordingSettingsListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RecordingSettingsPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.RecordingSettingsPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {RecordingSettingsSolution} solution - Path solution\n *\n * @returns RecordingSettingsPage\n */\n/* jshint ignore:end */\nRecordingSettingsPage = function RecordingSettingsPage(version, response,\n                                                        solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(RecordingSettingsPage.prototype, Page.prototype);\nRecordingSettingsPage.prototype.constructor = RecordingSettingsPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of RecordingSettingsInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RecordingSettingsPage#\n *\n * @param {RecordingSettingsPayload} payload - Payload response from the API\n *\n * @returns RecordingSettingsInstance\n */\n/* jshint ignore:end */\nRecordingSettingsPage.prototype.getInstance = function getInstance(payload) {\n  return new RecordingSettingsInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RecordingSettingsPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRecordingSettingsPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nRecordingSettingsPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RecordingSettingsContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.RecordingSettingsInstance\n *\n * @property {string} accountSid - The Twilio Account SID associated with this item\n * @property {string} friendlyName -\n *          Friendly name of the configuration to be shown in the console\n * @property {string} awsCredentialsSid -\n *          SID of the Stored Credential resource CRxx\n * @property {string} awsS3Url -\n *          URL of the S3 bucket where the recordings should be stored. We only support DNS-compliant URLs like http://<my-bucket>.s3-<aws-region>.amazonaws.com/recordings, where recordings is the path where you want recordings to be stored.\n * @property {boolean} awsStorageEnabled -\n *          true|false When set to true, all Recordings will be written to the AwsS3Url specified above. When set to false, all Recordings will be stored in Twilio's cloud.\n * @property {string} encryptionKeySid - SID of the Public Key resource CRxx\n * @property {boolean} encryptionEnabled -\n *          true|false When set to true, all Recordings will be stored encrypted.\n * @property {string} url - The url\n *\n * @param {V1} version - Version of the resource\n * @param {RecordingSettingsPayload} payload - The instance payload\n */\n/* jshint ignore:end */\nRecordingSettingsInstance = function RecordingSettingsInstance(version, payload)\n    {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.awsCredentialsSid = payload.aws_credentials_sid; // jshint ignore:line\n  this.awsS3Url = payload.aws_s3_url; // jshint ignore:line\n  this.awsStorageEnabled = payload.aws_storage_enabled; // jshint ignore:line\n  this.encryptionKeySid = payload.encryption_key_sid; // jshint ignore:line\n  this.encryptionEnabled = payload.encryption_enabled; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {};\n};\n\nObject.defineProperty(RecordingSettingsInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new RecordingSettingsContext(this._version);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a RecordingSettingsInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RecordingSettingsInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RecordingSettingsInstance\n */\n/* jshint ignore:end */\nRecordingSettingsInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * create a RecordingSettingsInstance\n *\n * @function create\n * @memberof Twilio.Video.V1.RecordingSettingsInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName -\n *          Friendly name of the configuration to be shown in the console\n * @param {string} [opts.awsCredentialsSid] -\n *          SID of the Stored Credential resource CRxx\n * @param {string} [opts.encryptionKeySid] - SID of the Public Key resource CRxx\n * @param {string} [opts.awsS3Url] -\n *          Identity of the external location where the recordings should be stored. We only support DNS-compliant URLs like http://<my-bucket>.s3-<aws-region>.amazonaws.com/recordings, where recordings is the path where you want recordings to be stored.\n * @param {boolean} [opts.awsStorageEnabled] -\n *          true|false When set to true, all Recordings will be written to the AwsS3Url specified above. When set to false, all Recordings will be stored in Twilio's cloud.\n * @param {boolean} [opts.encryptionEnabled] -\n *          true|false When set to true, all Recordings will be stored encrypted.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RecordingSettingsInstance\n */\n/* jshint ignore:end */\nRecordingSettingsInstance.prototype.create = function create(opts, callback) {\n  return this._proxy.create(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RecordingSettingsInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRecordingSettingsInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nRecordingSettingsInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RecordingSettingsContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Video.V1.RecordingSettingsContext\n *\n * @param {V1} version - Version of the resource\n */\n/* jshint ignore:end */\nRecordingSettingsContext = function RecordingSettingsContext(version) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {};\n  this._uri = _.template(\n    '/RecordingSettings/Default' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a RecordingSettingsInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RecordingSettingsContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RecordingSettingsInstance\n */\n/* jshint ignore:end */\nRecordingSettingsContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new RecordingSettingsInstance(this._version, payload));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * create a RecordingSettingsInstance\n *\n * @function create\n * @memberof Twilio.Video.V1.RecordingSettingsContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName -\n *          Friendly name of the configuration to be shown in the console\n * @param {string} [opts.awsCredentialsSid] -\n *          SID of the Stored Credential resource CRxx\n * @param {string} [opts.encryptionKeySid] - SID of the Public Key resource CRxx\n * @param {string} [opts.awsS3Url] -\n *          Identity of the external location where the recordings should be stored. We only support DNS-compliant URLs like http://<my-bucket>.s3-<aws-region>.amazonaws.com/recordings, where recordings is the path where you want recordings to be stored.\n * @param {boolean} [opts.awsStorageEnabled] -\n *          true|false When set to true, all Recordings will be written to the AwsS3Url specified above. When set to false, all Recordings will be stored in Twilio's cloud.\n * @param {boolean} [opts.encryptionEnabled] -\n *          true|false When set to true, all Recordings will be stored encrypted.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RecordingSettingsInstance\n */\n/* jshint ignore:end */\nRecordingSettingsContext.prototype.create = function create(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.friendlyName)) {\n    throw new Error('Required parameter \"opts.friendlyName\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'AwsCredentialsSid': _.get(opts, 'awsCredentialsSid'),\n    'EncryptionKeySid': _.get(opts, 'encryptionKeySid'),\n    'AwsS3Url': _.get(opts, 'awsS3Url'),\n    'AwsStorageEnabled': serialize.bool(_.get(opts, 'awsStorageEnabled')),\n    'EncryptionEnabled': serialize.bool(_.get(opts, 'encryptionEnabled'))\n  });\n\n  var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new RecordingSettingsInstance(this._version, payload));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RecordingSettingsContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRecordingSettingsContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nRecordingSettingsContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  RecordingSettingsList: RecordingSettingsList,\n  RecordingSettingsPage: RecordingSettingsPage,\n  RecordingSettingsInstance: RecordingSettingsInstance,\n  RecordingSettingsContext: RecordingSettingsContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}