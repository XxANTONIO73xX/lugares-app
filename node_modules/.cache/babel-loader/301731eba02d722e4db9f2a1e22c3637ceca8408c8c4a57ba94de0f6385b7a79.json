{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../../base/values'); /* jshint ignore:line */\n\nvar ParticipantList;\nvar ParticipantPage;\nvar ParticipantInstance;\nvar ParticipantContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantList\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n * @param {string} conferenceSid - The SID of the conference the participant is in\n */\n/* jshint ignore:end */\nParticipantList = function ParticipantList(version, accountSid, conferenceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function participants\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext}\n   */\n  /* jshint ignore:end */\n  function ParticipantListInstance(sid) {\n    return ParticipantListInstance.get(sid);\n  }\n  ParticipantListInstance._version = version;\n  // Path Solution\n  ParticipantListInstance._solution = {\n    accountSid: accountSid,\n    conferenceSid: conferenceSid\n  };\n  ParticipantListInstance._uri = _.template('/Accounts/<%= accountSid %>/Conferences/<%= conferenceSid %>/Participants.json' // jshint ignore:line\n  )(ParticipantListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a ParticipantInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.from - The `from` phone number used to invite a participant\n   * @param {string} opts.to -\n   *          The number, client id, or sip address of the new participant\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method we should use to call `status_callback`\n   * @param {string|list} [opts.statusCallbackEvent] -\n   *          Set state change events that will trigger a callback\n   * @param {number} [opts.timeout] -\n   *          he number of seconds that we should wait for an answer\n   * @param {boolean} [opts.record] -\n   *          Whether to record the participant and their conferences\n   * @param {boolean} [opts.muted] - Whether to mute the agent\n   * @param {string} [opts.beep] -\n   *          Whether to play a notification beep to the conference when the participant joins\n   * @param {boolean} [opts.startConferenceOnEnter] -\n   *          Whether the conference starts when the participant joins the conference\n   * @param {boolean} [opts.endConferenceOnExit] -\n   *          Whether to end the conference when the participant leaves\n   * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n   * @param {string} [opts.waitMethod] -\n   *          The HTTP method we should use to call `wait_url`\n   * @param {boolean} [opts.earlyMedia] -\n   *          Whether agents can hear the state of the outbound call\n   * @param {number} [opts.maxParticipants] -\n   *          The maximum number of agent conference participants\n   * @param {string} [opts.conferenceRecord] -\n   *          Whether to record the conference the participant is joining\n   * @param {string} [opts.conferenceTrim] -\n   *          Whether to trim leading and trailing silence from your recorded conference audio files\n   * @param {string} [opts.conferenceStatusCallback] -\n   *          The callback URL for conference events\n   * @param {string} [opts.conferenceStatusCallbackMethod] -\n   *          HTTP method for requesting `conference_status_callback` URL\n   * @param {string|list} [opts.conferenceStatusCallbackEvent] -\n   *          The conference state changes that should generate a call to `conference_status_callback`\n   * @param {string} [opts.recordingChannels] -\n   *          Specify `mono` or `dual` recording channels\n   * @param {string} [opts.recordingStatusCallback] -\n   *          The URL that we should call using the `recording_status_callback_method` when the recording status changes\n   * @param {string} [opts.recordingStatusCallbackMethod] -\n   *          The HTTP method we should use when we call `recording_status_callback`\n   * @param {string} [opts.sipAuthUsername] -\n   *          The SIP username used for authentication\n   * @param {string} [opts.sipAuthPassword] - The SIP password for authentication\n   * @param {string} [opts.region] -\n   *          The region where we should mix the conference audio\n   * @param {string} [opts.conferenceRecordingStatusCallback] -\n   *          The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available\n   * @param {string} [opts.conferenceRecordingStatusCallbackMethod] -\n   *          The HTTP method we should use to call `conference_recording_status_callback`\n   * @param {string|list} [opts.recordingStatusCallbackEvent] -\n   *          The recording state changes that should generate a call to `recording_status_callback`\n   * @param {string|list} [opts.conferenceRecordingStatusCallbackEvent] -\n   *          The conference recording state changes that should generate a call to `conference_recording_status_callback`\n   * @param {boolean} [opts.coaching] - Indicates if the participant changed to coach\n   * @param {string} [opts.callSidToCoach] -\n   *          The SID of the participant who is being `coached`\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ParticipantInstance\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.from)) {\n      throw new Error('Required parameter \"opts.from\" missing.');\n    }\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'From': _.get(opts, 'from'),\n      'To': _.get(opts, 'to'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'StatusCallbackEvent': serialize.map(_.get(opts, 'statusCallbackEvent'), function (e) {\n        return e;\n      }),\n      'Timeout': _.get(opts, 'timeout'),\n      'Record': serialize.bool(_.get(opts, 'record')),\n      'Muted': serialize.bool(_.get(opts, 'muted')),\n      'Beep': _.get(opts, 'beep'),\n      'StartConferenceOnEnter': serialize.bool(_.get(opts, 'startConferenceOnEnter')),\n      'EndConferenceOnExit': serialize.bool(_.get(opts, 'endConferenceOnExit')),\n      'WaitUrl': _.get(opts, 'waitUrl'),\n      'WaitMethod': _.get(opts, 'waitMethod'),\n      'EarlyMedia': serialize.bool(_.get(opts, 'earlyMedia')),\n      'MaxParticipants': _.get(opts, 'maxParticipants'),\n      'ConferenceRecord': _.get(opts, 'conferenceRecord'),\n      'ConferenceTrim': _.get(opts, 'conferenceTrim'),\n      'ConferenceStatusCallback': _.get(opts, 'conferenceStatusCallback'),\n      'ConferenceStatusCallbackMethod': _.get(opts, 'conferenceStatusCallbackMethod'),\n      'ConferenceStatusCallbackEvent': serialize.map(_.get(opts, 'conferenceStatusCallbackEvent'), function (e) {\n        return e;\n      }),\n      'RecordingChannels': _.get(opts, 'recordingChannels'),\n      'RecordingStatusCallback': _.get(opts, 'recordingStatusCallback'),\n      'RecordingStatusCallbackMethod': _.get(opts, 'recordingStatusCallbackMethod'),\n      'SipAuthUsername': _.get(opts, 'sipAuthUsername'),\n      'SipAuthPassword': _.get(opts, 'sipAuthPassword'),\n      'Region': _.get(opts, 'region'),\n      'ConferenceRecordingStatusCallback': _.get(opts, 'conferenceRecordingStatusCallback'),\n      'ConferenceRecordingStatusCallbackMethod': _.get(opts, 'conferenceRecordingStatusCallbackMethod'),\n      'RecordingStatusCallbackEvent': serialize.map(_.get(opts, 'recordingStatusCallbackEvent'), function (e) {\n        return e;\n      }),\n      'ConferenceRecordingStatusCallbackEvent': serialize.map(_.get(opts, 'conferenceRecordingStatusCallbackEvent'), function (e) {\n        return e;\n      }),\n      'Coaching': serialize.bool(_.get(opts, 'coaching')),\n      'CallSidToCoach': _.get(opts, 'callSidToCoach')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantInstance(this._version, payload, this._solution.accountSid, this._solution.conferenceSid, this._solution.callSid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ParticipantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.muted] -\n   *          Whether to return only participants that are muted\n   * @param {boolean} [opts.hold] -\n   *          Whether to return only participants that are on hold\n   * @param {boolean} [opts.coaching] -\n   *          Whether to return only participants who are coaching another call\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ParticipantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.muted] -\n   *          Whether to return only participants that are muted\n   * @param {boolean} [opts.hold] -\n   *          Whether to return only participants that are on hold\n   * @param {boolean} [opts.coaching] -\n   *          Whether to return only participants who are coaching another call\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.muted] -\n   *          Whether to return only participants that are muted\n   * @param {boolean} [opts.hold] -\n   *          Whether to return only participants that are on hold\n   * @param {boolean} [opts.coaching] -\n   *          Whether to return only participants who are coaching another call\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Muted': serialize.bool(_.get(opts, 'muted')),\n      'Hold': serialize.bool(_.get(opts, 'hold')),\n      'Coaching': serialize.bool(_.get(opts, 'coaching')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a participant\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {string} callSid - The Call SID of the resource to fetch\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext}\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.get = function get(callSid) {\n    return new ParticipantContext(this._version, this._solution.accountSid, this._solution.conferenceSid, callSid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  ParticipantListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return ParticipantListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ParticipantSolution} solution - Path solution\n *\n * @returns ParticipantPage\n */\n/* jshint ignore:end */\nParticipantPage = function ParticipantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(ParticipantPage.prototype, Page.prototype);\nParticipantPage.prototype.constructor = ParticipantPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ParticipantInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantPage#\n *\n * @param {ParticipantPayload} payload - Payload response from the API\n *\n * @returns ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantPage.prototype.getInstance = function getInstance(payload) {\n  return new ParticipantInstance(this._version, payload, this._solution.accountSid, this._solution.conferenceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nParticipantPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} callSid - The SID of the Call the resource is associated with\n * @property {string} callSidToCoach -\n *          The SID of the participant who is being `coached`\n * @property {boolean} coaching - Indicates if the participant changed to coach\n * @property {string} conferenceSid -\n *          The SID of the conference the participant is in\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {boolean} endConferenceOnExit -\n *          Whether the conference ends when the participant leaves\n * @property {boolean} muted - Whether the participant is muted\n * @property {boolean} hold - Whether the participant is on hold\n * @property {boolean} startConferenceOnEnter -\n *          Whether the conference starts when the participant joins the conference\n * @property {participant.status} status -\n *          The status of the participant's call in a session\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n *\n * @param {V2010} version - Version of the resource\n * @param {ParticipantPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} conferenceSid - The SID of the conference the participant is in\n * @param {sid} callSid - The Call SID of the resource to fetch\n */\n/* jshint ignore:end */\nParticipantInstance = function ParticipantInstance(version, payload, accountSid, conferenceSid, callSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.callSid = payload.call_sid; // jshint ignore:line\n  this.callSidToCoach = payload.call_sid_to_coach; // jshint ignore:line\n  this.coaching = payload.coaching; // jshint ignore:line\n  this.conferenceSid = payload.conference_sid; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.endConferenceOnExit = payload.end_conference_on_exit; // jshint ignore:line\n  this.muted = payload.muted; // jshint ignore:line\n  this.hold = payload.hold; // jshint ignore:line\n  this.startConferenceOnEnter = payload.start_conference_on_enter; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    conferenceSid: conferenceSid,\n    callSid: callSid || this.callSid\n  };\n};\nObject.defineProperty(ParticipantInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ParticipantContext(this._version, this._solution.accountSid, this._solution.conferenceSid, this._solution.callSid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.muted] - Whether the participant should be muted\n * @param {boolean} [opts.hold] - Whether the participant should be on hold\n * @param {string} [opts.holdUrl] -\n *          The URL we call using the `hold_method` for  music that plays when the participant is on hold\n * @param {string} [opts.holdMethod] -\n *          The HTTP method we should use to call hold_url\n * @param {string} [opts.announceUrl] -\n *          The URL we call using the `announce_method` for an announcement to the participant\n * @param {string} [opts.announceMethod] -\n *          The HTTP method we should use to call announce_url\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.beepOnExit] -\n *          Whether to play a notification beep to the conference when the participant exit\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the participant leaves\n * @param {boolean} [opts.coaching] - Indicates if the participant changed to coach\n * @param {string} [opts.callSidToCoach] -\n *          The SID of the participant who is being `coached`\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ParticipantInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nParticipantInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} conferenceSid -\n *          The SID of the conference with the participant to fetch\n * @param {sid} callSid - The Call SID of the resource to fetch\n */\n/* jshint ignore:end */\nParticipantContext = function ParticipantContext(version, accountSid, conferenceSid, callSid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    accountSid: accountSid,\n    conferenceSid: conferenceSid,\n    callSid: callSid\n  };\n  this._uri = _.template('/Accounts/<%= accountSid %>/Conferences/<%= conferenceSid %>/Participants/<%= callSid %>.json' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ParticipantInstance(this._version, payload, this._solution.accountSid, this._solution.conferenceSid, this._solution.callSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.muted] - Whether the participant should be muted\n * @param {boolean} [opts.hold] - Whether the participant should be on hold\n * @param {string} [opts.holdUrl] -\n *          The URL we call using the `hold_method` for  music that plays when the participant is on hold\n * @param {string} [opts.holdMethod] -\n *          The HTTP method we should use to call hold_url\n * @param {string} [opts.announceUrl] -\n *          The URL we call using the `announce_method` for an announcement to the participant\n * @param {string} [opts.announceMethod] -\n *          The HTTP method we should use to call announce_url\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.beepOnExit] -\n *          Whether to play a notification beep to the conference when the participant exit\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the participant leaves\n * @param {boolean} [opts.coaching] - Indicates if the participant changed to coach\n * @param {string} [opts.callSidToCoach] -\n *          The SID of the participant who is being `coached`\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Muted': serialize.bool(_.get(opts, 'muted')),\n    'Hold': serialize.bool(_.get(opts, 'hold')),\n    'HoldUrl': _.get(opts, 'holdUrl'),\n    'HoldMethod': _.get(opts, 'holdMethod'),\n    'AnnounceUrl': _.get(opts, 'announceUrl'),\n    'AnnounceMethod': _.get(opts, 'announceMethod'),\n    'WaitUrl': _.get(opts, 'waitUrl'),\n    'WaitMethod': _.get(opts, 'waitMethod'),\n    'BeepOnExit': serialize.bool(_.get(opts, 'beepOnExit')),\n    'EndConferenceOnExit': serialize.bool(_.get(opts, 'endConferenceOnExit')),\n    'Coaching': serialize.bool(_.get(opts, 'coaching')),\n    'CallSidToCoach': _.get(opts, 'callSidToCoach')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ParticipantInstance(this._version, payload, this._solution.accountSid, this._solution.conferenceSid, this._solution.callSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ParticipantInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nParticipantContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  ParticipantList: ParticipantList,\n  ParticipantPage: ParticipantPage,\n  ParticipantInstance: ParticipantInstance,\n  ParticipantContext: ParticipantContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","ParticipantList","ParticipantPage","ParticipantInstance","ParticipantContext","version","accountSid","conferenceSid","ParticipantListInstance","sid","get","_version","_solution","_uri","template","create","opts","callback","isUndefined","Error","from","to","deferred","defer","data","of","map","e","bool","promise","uri","method","then","payload","resolve","callSid","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","pageLimit","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","call_sid","callSidToCoach","call_sid_to_coach","coaching","conference_sid","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","endConferenceOnExit","end_conference_on_exit","muted","hold","startConferenceOnEnter","start_conference_on_enter","status","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/api/v2010/account/conference/participant.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar ParticipantList;\nvar ParticipantPage;\nvar ParticipantInstance;\nvar ParticipantContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantList\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n * @param {string} conferenceSid - The SID of the conference the participant is in\n */\n/* jshint ignore:end */\nParticipantList = function ParticipantList(version, accountSid, conferenceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function participants\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext}\n   */\n  /* jshint ignore:end */\n  function ParticipantListInstance(sid) {\n    return ParticipantListInstance.get(sid);\n  }\n\n  ParticipantListInstance._version = version;\n  // Path Solution\n  ParticipantListInstance._solution = {accountSid: accountSid, conferenceSid: conferenceSid};\n  ParticipantListInstance._uri = _.template(\n    '/Accounts/<%= accountSid %>/Conferences/<%= conferenceSid %>/Participants.json' // jshint ignore:line\n  )(ParticipantListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a ParticipantInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.from - The `from` phone number used to invite a participant\n   * @param {string} opts.to -\n   *          The number, client id, or sip address of the new participant\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method we should use to call `status_callback`\n   * @param {string|list} [opts.statusCallbackEvent] -\n   *          Set state change events that will trigger a callback\n   * @param {number} [opts.timeout] -\n   *          he number of seconds that we should wait for an answer\n   * @param {boolean} [opts.record] -\n   *          Whether to record the participant and their conferences\n   * @param {boolean} [opts.muted] - Whether to mute the agent\n   * @param {string} [opts.beep] -\n   *          Whether to play a notification beep to the conference when the participant joins\n   * @param {boolean} [opts.startConferenceOnEnter] -\n   *          Whether the conference starts when the participant joins the conference\n   * @param {boolean} [opts.endConferenceOnExit] -\n   *          Whether to end the conference when the participant leaves\n   * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n   * @param {string} [opts.waitMethod] -\n   *          The HTTP method we should use to call `wait_url`\n   * @param {boolean} [opts.earlyMedia] -\n   *          Whether agents can hear the state of the outbound call\n   * @param {number} [opts.maxParticipants] -\n   *          The maximum number of agent conference participants\n   * @param {string} [opts.conferenceRecord] -\n   *          Whether to record the conference the participant is joining\n   * @param {string} [opts.conferenceTrim] -\n   *          Whether to trim leading and trailing silence from your recorded conference audio files\n   * @param {string} [opts.conferenceStatusCallback] -\n   *          The callback URL for conference events\n   * @param {string} [opts.conferenceStatusCallbackMethod] -\n   *          HTTP method for requesting `conference_status_callback` URL\n   * @param {string|list} [opts.conferenceStatusCallbackEvent] -\n   *          The conference state changes that should generate a call to `conference_status_callback`\n   * @param {string} [opts.recordingChannels] -\n   *          Specify `mono` or `dual` recording channels\n   * @param {string} [opts.recordingStatusCallback] -\n   *          The URL that we should call using the `recording_status_callback_method` when the recording status changes\n   * @param {string} [opts.recordingStatusCallbackMethod] -\n   *          The HTTP method we should use when we call `recording_status_callback`\n   * @param {string} [opts.sipAuthUsername] -\n   *          The SIP username used for authentication\n   * @param {string} [opts.sipAuthPassword] - The SIP password for authentication\n   * @param {string} [opts.region] -\n   *          The region where we should mix the conference audio\n   * @param {string} [opts.conferenceRecordingStatusCallback] -\n   *          The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available\n   * @param {string} [opts.conferenceRecordingStatusCallbackMethod] -\n   *          The HTTP method we should use to call `conference_recording_status_callback`\n   * @param {string|list} [opts.recordingStatusCallbackEvent] -\n   *          The recording state changes that should generate a call to `recording_status_callback`\n   * @param {string|list} [opts.conferenceRecordingStatusCallbackEvent] -\n   *          The conference recording state changes that should generate a call to `conference_recording_status_callback`\n   * @param {boolean} [opts.coaching] - Indicates if the participant changed to coach\n   * @param {string} [opts.callSidToCoach] -\n   *          The SID of the participant who is being `coached`\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ParticipantInstance\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.from)) {\n      throw new Error('Required parameter \"opts.from\" missing.');\n    }\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'From': _.get(opts, 'from'),\n      'To': _.get(opts, 'to'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'StatusCallbackEvent': serialize.map(_.get(opts, 'statusCallbackEvent'), function(e) { return e; }),\n      'Timeout': _.get(opts, 'timeout'),\n      'Record': serialize.bool(_.get(opts, 'record')),\n      'Muted': serialize.bool(_.get(opts, 'muted')),\n      'Beep': _.get(opts, 'beep'),\n      'StartConferenceOnEnter': serialize.bool(_.get(opts, 'startConferenceOnEnter')),\n      'EndConferenceOnExit': serialize.bool(_.get(opts, 'endConferenceOnExit')),\n      'WaitUrl': _.get(opts, 'waitUrl'),\n      'WaitMethod': _.get(opts, 'waitMethod'),\n      'EarlyMedia': serialize.bool(_.get(opts, 'earlyMedia')),\n      'MaxParticipants': _.get(opts, 'maxParticipants'),\n      'ConferenceRecord': _.get(opts, 'conferenceRecord'),\n      'ConferenceTrim': _.get(opts, 'conferenceTrim'),\n      'ConferenceStatusCallback': _.get(opts, 'conferenceStatusCallback'),\n      'ConferenceStatusCallbackMethod': _.get(opts, 'conferenceStatusCallbackMethod'),\n      'ConferenceStatusCallbackEvent': serialize.map(_.get(opts, 'conferenceStatusCallbackEvent'), function(e) { return e; }),\n      'RecordingChannels': _.get(opts, 'recordingChannels'),\n      'RecordingStatusCallback': _.get(opts, 'recordingStatusCallback'),\n      'RecordingStatusCallbackMethod': _.get(opts, 'recordingStatusCallbackMethod'),\n      'SipAuthUsername': _.get(opts, 'sipAuthUsername'),\n      'SipAuthPassword': _.get(opts, 'sipAuthPassword'),\n      'Region': _.get(opts, 'region'),\n      'ConferenceRecordingStatusCallback': _.get(opts, 'conferenceRecordingStatusCallback'),\n      'ConferenceRecordingStatusCallbackMethod': _.get(opts, 'conferenceRecordingStatusCallbackMethod'),\n      'RecordingStatusCallbackEvent': serialize.map(_.get(opts, 'recordingStatusCallbackEvent'), function(e) { return e; }),\n      'ConferenceRecordingStatusCallbackEvent': serialize.map(_.get(opts, 'conferenceRecordingStatusCallbackEvent'), function(e) { return e; }),\n      'Coaching': serialize.bool(_.get(opts, 'coaching')),\n      'CallSidToCoach': _.get(opts, 'callSidToCoach')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ParticipantInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.conferenceSid,\n        this._solution.callSid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ParticipantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.muted] -\n   *          Whether to return only participants that are muted\n   * @param {boolean} [opts.hold] -\n   *          Whether to return only participants that are on hold\n   * @param {boolean} [opts.coaching] -\n   *          Whether to return only participants who are coaching another call\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ParticipantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.muted] -\n   *          Whether to return only participants that are muted\n   * @param {boolean} [opts.hold] -\n   *          Whether to return only participants that are on hold\n   * @param {boolean} [opts.coaching] -\n   *          Whether to return only participants who are coaching another call\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.muted] -\n   *          Whether to return only participants that are muted\n   * @param {boolean} [opts.hold] -\n   *          Whether to return only participants that are on hold\n   * @param {boolean} [opts.coaching] -\n   *          Whether to return only participants who are coaching another call\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Muted': serialize.bool(_.get(opts, 'muted')),\n      'Hold': serialize.bool(_.get(opts, 'hold')),\n      'Coaching': serialize.bool(_.get(opts, 'coaching')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a participant\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @param {string} callSid - The Call SID of the resource to fetch\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext}\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.get = function get(callSid) {\n    return new ParticipantContext(\n      this._version,\n      this._solution.accountSid,\n      this._solution.conferenceSid,\n      callSid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ParticipantListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ParticipantListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ParticipantSolution} solution - Path solution\n *\n * @returns ParticipantPage\n */\n/* jshint ignore:end */\nParticipantPage = function ParticipantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ParticipantPage.prototype, Page.prototype);\nParticipantPage.prototype.constructor = ParticipantPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ParticipantInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantPage#\n *\n * @param {ParticipantPayload} payload - Payload response from the API\n *\n * @returns ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantPage.prototype.getInstance = function getInstance(payload) {\n  return new ParticipantInstance(\n    this._version,\n    payload,\n    this._solution.accountSid,\n    this._solution.conferenceSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nParticipantPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} callSid - The SID of the Call the resource is associated with\n * @property {string} callSidToCoach -\n *          The SID of the participant who is being `coached`\n * @property {boolean} coaching - Indicates if the participant changed to coach\n * @property {string} conferenceSid -\n *          The SID of the conference the participant is in\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {boolean} endConferenceOnExit -\n *          Whether the conference ends when the participant leaves\n * @property {boolean} muted - Whether the participant is muted\n * @property {boolean} hold - Whether the participant is on hold\n * @property {boolean} startConferenceOnEnter -\n *          Whether the conference starts when the participant joins the conference\n * @property {participant.status} status -\n *          The status of the participant's call in a session\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n *\n * @param {V2010} version - Version of the resource\n * @param {ParticipantPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} conferenceSid - The SID of the conference the participant is in\n * @param {sid} callSid - The Call SID of the resource to fetch\n */\n/* jshint ignore:end */\nParticipantInstance = function ParticipantInstance(version, payload, accountSid,\n                                                    conferenceSid, callSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.callSid = payload.call_sid; // jshint ignore:line\n  this.callSidToCoach = payload.call_sid_to_coach; // jshint ignore:line\n  this.coaching = payload.coaching; // jshint ignore:line\n  this.conferenceSid = payload.conference_sid; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.endConferenceOnExit = payload.end_conference_on_exit; // jshint ignore:line\n  this.muted = payload.muted; // jshint ignore:line\n  this.hold = payload.hold; // jshint ignore:line\n  this.startConferenceOnEnter = payload.start_conference_on_enter; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    conferenceSid: conferenceSid,\n    callSid: callSid || this.callSid,\n  };\n};\n\nObject.defineProperty(ParticipantInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new ParticipantContext(\n        this._version,\n        this._solution.accountSid,\n        this._solution.conferenceSid,\n        this._solution.callSid\n      );\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.muted] - Whether the participant should be muted\n * @param {boolean} [opts.hold] - Whether the participant should be on hold\n * @param {string} [opts.holdUrl] -\n *          The URL we call using the `hold_method` for  music that plays when the participant is on hold\n * @param {string} [opts.holdMethod] -\n *          The HTTP method we should use to call hold_url\n * @param {string} [opts.announceUrl] -\n *          The URL we call using the `announce_method` for an announcement to the participant\n * @param {string} [opts.announceMethod] -\n *          The HTTP method we should use to call announce_url\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.beepOnExit] -\n *          Whether to play a notification beep to the conference when the participant exit\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the participant leaves\n * @param {boolean} [opts.coaching] - Indicates if the participant changed to coach\n * @param {string} [opts.callSidToCoach] -\n *          The SID of the participant who is being `coached`\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ParticipantInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nParticipantInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} conferenceSid -\n *          The SID of the conference with the participant to fetch\n * @param {sid} callSid - The Call SID of the resource to fetch\n */\n/* jshint ignore:end */\nParticipantContext = function ParticipantContext(version, accountSid,\n                                                  conferenceSid, callSid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, conferenceSid: conferenceSid, callSid: callSid, };\n  this._uri = _.template(\n    '/Accounts/<%= accountSid %>/Conferences/<%= conferenceSid %>/Participants/<%= callSid %>.json' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ParticipantInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.conferenceSid,\n      this._solution.callSid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.muted] - Whether the participant should be muted\n * @param {boolean} [opts.hold] - Whether the participant should be on hold\n * @param {string} [opts.holdUrl] -\n *          The URL we call using the `hold_method` for  music that plays when the participant is on hold\n * @param {string} [opts.holdMethod] -\n *          The HTTP method we should use to call hold_url\n * @param {string} [opts.announceUrl] -\n *          The URL we call using the `announce_method` for an announcement to the participant\n * @param {string} [opts.announceMethod] -\n *          The HTTP method we should use to call announce_url\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.beepOnExit] -\n *          Whether to play a notification beep to the conference when the participant exit\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the participant leaves\n * @param {boolean} [opts.coaching] - Indicates if the participant changed to coach\n * @param {string} [opts.callSidToCoach] -\n *          The SID of the participant who is being `coached`\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Muted': serialize.bool(_.get(opts, 'muted')),\n    'Hold': serialize.bool(_.get(opts, 'hold')),\n    'HoldUrl': _.get(opts, 'holdUrl'),\n    'HoldMethod': _.get(opts, 'holdMethod'),\n    'AnnounceUrl': _.get(opts, 'announceUrl'),\n    'AnnounceMethod': _.get(opts, 'announceMethod'),\n    'WaitUrl': _.get(opts, 'waitUrl'),\n    'WaitMethod': _.get(opts, 'waitMethod'),\n    'BeepOnExit': serialize.bool(_.get(opts, 'beepOnExit')),\n    'EndConferenceOnExit': serialize.bool(_.get(opts, 'endConferenceOnExit')),\n    'Coaching': serialize.bool(_.get(opts, 'coaching')),\n    'CallSidToCoach': _.get(opts, 'callSidToCoach')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ParticipantInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.conferenceSid,\n      this._solution.callSid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ParticipantInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ConferenceContext.ParticipantContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nParticipantContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ParticipantList: ParticipantList,\n  ParticipantPage: ParticipantPage,\n  ParticipantInstance: ParticipantInstance,\n  ParticipantContext: ParticipantContext\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAE;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC,CAAC,CAAE;AAC7B,IAAIG,IAAI,GAAGH,OAAO,CAAC,0BAA0B,CAAC,CAAC,CAAE;AACjD,IAAII,WAAW,GAAGJ,OAAO,CACrB,iCAAiC,CAAC,CAAC,CAAE;AACzC,IAAIK,SAAS,GAAGL,OAAO,CACnB,+BAA+B,CAAC,CAAC,CAAE;AACvC,IAAIM,MAAM,GAAGN,OAAO,CAAC,4BAA4B,CAAC,CAAC,CAAE;;AAErD,IAAIO,eAAe;AACnB,IAAIC,eAAe;AACnB,IAAIC,mBAAmB;AACvB,IAAIC,kBAAkB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,eAAe,GAAG,SAASA,eAAeA,CAACI,OAAO,EAAEC,UAAU,EAAEC,aAAa,EAAE;EAC7E;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA,SAASC,uBAAuBA,CAACC,GAAG,EAAE;IACpC,OAAOD,uBAAuB,CAACE,GAAG,CAACD,GAAG,CAAC;EACzC;EAEAD,uBAAuB,CAACG,QAAQ,GAAGN,OAAO;EAC1C;EACAG,uBAAuB,CAACI,SAAS,GAAG;IAACN,UAAU,EAAEA,UAAU;IAAEC,aAAa,EAAEA;EAAa,CAAC;EAC1FC,uBAAuB,CAACK,IAAI,GAAGlB,CAAC,CAACmB,QAAQ,CACvC,gFAAgF,CAAC;EACnF,CAAC,CAACN,uBAAuB,CAACI,SAAS,CAAC;EACpC;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAJ,uBAAuB,CAACO,MAAM,GAAG,SAASA,MAAMA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IAC/D,IAAItB,CAAC,CAACuB,WAAW,CAACF,IAAI,CAAC,EAAE;MACvB,MAAM,IAAIG,KAAK,CAAC,oCAAoC,CAAC;IACvD;IACA,IAAIxB,CAAC,CAACuB,WAAW,CAACF,IAAI,CAACI,IAAI,CAAC,EAAE;MAC5B,MAAM,IAAID,KAAK,CAAC,yCAAyC,CAAC;IAC5D;IACA,IAAIxB,CAAC,CAACuB,WAAW,CAACF,IAAI,CAACK,EAAE,CAAC,EAAE;MAC1B,MAAM,IAAIF,KAAK,CAAC,uCAAuC,CAAC;IAC1D;IAEA,IAAIG,QAAQ,GAAG7B,CAAC,CAAC8B,KAAK,CAAC,CAAC;IACxB,IAAIC,IAAI,GAAGxB,MAAM,CAACyB,EAAE,CAAC;MACnB,MAAM,EAAE9B,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,MAAM,CAAC;MAC3B,IAAI,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,IAAI,CAAC;MACvB,gBAAgB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,gBAAgB,CAAC;MAC/C,sBAAsB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,sBAAsB,CAAC;MAC3D,qBAAqB,EAAEjB,SAAS,CAAC2B,GAAG,CAAC/B,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,qBAAqB,CAAC,EAAE,UAASW,CAAC,EAAE;QAAE,OAAOA,CAAC;MAAE,CAAC,CAAC;MACnG,SAAS,EAAEhC,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,SAAS,CAAC;MACjC,QAAQ,EAAEjB,SAAS,CAAC6B,IAAI,CAACjC,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,QAAQ,CAAC,CAAC;MAC/C,OAAO,EAAEjB,SAAS,CAAC6B,IAAI,CAACjC,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,OAAO,CAAC,CAAC;MAC7C,MAAM,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,MAAM,CAAC;MAC3B,wBAAwB,EAAEjB,SAAS,CAAC6B,IAAI,CAACjC,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,wBAAwB,CAAC,CAAC;MAC/E,qBAAqB,EAAEjB,SAAS,CAAC6B,IAAI,CAACjC,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,qBAAqB,CAAC,CAAC;MACzE,SAAS,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,SAAS,CAAC;MACjC,YAAY,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,YAAY,CAAC;MACvC,YAAY,EAAEjB,SAAS,CAAC6B,IAAI,CAACjC,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,YAAY,CAAC,CAAC;MACvD,iBAAiB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,iBAAiB,CAAC;MACjD,kBAAkB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,kBAAkB,CAAC;MACnD,gBAAgB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,gBAAgB,CAAC;MAC/C,0BAA0B,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,0BAA0B,CAAC;MACnE,gCAAgC,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,gCAAgC,CAAC;MAC/E,+BAA+B,EAAEjB,SAAS,CAAC2B,GAAG,CAAC/B,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,+BAA+B,CAAC,EAAE,UAASW,CAAC,EAAE;QAAE,OAAOA,CAAC;MAAE,CAAC,CAAC;MACvH,mBAAmB,EAAEhC,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,mBAAmB,CAAC;MACrD,yBAAyB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,yBAAyB,CAAC;MACjE,+BAA+B,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,+BAA+B,CAAC;MAC7E,iBAAiB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,iBAAiB,CAAC;MACjD,iBAAiB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,iBAAiB,CAAC;MACjD,QAAQ,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,QAAQ,CAAC;MAC/B,mCAAmC,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,mCAAmC,CAAC;MACrF,yCAAyC,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,yCAAyC,CAAC;MACjG,8BAA8B,EAAEjB,SAAS,CAAC2B,GAAG,CAAC/B,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,8BAA8B,CAAC,EAAE,UAASW,CAAC,EAAE;QAAE,OAAOA,CAAC;MAAE,CAAC,CAAC;MACrH,wCAAwC,EAAE5B,SAAS,CAAC2B,GAAG,CAAC/B,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,wCAAwC,CAAC,EAAE,UAASW,CAAC,EAAE;QAAE,OAAOA,CAAC;MAAE,CAAC,CAAC;MACzI,UAAU,EAAE5B,SAAS,CAAC6B,IAAI,CAACjC,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,UAAU,CAAC,CAAC;MACnD,gBAAgB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,gBAAgB;IAChD,CAAC,CAAC;IAEF,IAAIa,OAAO,GAAG,IAAI,CAAClB,QAAQ,CAACI,MAAM,CAAC;MAACe,GAAG,EAAE,IAAI,CAACjB,IAAI;MAAEkB,MAAM,EAAE,MAAM;MAAEP,IAAI,EAAEA;IAAI,CAAC,CAAC;IAEhFK,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;MACvCX,QAAQ,CAACY,OAAO,CAAC,IAAI/B,mBAAmB,CACtC,IAAI,CAACQ,QAAQ,EACbsB,OAAO,EACP,IAAI,CAACrB,SAAS,CAACN,UAAU,EACzB,IAAI,CAACM,SAAS,CAACL,aAAa,EAC5B,IAAI,CAACK,SAAS,CAACuB,OACjB,CAAC,CAAC;IACJ,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbP,OAAO,CAACQ,KAAK,CAAC,UAASC,KAAK,EAAE;MAC5BhB,QAAQ,CAACiB,MAAM,CAACD,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAI3C,CAAC,CAAC6C,UAAU,CAACvB,QAAQ,CAAC,EAAE;MAC1BK,QAAQ,CAACO,OAAO,CAACY,OAAO,CAACxB,QAAQ,CAAC;IACpC;IAEA,OAAOK,QAAQ,CAACO,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACArB,uBAAuB,CAACkC,IAAI,GAAG,SAASA,IAAIA,CAAC1B,IAAI,EAAEC,QAAQ,EAAE;IAC3D,IAAItB,CAAC,CAAC6C,UAAU,CAACxB,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAIA,IAAI,CAACC,QAAQ,EAAE;MACjBA,QAAQ,GAAGD,IAAI,CAACC,QAAQ;IAC1B;IACA,IAAItB,CAAC,CAACuB,WAAW,CAACD,QAAQ,CAAC,EAAE;MAC3B,MAAM,IAAIE,KAAK,CAAC,oCAAoC,CAAC;IACvD;IAEA,IAAIwB,IAAI,GAAG,KAAK;IAChB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIC,MAAM,GAAG,IAAI,CAACnC,QAAQ,CAACoC,UAAU,CAAC;MACpCC,KAAK,EAAEhC,IAAI,CAACgC,KAAK;MACjBC,QAAQ,EAAEjC,IAAI,CAACiC;IACjB,CAAC,CAAC;IAEF,SAASC,UAAUA,CAACZ,KAAK,EAAE;MACzBK,IAAI,GAAG,IAAI;MACX,IAAIhD,CAAC,CAAC6C,UAAU,CAACxB,IAAI,CAAC2B,IAAI,CAAC,EAAE;QAC3B3B,IAAI,CAAC2B,IAAI,CAACL,KAAK,CAAC;MAClB;IACF;IAEA,SAASa,aAAaA,CAACC,EAAE,EAAE;MACzB,IAAIvB,OAAO,GAAGuB,EAAE,CAAC,CAAC;MAClB,IAAIzD,CAAC,CAACuB,WAAW,CAACW,OAAO,CAAC,EAAE;QAC1BqB,UAAU,CAAC,CAAC;QACZ;MACF;MAEArB,OAAO,CAACG,IAAI,CAAC,UAASqB,IAAI,EAAE;QAC1B1D,CAAC,CAAC+C,IAAI,CAACW,IAAI,CAACC,SAAS,EAAE,UAASC,QAAQ,EAAE;UACxC,IAAIZ,IAAI,IAAK,CAAChD,CAAC,CAACuB,WAAW,CAACF,IAAI,CAACgC,KAAK,CAAC,IAAIH,eAAe,IAAI7B,IAAI,CAACgC,KAAM,EAAE;YACzEL,IAAI,GAAG,IAAI;YACX,OAAO,KAAK;UACd;UAEAE,eAAe,EAAE;UACjB5B,QAAQ,CAACsC,QAAQ,EAAEL,UAAU,CAAC;QAChC,CAAC,CAAC;QAEF,IAAKJ,MAAM,CAACU,SAAS,IAAIV,MAAM,CAACU,SAAS,IAAIZ,WAAW,EAAG;UACzDM,UAAU,CAAC,CAAC;QACd,CAAC,MAAM,IAAI,CAACP,IAAI,EAAE;UAChBC,WAAW,EAAE;UACbO,aAAa,CAACxD,CAAC,CAACyC,IAAI,CAACiB,IAAI,CAACI,QAAQ,EAAEJ,IAAI,CAAC,CAAC;QAC5C;MACF,CAAC,CAAC;MAEFxB,OAAO,CAACQ,KAAK,CAACa,UAAU,CAAC;IAC3B;IAEAC,aAAa,CAACxD,CAAC,CAACyC,IAAI,CAAC,IAAI,CAACiB,IAAI,EAAE,IAAI,EAAE1D,CAAC,CAAC+D,KAAK,CAAC1C,IAAI,EAAE8B,MAAM,CAAC,CAAC,CAAC;EAC/D,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAtC,uBAAuB,CAACmD,IAAI,GAAG,SAASA,IAAIA,CAAC3C,IAAI,EAAEC,QAAQ,EAAE;IAC3D,IAAItB,CAAC,CAAC6C,UAAU,CAACxB,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAIM,QAAQ,GAAG7B,CAAC,CAAC8B,KAAK,CAAC,CAAC;IACxB,IAAIqC,YAAY,GAAG,EAAE;IACrB5C,IAAI,CAACC,QAAQ,GAAG,UAAS4C,QAAQ,EAAElB,IAAI,EAAE;MACvCiB,YAAY,CAACE,IAAI,CAACD,QAAQ,CAAC;MAE3B,IAAI,CAAClE,CAAC,CAACuB,WAAW,CAACF,IAAI,CAACgC,KAAK,CAAC,IAAIY,YAAY,CAACG,MAAM,KAAK/C,IAAI,CAACgC,KAAK,EAAE;QACpEL,IAAI,CAAC,CAAC;MACR;IACF,CAAC;IAED3B,IAAI,CAAC2B,IAAI,GAAG,UAASL,KAAK,EAAE;MAC1B,IAAI3C,CAAC,CAACuB,WAAW,CAACoB,KAAK,CAAC,EAAE;QACxBhB,QAAQ,CAACY,OAAO,CAAC0B,YAAY,CAAC;MAChC,CAAC,MAAM;QACLtC,QAAQ,CAACiB,MAAM,CAACD,KAAK,CAAC;MACxB;IACF,CAAC;IAED,IAAI3C,CAAC,CAAC6C,UAAU,CAACvB,QAAQ,CAAC,EAAE;MAC1BK,QAAQ,CAACO,OAAO,CAACY,OAAO,CAACxB,QAAQ,CAAC;IACpC;IAEA,IAAI,CAACyB,IAAI,CAAC1B,IAAI,CAAC;IACf,OAAOM,QAAQ,CAACO,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACArB,uBAAuB,CAAC6C,IAAI,GAAG,SAASA,IAAIA,CAACrC,IAAI,EAAEC,QAAQ,EAAE;IAC3D,IAAItB,CAAC,CAAC6C,UAAU,CAACxB,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IAEjB,IAAIM,QAAQ,GAAG7B,CAAC,CAAC8B,KAAK,CAAC,CAAC;IACxB,IAAIC,IAAI,GAAGxB,MAAM,CAACyB,EAAE,CAAC;MACnB,OAAO,EAAE1B,SAAS,CAAC6B,IAAI,CAACjC,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,OAAO,CAAC,CAAC;MAC7C,MAAM,EAAEjB,SAAS,CAAC6B,IAAI,CAACjC,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,MAAM,CAAC,CAAC;MAC3C,UAAU,EAAEjB,SAAS,CAAC6B,IAAI,CAACjC,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,UAAU,CAAC,CAAC;MACnD,WAAW,EAAEA,IAAI,CAACgD,SAAS;MAC3B,MAAM,EAAEhD,IAAI,CAACiD,UAAU;MACvB,UAAU,EAAEjD,IAAI,CAACiC;IACnB,CAAC,CAAC;IAEF,IAAIpB,OAAO,GAAG,IAAI,CAAClB,QAAQ,CAAC0C,IAAI,CAAC;MAACvB,GAAG,EAAE,IAAI,CAACjB,IAAI;MAAEkB,MAAM,EAAE,KAAK;MAAEmC,MAAM,EAAE1C;IAAI,CAAC,CAAC;IAE/EK,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;MACvCX,QAAQ,CAACY,OAAO,CAAC,IAAIhC,eAAe,CAAC,IAAI,CAACS,QAAQ,EAAEsB,OAAO,EAAE,IAAI,CAACrB,SAAS,CAAC,CAAC;IAC/E,CAAC,CAACwB,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbP,OAAO,CAACQ,KAAK,CAAC,UAASC,KAAK,EAAE;MAC5BhB,QAAQ,CAACiB,MAAM,CAACD,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAI3C,CAAC,CAAC6C,UAAU,CAACvB,QAAQ,CAAC,EAAE;MAC1BK,QAAQ,CAACO,OAAO,CAACY,OAAO,CAACxB,QAAQ,CAAC;IACpC;IAEA,OAAOK,QAAQ,CAACO,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACArB,uBAAuB,CAAC2D,OAAO,GAAG,SAASA,OAAOA,CAACC,SAAS,EAAEnD,QAAQ,EAAE;IACtE,IAAIK,QAAQ,GAAG7B,CAAC,CAAC8B,KAAK,CAAC,CAAC;IAExB,IAAIM,OAAO,GAAG,IAAI,CAAClB,QAAQ,CAAC0D,OAAO,CAACC,MAAM,CAACC,OAAO,CAAC;MAACxC,MAAM,EAAE,KAAK;MAAED,GAAG,EAAEsC;IAAS,CAAC,CAAC;IAEnFvC,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;MACvCX,QAAQ,CAACY,OAAO,CAAC,IAAIhC,eAAe,CAAC,IAAI,CAACS,QAAQ,EAAEsB,OAAO,EAAE,IAAI,CAACrB,SAAS,CAAC,CAAC;IAC/E,CAAC,CAACwB,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbP,OAAO,CAACQ,KAAK,CAAC,UAASC,KAAK,EAAE;MAC5BhB,QAAQ,CAACiB,MAAM,CAACD,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAI3C,CAAC,CAAC6C,UAAU,CAACvB,QAAQ,CAAC,EAAE;MAC1BK,QAAQ,CAACO,OAAO,CAACY,OAAO,CAACxB,QAAQ,CAAC;IACpC;IAEA,OAAOK,QAAQ,CAACO,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACArB,uBAAuB,CAACE,GAAG,GAAG,SAASA,GAAGA,CAACyB,OAAO,EAAE;IAClD,OAAO,IAAI/B,kBAAkB,CAC3B,IAAI,CAACO,QAAQ,EACb,IAAI,CAACC,SAAS,CAACN,UAAU,EACzB,IAAI,CAACM,SAAS,CAACL,aAAa,EAC5B4B,OACF,CAAC;EACH,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA3B,uBAAuB,CAACgE,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;IACjD,OAAO,IAAI,CAAC5D,SAAS;EACvB,CAAC;EAEDJ,uBAAuB,CAACZ,IAAI,CAAC6E,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EAAEC,OAAO,EAC1E;IACF,OAAOhF,IAAI,CAAC6E,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;EAC7C,CAAC;EAED,OAAOpE,uBAAuB;AAChC,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAN,eAAe,GAAG,SAASA,eAAeA,CAACG,OAAO,EAAEwE,QAAQ,EAAEC,QAAQ,EAAE;EACtE;EACA,IAAI,CAAClE,SAAS,GAAGkE,QAAQ;EAEzBjF,IAAI,CAACkF,SAAS,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI,EAAE5E,OAAO,EAAEwE,QAAQ,EAAE,IAAI,CAACjE,SAAS,CAAC;AAC1E,CAAC;AAEDjB,CAAC,CAACuF,MAAM,CAAChF,eAAe,CAAC6E,SAAS,EAAElF,IAAI,CAACkF,SAAS,CAAC;AACnD7E,eAAe,CAAC6E,SAAS,CAACC,WAAW,GAAG9E,eAAe;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,eAAe,CAAC6E,SAAS,CAACI,WAAW,GAAG,SAASA,WAAWA,CAAClD,OAAO,EAAE;EACpE,OAAO,IAAI9B,mBAAmB,CAC5B,IAAI,CAACQ,QAAQ,EACbsB,OAAO,EACP,IAAI,CAACrB,SAAS,CAACN,UAAU,EACzB,IAAI,CAACM,SAAS,CAACL,aACjB,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,eAAe,CAAC6E,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EACnD,IAAIY,KAAK,GAAG,CAAC,CAAC;EACdzF,CAAC,CAAC0F,MAAM,CAAC,IAAI,EAAE,UAASC,KAAK,EAAEC,GAAG,EAAE;IAClC,IAAI,CAAC5F,CAAC,CAAC6F,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,IAAI,CAAE5F,CAAC,CAAC6C,UAAU,CAAC8C,KAAK,CAAC,EAAE;MACpDF,KAAK,CAACG,GAAG,CAAC,GAAGD,KAAK;IACpB;EACF,CAAC,CAAC;EACF,OAAOF,KAAK;AACd,CAAC;AAEDlF,eAAe,CAAC6E,SAAS,CAACnF,IAAI,CAAC6E,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EACnEC,OAAO,EAAE;EACX,OAAOhF,IAAI,CAAC6E,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAzE,mBAAmB,GAAG,SAASA,mBAAmBA,CAACE,OAAO,EAAE4B,OAAO,EAAE3B,UAAU,EAC3BC,aAAa,EAAE4B,OAAO,EAAE;EAC1E,IAAI,CAACxB,QAAQ,GAAGN,OAAO;;EAEvB;EACA,IAAI,CAACC,UAAU,GAAG2B,OAAO,CAACwD,WAAW,CAAC,CAAC;EACvC,IAAI,CAACtD,OAAO,GAAGF,OAAO,CAACyD,QAAQ,CAAC,CAAC;EACjC,IAAI,CAACC,cAAc,GAAG1D,OAAO,CAAC2D,iBAAiB,CAAC,CAAC;EACjD,IAAI,CAACC,QAAQ,GAAG5D,OAAO,CAAC4D,QAAQ,CAAC,CAAC;EAClC,IAAI,CAACtF,aAAa,GAAG0B,OAAO,CAAC6D,cAAc,CAAC,CAAC;EAC7C,IAAI,CAACC,WAAW,GAAGjG,WAAW,CAACkG,eAAe,CAAC/D,OAAO,CAACgE,YAAY,CAAC,CAAC,CAAC;EACtE,IAAI,CAACC,WAAW,GAAGpG,WAAW,CAACkG,eAAe,CAAC/D,OAAO,CAACkE,YAAY,CAAC,CAAC,CAAC;EACtE,IAAI,CAACC,mBAAmB,GAAGnE,OAAO,CAACoE,sBAAsB,CAAC,CAAC;EAC3D,IAAI,CAACC,KAAK,GAAGrE,OAAO,CAACqE,KAAK,CAAC,CAAC;EAC5B,IAAI,CAACC,IAAI,GAAGtE,OAAO,CAACsE,IAAI,CAAC,CAAC;EAC1B,IAAI,CAACC,sBAAsB,GAAGvE,OAAO,CAACwE,yBAAyB,CAAC,CAAC;EACjE,IAAI,CAACC,MAAM,GAAGzE,OAAO,CAACyE,MAAM,CAAC,CAAC;EAC9B,IAAI,CAAC5E,GAAG,GAAGG,OAAO,CAACH,GAAG,CAAC,CAAC;;EAExB;EACA,IAAI,CAAC6E,QAAQ,GAAGC,SAAS;EACzB,IAAI,CAAChG,SAAS,GAAG;IACfN,UAAU,EAAEA,UAAU;IACtBC,aAAa,EAAEA,aAAa;IAC5B4B,OAAO,EAAEA,OAAO,IAAI,IAAI,CAACA;EAC3B,CAAC;AACH,CAAC;AAED0E,MAAM,CAACC,cAAc,CAAC3G,mBAAmB,CAAC4E,SAAS,EACjD,QAAQ,EAAE;EACVrE,GAAG,EAAE,SAAAA,CAAA,EAAW;IACd,IAAI,CAAC,IAAI,CAACiG,QAAQ,EAAE;MAClB,IAAI,CAACA,QAAQ,GAAG,IAAIvG,kBAAkB,CACpC,IAAI,CAACO,QAAQ,EACb,IAAI,CAACC,SAAS,CAACN,UAAU,EACzB,IAAI,CAACM,SAAS,CAACL,aAAa,EAC5B,IAAI,CAACK,SAAS,CAACuB,OACjB,CAAC;IACH;IAEA,OAAO,IAAI,CAACwE,QAAQ;EACtB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAxG,mBAAmB,CAAC4E,SAAS,CAACgC,KAAK,GAAG,SAASA,KAAKA,CAAC9F,QAAQ,EAAE;EAC7D,OAAO,IAAI,CAAC+F,MAAM,CAACD,KAAK,CAAC9F,QAAQ,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,mBAAmB,CAAC4E,SAAS,CAACkC,MAAM,GAAG,SAASA,MAAMA,CAACjG,IAAI,EAAEC,QAAQ,EAAE;EACrE,OAAO,IAAI,CAAC+F,MAAM,CAACC,MAAM,CAACjG,IAAI,EAAEC,QAAQ,CAAC;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,mBAAmB,CAAC4E,SAAS,CAACmC,MAAM,GAAG,SAASA,MAAMA,CAACjG,QAAQ,EAAE;EAC/D,OAAO,IAAI,CAAC+F,MAAM,CAACE,MAAM,CAACjG,QAAQ,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,mBAAmB,CAAC4E,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EACvD,IAAIY,KAAK,GAAG,CAAC,CAAC;EACdzF,CAAC,CAAC0F,MAAM,CAAC,IAAI,EAAE,UAASC,KAAK,EAAEC,GAAG,EAAE;IAClC,IAAI,CAAC5F,CAAC,CAAC6F,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,IAAI,CAAE5F,CAAC,CAAC6C,UAAU,CAAC8C,KAAK,CAAC,EAAE;MACpDF,KAAK,CAACG,GAAG,CAAC,GAAGD,KAAK;IACpB;EACF,CAAC,CAAC;EACF,OAAOF,KAAK;AACd,CAAC;AAEDjF,mBAAmB,CAAC4E,SAAS,CAACnF,IAAI,CAAC6E,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EACvEC,OAAO,EAAE;EACX,OAAOhF,IAAI,CAAC6E,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAxE,kBAAkB,GAAG,SAASA,kBAAkBA,CAACC,OAAO,EAAEC,UAAU,EAClBC,aAAa,EAAE4B,OAAO,EAAE;EACxE,IAAI,CAACxB,QAAQ,GAAGN,OAAO;;EAEvB;EACA,IAAI,CAACO,SAAS,GAAG;IAACN,UAAU,EAAEA,UAAU;IAAEC,aAAa,EAAEA,aAAa;IAAE4B,OAAO,EAAEA;EAAS,CAAC;EAC3F,IAAI,CAACtB,IAAI,GAAGlB,CAAC,CAACmB,QAAQ,CACpB,+FAA+F,CAAC;EAClG,CAAC,CAAC,IAAI,CAACF,SAAS,CAAC;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,kBAAkB,CAAC2E,SAAS,CAACgC,KAAK,GAAG,SAASA,KAAKA,CAAC9F,QAAQ,EAAE;EAC5D,IAAIK,QAAQ,GAAG7B,CAAC,CAAC8B,KAAK,CAAC,CAAC;EACxB,IAAIM,OAAO,GAAG,IAAI,CAAClB,QAAQ,CAACoG,KAAK,CAAC;IAACjF,GAAG,EAAE,IAAI,CAACjB,IAAI;IAAEkB,MAAM,EAAE;EAAK,CAAC,CAAC;EAElEF,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;IACvCX,QAAQ,CAACY,OAAO,CAAC,IAAI/B,mBAAmB,CACtC,IAAI,CAACQ,QAAQ,EACbsB,OAAO,EACP,IAAI,CAACrB,SAAS,CAACN,UAAU,EACzB,IAAI,CAACM,SAAS,CAACL,aAAa,EAC5B,IAAI,CAACK,SAAS,CAACuB,OACjB,CAAC,CAAC;EACJ,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbP,OAAO,CAACQ,KAAK,CAAC,UAASC,KAAK,EAAE;IAC5BhB,QAAQ,CAACiB,MAAM,CAACD,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAI3C,CAAC,CAAC6C,UAAU,CAACvB,QAAQ,CAAC,EAAE;IAC1BK,QAAQ,CAACO,OAAO,CAACY,OAAO,CAACxB,QAAQ,CAAC;EACpC;EAEA,OAAOK,QAAQ,CAACO,OAAO;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAzB,kBAAkB,CAAC2E,SAAS,CAACkC,MAAM,GAAG,SAASA,MAAMA,CAACjG,IAAI,EAAEC,QAAQ,EAAE;EACpE,IAAItB,CAAC,CAAC6C,UAAU,CAACxB,IAAI,CAAC,EAAE;IACtBC,QAAQ,GAAGD,IAAI;IACfA,IAAI,GAAG,CAAC,CAAC;EACX;EACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;EAEjB,IAAIM,QAAQ,GAAG7B,CAAC,CAAC8B,KAAK,CAAC,CAAC;EACxB,IAAIC,IAAI,GAAGxB,MAAM,CAACyB,EAAE,CAAC;IACnB,OAAO,EAAE1B,SAAS,CAAC6B,IAAI,CAACjC,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,OAAO,CAAC,CAAC;IAC7C,MAAM,EAAEjB,SAAS,CAAC6B,IAAI,CAACjC,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,MAAM,CAAC,CAAC;IAC3C,SAAS,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,SAAS,CAAC;IACjC,YAAY,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,YAAY,CAAC;IACvC,aAAa,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,aAAa,CAAC;IACzC,gBAAgB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,gBAAgB,CAAC;IAC/C,SAAS,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,SAAS,CAAC;IACjC,YAAY,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,YAAY,CAAC;IACvC,YAAY,EAAEjB,SAAS,CAAC6B,IAAI,CAACjC,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,YAAY,CAAC,CAAC;IACvD,qBAAqB,EAAEjB,SAAS,CAAC6B,IAAI,CAACjC,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,qBAAqB,CAAC,CAAC;IACzE,UAAU,EAAEjB,SAAS,CAAC6B,IAAI,CAACjC,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,UAAU,CAAC,CAAC;IACnD,gBAAgB,EAAErB,CAAC,CAACe,GAAG,CAACM,IAAI,EAAE,gBAAgB;EAChD,CAAC,CAAC;EAEF,IAAIa,OAAO,GAAG,IAAI,CAAClB,QAAQ,CAACsG,MAAM,CAAC;IAACnF,GAAG,EAAE,IAAI,CAACjB,IAAI;IAAEkB,MAAM,EAAE,MAAM;IAAEP,IAAI,EAAEA;EAAI,CAAC,CAAC;EAEhFK,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;IACvCX,QAAQ,CAACY,OAAO,CAAC,IAAI/B,mBAAmB,CACtC,IAAI,CAACQ,QAAQ,EACbsB,OAAO,EACP,IAAI,CAACrB,SAAS,CAACN,UAAU,EACzB,IAAI,CAACM,SAAS,CAACL,aAAa,EAC5B,IAAI,CAACK,SAAS,CAACuB,OACjB,CAAC,CAAC;EACJ,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbP,OAAO,CAACQ,KAAK,CAAC,UAASC,KAAK,EAAE;IAC5BhB,QAAQ,CAACiB,MAAM,CAACD,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAI3C,CAAC,CAAC6C,UAAU,CAACvB,QAAQ,CAAC,EAAE;IAC1BK,QAAQ,CAACO,OAAO,CAACY,OAAO,CAACxB,QAAQ,CAAC;EACpC;EAEA,OAAOK,QAAQ,CAACO,OAAO;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAzB,kBAAkB,CAAC2E,SAAS,CAACmC,MAAM,GAAG,SAASA,MAAMA,CAACjG,QAAQ,EAAE;EAC9D,IAAIK,QAAQ,GAAG7B,CAAC,CAAC8B,KAAK,CAAC,CAAC;EACxB,IAAIM,OAAO,GAAG,IAAI,CAAClB,QAAQ,CAACuG,MAAM,CAAC;IAACpF,GAAG,EAAE,IAAI,CAACjB,IAAI;IAAEkB,MAAM,EAAE;EAAQ,CAAC,CAAC;EAEtEF,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;IACvCX,QAAQ,CAACY,OAAO,CAACD,OAAO,CAAC;EAC3B,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbP,OAAO,CAACQ,KAAK,CAAC,UAASC,KAAK,EAAE;IAC5BhB,QAAQ,CAACiB,MAAM,CAACD,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAI3C,CAAC,CAAC6C,UAAU,CAACvB,QAAQ,CAAC,EAAE;IAC1BK,QAAQ,CAACO,OAAO,CAACY,OAAO,CAACxB,QAAQ,CAAC;EACpC;EAEA,OAAOK,QAAQ,CAACO,OAAO;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAzB,kBAAkB,CAAC2E,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EACtD,OAAO,IAAI,CAAC5D,SAAS;AACvB,CAAC;AAEDR,kBAAkB,CAAC2E,SAAS,CAACnF,IAAI,CAAC6E,OAAO,CAACC,MAAM,CAAC,GAAG,SAASD,OAAOA,CAACE,KAAK,EACtEC,OAAO,EAAE;EACX,OAAOhF,IAAI,CAAC6E,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;AAEDuC,MAAM,CAACC,OAAO,GAAG;EACfnH,eAAe,EAAEA,eAAe;EAChCC,eAAe,EAAEA,eAAe;EAChCC,mBAAmB,EAAEA,mBAAmB;EACxCC,kBAAkB,EAAEA;AACtB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}