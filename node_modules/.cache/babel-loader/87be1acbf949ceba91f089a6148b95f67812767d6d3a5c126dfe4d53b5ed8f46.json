{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../../../../../base/deserialize'); /* jshint ignore:line */\nvar values = require('../../../../../../../../base/values'); /* jshint ignore:line */\n\nvar AuthCallsCredentialListMappingList;\nvar AuthCallsCredentialListMappingPage;\nvar AuthCallsCredentialListMappingInstance;\nvar AuthCallsCredentialListMappingContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the AuthCallsCredentialListMappingList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n * @param {string} domainSid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingList = function AuthCallsCredentialListMappingList(version, accountSid, domainSid) {\n  /* jshint ignore:start */\n  /**\n   * @function credentialListMappings\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingContext}\n   */\n  /* jshint ignore:end */\n  function AuthCallsCredentialListMappingListInstance(sid) {\n    return AuthCallsCredentialListMappingListInstance.get(sid);\n  }\n  AuthCallsCredentialListMappingListInstance._version = version;\n  // Path Solution\n  AuthCallsCredentialListMappingListInstance._solution = {\n    accountSid: accountSid,\n    domainSid: domainSid\n  };\n  AuthCallsCredentialListMappingListInstance._uri = _.template('/Accounts/<%= accountSid %>/SIP/Domains/<%= domainSid %>/Auth/Calls/CredentialListMappings.json' // jshint ignore:line\n  )(AuthCallsCredentialListMappingListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a AuthCallsCredentialListMappingInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.credentialListSid -\n   *          The SID of the CredentialList resource to map to the SIP domain\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AuthCallsCredentialListMappingInstance\n   */\n  /* jshint ignore:end */\n  AuthCallsCredentialListMappingListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.credentialListSid)) {\n      throw new Error('Required parameter \"opts.credentialListSid\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'CredentialListSid': _.get(opts, 'credentialListSid')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AuthCallsCredentialListMappingInstance(this._version, payload, this._solution.accountSid, this._solution.domainSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams AuthCallsCredentialListMappingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  AuthCallsCredentialListMappingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists AuthCallsCredentialListMappingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AuthCallsCredentialListMappingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of AuthCallsCredentialListMappingInstance records from\n   * the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AuthCallsCredentialListMappingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AuthCallsCredentialListMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of AuthCallsCredentialListMappingInstance records\n   * from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AuthCallsCredentialListMappingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AuthCallsCredentialListMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a auth_calls_credential_list_mapping\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingContext}\n   */\n  /* jshint ignore:end */\n  AuthCallsCredentialListMappingListInstance.get = function get(sid) {\n    return new AuthCallsCredentialListMappingContext(this._version, this._solution.accountSid, this._solution.domainSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  AuthCallsCredentialListMappingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  AuthCallsCredentialListMappingListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return AuthCallsCredentialListMappingListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the AuthCallsCredentialListMappingPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AuthCallsCredentialListMappingSolution} solution - Path solution\n *\n * @returns AuthCallsCredentialListMappingPage\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingPage = function AuthCallsCredentialListMappingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(AuthCallsCredentialListMappingPage.prototype, Page.prototype);\nAuthCallsCredentialListMappingPage.prototype.constructor = AuthCallsCredentialListMappingPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of AuthCallsCredentialListMappingInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingPage#\n *\n * @param {AuthCallsCredentialListMappingPayload} payload -\n *          Payload response from the API\n *\n * @returns AuthCallsCredentialListMappingInstance\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingPage.prototype.getInstance = function getInstance(payload) {\n  return new AuthCallsCredentialListMappingInstance(this._version, payload, this._solution.accountSid, this._solution.domainSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nAuthCallsCredentialListMappingPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the AuthCallsCredentialListMappingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} sid - The unique string that identifies the resource\n *\n * @param {V2010} version - Version of the resource\n * @param {AuthCallsCredentialListMappingPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} domainSid - The unique string that identifies the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingInstance = function AuthCallsCredentialListMappingInstance(version, payload, accountSid, domainSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    domainSid: domainSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(AuthCallsCredentialListMappingInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new AuthCallsCredentialListMappingContext(this._version, this._solution.accountSid, this._solution.domainSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a AuthCallsCredentialListMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthCallsCredentialListMappingInstance\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a AuthCallsCredentialListMappingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthCallsCredentialListMappingInstance\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nAuthCallsCredentialListMappingInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the AuthCallsCredentialListMappingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} domainSid -\n *          The SID of the SIP domain that contains the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingContext = function AuthCallsCredentialListMappingContext(version, accountSid, domainSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    accountSid: accountSid,\n    domainSid: domainSid,\n    sid: sid\n  };\n  this._uri = _.template('/Accounts/<%= accountSid %>/SIP/Domains/<%= domainSid %>/Auth/Calls/CredentialListMappings/<%= sid %>.json' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a AuthCallsCredentialListMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthCallsCredentialListMappingInstance\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AuthCallsCredentialListMappingInstance(this._version, payload, this._solution.accountSid, this._solution.domainSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a AuthCallsCredentialListMappingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthCallsCredentialListMappingInstance\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nAuthCallsCredentialListMappingContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  AuthCallsCredentialListMappingList: AuthCallsCredentialListMappingList,\n  AuthCallsCredentialListMappingPage: AuthCallsCredentialListMappingPage,\n  AuthCallsCredentialListMappingInstance: AuthCallsCredentialListMappingInstance,\n  AuthCallsCredentialListMappingContext: AuthCallsCredentialListMappingContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","AuthCallsCredentialListMappingList","AuthCallsCredentialListMappingPage","AuthCallsCredentialListMappingInstance","AuthCallsCredentialListMappingContext","version","accountSid","domainSid","AuthCallsCredentialListMappingListInstance","sid","get","_version","_solution","_uri","template","create","opts","callback","isUndefined","Error","credentialListSid","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","pageLimit","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","friendlyName","friendly_name","_context","undefined","Object","defineProperty","fetch","_proxy","remove","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/api/v2010/account/sip/domain/authTypes/authCallsMapping/authCallsCredentialListMapping.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require(\n    '../../../../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require(\n    '../../../../../../../../base/values');  /* jshint ignore:line */\n\nvar AuthCallsCredentialListMappingList;\nvar AuthCallsCredentialListMappingPage;\nvar AuthCallsCredentialListMappingInstance;\nvar AuthCallsCredentialListMappingContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the AuthCallsCredentialListMappingList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n * @param {string} domainSid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingList = function\n    AuthCallsCredentialListMappingList(version, accountSid, domainSid) {\n  /* jshint ignore:start */\n  /**\n   * @function credentialListMappings\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingContext}\n   */\n  /* jshint ignore:end */\n  function AuthCallsCredentialListMappingListInstance(sid) {\n    return AuthCallsCredentialListMappingListInstance.get(sid);\n  }\n\n  AuthCallsCredentialListMappingListInstance._version = version;\n  // Path Solution\n  AuthCallsCredentialListMappingListInstance._solution = {\n    accountSid: accountSid,\n    domainSid: domainSid\n  };\n  AuthCallsCredentialListMappingListInstance._uri = _.template(\n    '/Accounts/<%= accountSid %>/SIP/Domains/<%= domainSid %>/Auth/Calls/CredentialListMappings.json' // jshint ignore:line\n  )(AuthCallsCredentialListMappingListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a AuthCallsCredentialListMappingInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.credentialListSid -\n   *          The SID of the CredentialList resource to map to the SIP domain\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AuthCallsCredentialListMappingInstance\n   */\n  /* jshint ignore:end */\n  AuthCallsCredentialListMappingListInstance.create = function create(opts,\n      callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.credentialListSid)) {\n      throw new Error('Required parameter \"opts.credentialListSid\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({'CredentialListSid': _.get(opts, 'credentialListSid')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AuthCallsCredentialListMappingInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.domainSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams AuthCallsCredentialListMappingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  AuthCallsCredentialListMappingListInstance.each = function each(opts, callback)\n      {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists AuthCallsCredentialListMappingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AuthCallsCredentialListMappingListInstance.list = function list(opts, callback)\n      {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of AuthCallsCredentialListMappingInstance records from\n   * the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AuthCallsCredentialListMappingListInstance.page = function page(opts, callback)\n      {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AuthCallsCredentialListMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of AuthCallsCredentialListMappingInstance records\n   * from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AuthCallsCredentialListMappingListInstance.getPage = function getPage(targetUrl,\n      callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AuthCallsCredentialListMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a auth_calls_credential_list_mapping\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingContext}\n   */\n  /* jshint ignore:end */\n  AuthCallsCredentialListMappingListInstance.get = function get(sid) {\n    return new AuthCallsCredentialListMappingContext(\n      this._version,\n      this._solution.accountSid,\n      this._solution.domainSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  AuthCallsCredentialListMappingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AuthCallsCredentialListMappingListInstance[util.inspect.custom] = function\n      inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AuthCallsCredentialListMappingListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AuthCallsCredentialListMappingPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AuthCallsCredentialListMappingSolution} solution - Path solution\n *\n * @returns AuthCallsCredentialListMappingPage\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingPage = function\n    AuthCallsCredentialListMappingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AuthCallsCredentialListMappingPage.prototype, Page.prototype);\nAuthCallsCredentialListMappingPage.prototype.constructor = AuthCallsCredentialListMappingPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of AuthCallsCredentialListMappingInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingPage#\n *\n * @param {AuthCallsCredentialListMappingPayload} payload -\n *          Payload response from the API\n *\n * @returns AuthCallsCredentialListMappingInstance\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingPage.prototype.getInstance = function\n    getInstance(payload) {\n  return new AuthCallsCredentialListMappingInstance(\n    this._version,\n    payload,\n    this._solution.accountSid,\n    this._solution.domainSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAuthCallsCredentialListMappingPage.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AuthCallsCredentialListMappingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} sid - The unique string that identifies the resource\n *\n * @param {V2010} version - Version of the resource\n * @param {AuthCallsCredentialListMappingPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} domainSid - The unique string that identifies the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingInstance = function\n    AuthCallsCredentialListMappingInstance(version, payload, accountSid,\n    domainSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, domainSid: domainSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(AuthCallsCredentialListMappingInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new AuthCallsCredentialListMappingContext(\n        this._version,\n        this._solution.accountSid,\n        this._solution.domainSid,\n        this._solution.sid\n      );\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a AuthCallsCredentialListMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthCallsCredentialListMappingInstance\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingInstance.prototype.fetch = function\n    fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a AuthCallsCredentialListMappingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthCallsCredentialListMappingInstance\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingInstance.prototype.remove = function\n    remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAuthCallsCredentialListMappingInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AuthCallsCredentialListMappingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} domainSid -\n *          The SID of the SIP domain that contains the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingContext = function\n    AuthCallsCredentialListMappingContext(version, accountSid, domainSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, domainSid: domainSid, sid: sid, };\n  this._uri = _.template(\n    '/Accounts/<%= accountSid %>/SIP/Domains/<%= domainSid %>/Auth/Calls/CredentialListMappings/<%= sid %>.json' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a AuthCallsCredentialListMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthCallsCredentialListMappingInstance\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingContext.prototype.fetch = function fetch(callback)\n    {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new AuthCallsCredentialListMappingInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.domainSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a AuthCallsCredentialListMappingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AuthCallsCredentialListMappingInstance\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingContext.prototype.remove = function\n    remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.AuthTypesContext.AuthTypeCallsContext.AuthCallsCredentialListMappingContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAuthCallsCredentialListMappingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAuthCallsCredentialListMappingContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AuthCallsCredentialListMappingList: AuthCallsCredentialListMappingList,\n  AuthCallsCredentialListMappingPage: AuthCallsCredentialListMappingPage,\n  AuthCallsCredentialListMappingInstance: AuthCallsCredentialListMappingInstance,\n  AuthCallsCredentialListMappingContext: AuthCallsCredentialListMappingContext\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAE;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC,CAAC,CAAE;AAC7B,IAAIG,IAAI,GAAGH,OAAO,CACd,mCAAmC,CAAC,CAAC,CAAE;AAC3C,IAAII,WAAW,GAAGJ,OAAO,CACrB,0CAA0C,CAAC,CAAC,CAAE;AAClD,IAAIK,MAAM,GAAGL,OAAO,CAChB,qCAAqC,CAAC,CAAC,CAAE;;AAE7C,IAAIM,kCAAkC;AACtC,IAAIC,kCAAkC;AACtC,IAAIC,sCAAsC;AAC1C,IAAIC,qCAAqC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,kCAAkC,GAAG,SACjCA,kCAAkCA,CAACI,OAAO,EAAEC,UAAU,EAAEC,SAAS,EAAE;EACrE;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA,SAASC,0CAA0CA,CAACC,GAAG,EAAE;IACvD,OAAOD,0CAA0C,CAACE,GAAG,CAACD,GAAG,CAAC;EAC5D;EAEAD,0CAA0C,CAACG,QAAQ,GAAGN,OAAO;EAC7D;EACAG,0CAA0C,CAACI,SAAS,GAAG;IACrDN,UAAU,EAAEA,UAAU;IACtBC,SAAS,EAAEA;EACb,CAAC;EACDC,0CAA0C,CAACK,IAAI,GAAGjB,CAAC,CAACkB,QAAQ,CAC1D,iGAAiG,CAAC;EACpG,CAAC,CAACN,0CAA0C,CAACI,SAAS,CAAC;EACvD;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAJ,0CAA0C,CAACO,MAAM,GAAG,SAASA,MAAMA,CAACC,IAAI,EACpEC,QAAQ,EAAE;IACZ,IAAIrB,CAAC,CAACsB,WAAW,CAACF,IAAI,CAAC,EAAE;MACvB,MAAM,IAAIG,KAAK,CAAC,oCAAoC,CAAC;IACvD;IACA,IAAIvB,CAAC,CAACsB,WAAW,CAACF,IAAI,CAACI,iBAAiB,CAAC,EAAE;MACzC,MAAM,IAAID,KAAK,CAAC,sDAAsD,CAAC;IACzE;IAEA,IAAIE,QAAQ,GAAG3B,CAAC,CAAC4B,KAAK,CAAC,CAAC;IACxB,IAAIC,IAAI,GAAGvB,MAAM,CAACwB,EAAE,CAAC;MAAC,mBAAmB,EAAE5B,CAAC,CAACc,GAAG,CAACM,IAAI,EAAE,mBAAmB;IAAC,CAAC,CAAC;IAE7E,IAAIS,OAAO,GAAG,IAAI,CAACd,QAAQ,CAACI,MAAM,CAAC;MAACW,GAAG,EAAE,IAAI,CAACb,IAAI;MAAEc,MAAM,EAAE,MAAM;MAAEJ,IAAI,EAAEA;IAAI,CAAC,CAAC;IAEhFE,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;MACvCR,QAAQ,CAACS,OAAO,CAAC,IAAI3B,sCAAsC,CACzD,IAAI,CAACQ,QAAQ,EACbkB,OAAO,EACP,IAAI,CAACjB,SAAS,CAACN,UAAU,EACzB,IAAI,CAACM,SAAS,CAACL,SAAS,EACxB,IAAI,CAACK,SAAS,CAACH,GACjB,CAAC,CAAC;IACJ,CAAC,CAACsB,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;MAC5BZ,QAAQ,CAACa,MAAM,CAACD,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIrC,CAAC,CAACuC,UAAU,CAAClB,QAAQ,CAAC,EAAE;MAC1BI,QAAQ,CAACI,OAAO,CAACW,OAAO,CAACnB,QAAQ,CAAC;IACpC;IAEA,OAAOI,QAAQ,CAACI,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAjB,0CAA0C,CAAC6B,IAAI,GAAG,SAASA,IAAIA,CAACrB,IAAI,EAAEC,QAAQ,EAC1E;IACF,IAAIrB,CAAC,CAACuC,UAAU,CAACnB,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAIA,IAAI,CAACC,QAAQ,EAAE;MACjBA,QAAQ,GAAGD,IAAI,CAACC,QAAQ;IAC1B;IACA,IAAIrB,CAAC,CAACsB,WAAW,CAACD,QAAQ,CAAC,EAAE;MAC3B,MAAM,IAAIE,KAAK,CAAC,oCAAoC,CAAC;IACvD;IAEA,IAAImB,IAAI,GAAG,KAAK;IAChB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIC,MAAM,GAAG,IAAI,CAAC9B,QAAQ,CAAC+B,UAAU,CAAC;MACpCC,KAAK,EAAE3B,IAAI,CAAC2B,KAAK;MACjBC,QAAQ,EAAE5B,IAAI,CAAC4B;IACjB,CAAC,CAAC;IAEF,SAASC,UAAUA,CAACZ,KAAK,EAAE;MACzBK,IAAI,GAAG,IAAI;MACX,IAAI1C,CAAC,CAACuC,UAAU,CAACnB,IAAI,CAACsB,IAAI,CAAC,EAAE;QAC3BtB,IAAI,CAACsB,IAAI,CAACL,KAAK,CAAC;MAClB;IACF;IAEA,SAASa,aAAaA,CAACC,EAAE,EAAE;MACzB,IAAItB,OAAO,GAAGsB,EAAE,CAAC,CAAC;MAClB,IAAInD,CAAC,CAACsB,WAAW,CAACO,OAAO,CAAC,EAAE;QAC1BoB,UAAU,CAAC,CAAC;QACZ;MACF;MAEApB,OAAO,CAACG,IAAI,CAAC,UAASoB,IAAI,EAAE;QAC1BpD,CAAC,CAACyC,IAAI,CAACW,IAAI,CAACC,SAAS,EAAE,UAASC,QAAQ,EAAE;UACxC,IAAIZ,IAAI,IAAK,CAAC1C,CAAC,CAACsB,WAAW,CAACF,IAAI,CAAC2B,KAAK,CAAC,IAAIH,eAAe,IAAIxB,IAAI,CAAC2B,KAAM,EAAE;YACzEL,IAAI,GAAG,IAAI;YACX,OAAO,KAAK;UACd;UAEAE,eAAe,EAAE;UACjBvB,QAAQ,CAACiC,QAAQ,EAAEL,UAAU,CAAC;QAChC,CAAC,CAAC;QAEF,IAAKJ,MAAM,CAACU,SAAS,IAAIV,MAAM,CAACU,SAAS,IAAIZ,WAAW,EAAG;UACzDM,UAAU,CAAC,CAAC;QACd,CAAC,MAAM,IAAI,CAACP,IAAI,EAAE;UAChBC,WAAW,EAAE;UACbO,aAAa,CAAClD,CAAC,CAACmC,IAAI,CAACiB,IAAI,CAACI,QAAQ,EAAEJ,IAAI,CAAC,CAAC;QAC5C;MACF,CAAC,CAAC;MAEFvB,OAAO,CAACO,KAAK,CAACa,UAAU,CAAC;IAC3B;IAEAC,aAAa,CAAClD,CAAC,CAACmC,IAAI,CAAC,IAAI,CAACiB,IAAI,EAAE,IAAI,EAAEpD,CAAC,CAACyD,KAAK,CAACrC,IAAI,EAAEyB,MAAM,CAAC,CAAC,CAAC;EAC/D,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAjC,0CAA0C,CAAC8C,IAAI,GAAG,SAASA,IAAIA,CAACtC,IAAI,EAAEC,QAAQ,EAC1E;IACF,IAAIrB,CAAC,CAACuC,UAAU,CAACnB,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAIK,QAAQ,GAAG3B,CAAC,CAAC4B,KAAK,CAAC,CAAC;IACxB,IAAIiC,YAAY,GAAG,EAAE;IACrBvC,IAAI,CAACC,QAAQ,GAAG,UAASuC,QAAQ,EAAElB,IAAI,EAAE;MACvCiB,YAAY,CAACE,IAAI,CAACD,QAAQ,CAAC;MAE3B,IAAI,CAAC5D,CAAC,CAACsB,WAAW,CAACF,IAAI,CAAC2B,KAAK,CAAC,IAAIY,YAAY,CAACG,MAAM,KAAK1C,IAAI,CAAC2B,KAAK,EAAE;QACpEL,IAAI,CAAC,CAAC;MACR;IACF,CAAC;IAEDtB,IAAI,CAACsB,IAAI,GAAG,UAASL,KAAK,EAAE;MAC1B,IAAIrC,CAAC,CAACsB,WAAW,CAACe,KAAK,CAAC,EAAE;QACxBZ,QAAQ,CAACS,OAAO,CAACyB,YAAY,CAAC;MAChC,CAAC,MAAM;QACLlC,QAAQ,CAACa,MAAM,CAACD,KAAK,CAAC;MACxB;IACF,CAAC;IAED,IAAIrC,CAAC,CAACuC,UAAU,CAAClB,QAAQ,CAAC,EAAE;MAC1BI,QAAQ,CAACI,OAAO,CAACW,OAAO,CAACnB,QAAQ,CAAC;IACpC;IAEA,IAAI,CAACoB,IAAI,CAACrB,IAAI,CAAC;IACf,OAAOK,QAAQ,CAACI,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAjB,0CAA0C,CAACwC,IAAI,GAAG,SAASA,IAAIA,CAAChC,IAAI,EAAEC,QAAQ,EAC1E;IACF,IAAIrB,CAAC,CAACuC,UAAU,CAACnB,IAAI,CAAC,EAAE;MACtBC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IAEjB,IAAIK,QAAQ,GAAG3B,CAAC,CAAC4B,KAAK,CAAC,CAAC;IACxB,IAAIC,IAAI,GAAGvB,MAAM,CAACwB,EAAE,CAAC;MACnB,WAAW,EAAER,IAAI,CAAC2C,SAAS;MAC3B,MAAM,EAAE3C,IAAI,CAAC4C,UAAU;MACvB,UAAU,EAAE5C,IAAI,CAAC4B;IACnB,CAAC,CAAC;IAEF,IAAInB,OAAO,GAAG,IAAI,CAACd,QAAQ,CAACqC,IAAI,CAAC;MAACtB,GAAG,EAAE,IAAI,CAACb,IAAI;MAAEc,MAAM,EAAE,KAAK;MAAEkC,MAAM,EAAEtC;IAAI,CAAC,CAAC;IAE/EE,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;MACvCR,QAAQ,CAACS,OAAO,CAAC,IAAI5B,kCAAkC,CAAC,IAAI,CAACS,QAAQ,EAAEkB,OAAO,EAAE,IAAI,CAACjB,SAAS,CAAC,CAAC;IAClG,CAAC,CAACmB,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;MAC5BZ,QAAQ,CAACa,MAAM,CAACD,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIrC,CAAC,CAACuC,UAAU,CAAClB,QAAQ,CAAC,EAAE;MAC1BI,QAAQ,CAACI,OAAO,CAACW,OAAO,CAACnB,QAAQ,CAAC;IACpC;IAEA,OAAOI,QAAQ,CAACI,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAjB,0CAA0C,CAACsD,OAAO,GAAG,SAASA,OAAOA,CAACC,SAAS,EAC3E9C,QAAQ,EAAE;IACZ,IAAII,QAAQ,GAAG3B,CAAC,CAAC4B,KAAK,CAAC,CAAC;IAExB,IAAIG,OAAO,GAAG,IAAI,CAACd,QAAQ,CAACqD,OAAO,CAACC,MAAM,CAACC,OAAO,CAAC;MAACvC,MAAM,EAAE,KAAK;MAAED,GAAG,EAAEqC;IAAS,CAAC,CAAC;IAEnFtC,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;MACvCR,QAAQ,CAACS,OAAO,CAAC,IAAI5B,kCAAkC,CAAC,IAAI,CAACS,QAAQ,EAAEkB,OAAO,EAAE,IAAI,CAACjB,SAAS,CAAC,CAAC;IAClG,CAAC,CAACmB,IAAI,CAAC,IAAI,CAAC,CAAC;IAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;MAC5BZ,QAAQ,CAACa,MAAM,CAACD,KAAK,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIrC,CAAC,CAACuC,UAAU,CAAClB,QAAQ,CAAC,EAAE;MAC1BI,QAAQ,CAACI,OAAO,CAACW,OAAO,CAACnB,QAAQ,CAAC;IACpC;IAEA,OAAOI,QAAQ,CAACI,OAAO;EACzB,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAjB,0CAA0C,CAACE,GAAG,GAAG,SAASA,GAAGA,CAACD,GAAG,EAAE;IACjE,OAAO,IAAIL,qCAAqC,CAC9C,IAAI,CAACO,QAAQ,EACb,IAAI,CAACC,SAAS,CAACN,UAAU,EACzB,IAAI,CAACM,SAAS,CAACL,SAAS,EACxBE,GACF,CAAC;EACH,CAAC;;EAED;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACAD,0CAA0C,CAAC2D,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;IACpE,OAAO,IAAI,CAACvD,SAAS;EACvB,CAAC;EAEDJ,0CAA0C,CAACX,IAAI,CAACuE,OAAO,CAACC,MAAM,CAAC,GAAG,SAC9DD,OAAOA,CAACE,KAAK,EAAEC,OAAO,EAAE;IAC1B,OAAO1E,IAAI,CAACuE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;EAC7C,CAAC;EAED,OAAO/D,0CAA0C;AACnD,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAN,kCAAkC,GAAG,SACjCA,kCAAkCA,CAACG,OAAO,EAAEmE,QAAQ,EAAEC,QAAQ,EAAE;EAClE;EACA,IAAI,CAAC7D,SAAS,GAAG6D,QAAQ;EAEzB3E,IAAI,CAAC4E,SAAS,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI,EAAEvE,OAAO,EAAEmE,QAAQ,EAAE,IAAI,CAAC5D,SAAS,CAAC;AAC1E,CAAC;AAEDhB,CAAC,CAACiF,MAAM,CAAC3E,kCAAkC,CAACwE,SAAS,EAAE5E,IAAI,CAAC4E,SAAS,CAAC;AACtExE,kCAAkC,CAACwE,SAAS,CAACC,WAAW,GAAGzE,kCAAkC;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,kCAAkC,CAACwE,SAAS,CAACI,WAAW,GAAG,SACvDA,WAAWA,CAACjD,OAAO,EAAE;EACvB,OAAO,IAAI1B,sCAAsC,CAC/C,IAAI,CAACQ,QAAQ,EACbkB,OAAO,EACP,IAAI,CAACjB,SAAS,CAACN,UAAU,EACzB,IAAI,CAACM,SAAS,CAACL,SACjB,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,kCAAkC,CAACwE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EACtE,IAAIY,KAAK,GAAG,CAAC,CAAC;EACdnF,CAAC,CAACoF,MAAM,CAAC,IAAI,EAAE,UAASC,KAAK,EAAEC,GAAG,EAAE;IAClC,IAAI,CAACtF,CAAC,CAACuF,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,IAAI,CAAEtF,CAAC,CAACuC,UAAU,CAAC8C,KAAK,CAAC,EAAE;MACpDF,KAAK,CAACG,GAAG,CAAC,GAAGD,KAAK;IACpB;EACF,CAAC,CAAC;EACF,OAAOF,KAAK;AACd,CAAC;AAED7E,kCAAkC,CAACwE,SAAS,CAAC7E,IAAI,CAACuE,OAAO,CAACC,MAAM,CAAC,GAAG,SAChED,OAAOA,CAACE,KAAK,EAAEC,OAAO,EAAE;EAC1B,OAAO1E,IAAI,CAACuE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACApE,sCAAsC,GAAG,SACrCA,sCAAsCA,CAACE,OAAO,EAAEwB,OAAO,EAAEvB,UAAU,EACnEC,SAAS,EAAEE,GAAG,EAAE;EAClB,IAAI,CAACE,QAAQ,GAAGN,OAAO;;EAEvB;EACA,IAAI,CAACC,UAAU,GAAGuB,OAAO,CAACuD,WAAW,CAAC,CAAC;EACvC,IAAI,CAACC,WAAW,GAAGtF,WAAW,CAACuF,eAAe,CAACzD,OAAO,CAAC0D,YAAY,CAAC,CAAC,CAAC;EACtE,IAAI,CAACC,WAAW,GAAGzF,WAAW,CAACuF,eAAe,CAACzD,OAAO,CAAC4D,YAAY,CAAC,CAAC,CAAC;EACtE,IAAI,CAACC,YAAY,GAAG7D,OAAO,CAAC8D,aAAa,CAAC,CAAC;EAC3C,IAAI,CAAClF,GAAG,GAAGoB,OAAO,CAACpB,GAAG,CAAC,CAAC;;EAExB;EACA,IAAI,CAACmF,QAAQ,GAAGC,SAAS;EACzB,IAAI,CAACjF,SAAS,GAAG;IAACN,UAAU,EAAEA,UAAU;IAAEC,SAAS,EAAEA,SAAS;IAAEE,GAAG,EAAEA,GAAG,IAAI,IAAI,CAACA;EAAK,CAAC;AACzF,CAAC;AAEDqF,MAAM,CAACC,cAAc,CAAC5F,sCAAsC,CAACuE,SAAS,EACpE,QAAQ,EAAE;EACVhE,GAAG,EAAE,SAAAA,CAAA,EAAW;IACd,IAAI,CAAC,IAAI,CAACkF,QAAQ,EAAE;MAClB,IAAI,CAACA,QAAQ,GAAG,IAAIxF,qCAAqC,CACvD,IAAI,CAACO,QAAQ,EACb,IAAI,CAACC,SAAS,CAACN,UAAU,EACzB,IAAI,CAACM,SAAS,CAACL,SAAS,EACxB,IAAI,CAACK,SAAS,CAACH,GACjB,CAAC;IACH;IAEA,OAAO,IAAI,CAACmF,QAAQ;EACtB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAzF,sCAAsC,CAACuE,SAAS,CAACsB,KAAK,GAAG,SACrDA,KAAKA,CAAC/E,QAAQ,EAAE;EAClB,OAAO,IAAI,CAACgF,MAAM,CAACD,KAAK,CAAC/E,QAAQ,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,sCAAsC,CAACuE,SAAS,CAACwB,MAAM,GAAG,SACtDA,MAAMA,CAACjF,QAAQ,EAAE;EACnB,OAAO,IAAI,CAACgF,MAAM,CAACC,MAAM,CAACjF,QAAQ,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,sCAAsC,CAACuE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EAC1E,IAAIY,KAAK,GAAG,CAAC,CAAC;EACdnF,CAAC,CAACoF,MAAM,CAAC,IAAI,EAAE,UAASC,KAAK,EAAEC,GAAG,EAAE;IAClC,IAAI,CAACtF,CAAC,CAACuF,UAAU,CAACD,GAAG,EAAE,GAAG,CAAC,IAAI,CAAEtF,CAAC,CAACuC,UAAU,CAAC8C,KAAK,CAAC,EAAE;MACpDF,KAAK,CAACG,GAAG,CAAC,GAAGD,KAAK;IACpB;EACF,CAAC,CAAC;EACF,OAAOF,KAAK;AACd,CAAC;AAED5E,sCAAsC,CAACuE,SAAS,CAAC7E,IAAI,CAACuE,OAAO,CAACC,MAAM,CAAC,GAAG,SACpED,OAAOA,CAACE,KAAK,EAAEC,OAAO,EAAE;EAC1B,OAAO1E,IAAI,CAACuE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnE,qCAAqC,GAAG,SACpCA,qCAAqCA,CAACC,OAAO,EAAEC,UAAU,EAAEC,SAAS,EAAEE,GAAG,EAAE;EAC7E,IAAI,CAACE,QAAQ,GAAGN,OAAO;;EAEvB;EACA,IAAI,CAACO,SAAS,GAAG;IAACN,UAAU,EAAEA,UAAU;IAAEC,SAAS,EAAEA,SAAS;IAAEE,GAAG,EAAEA;EAAK,CAAC;EAC3E,IAAI,CAACI,IAAI,GAAGjB,CAAC,CAACkB,QAAQ,CACpB,4GAA4G,CAAC;EAC/G,CAAC,CAAC,IAAI,CAACF,SAAS,CAAC;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,qCAAqC,CAACsE,SAAS,CAACsB,KAAK,GAAG,SAASA,KAAKA,CAAC/E,QAAQ,EAC3E;EACF,IAAII,QAAQ,GAAG3B,CAAC,CAAC4B,KAAK,CAAC,CAAC;EACxB,IAAIG,OAAO,GAAG,IAAI,CAACd,QAAQ,CAACqF,KAAK,CAAC;IAACtE,GAAG,EAAE,IAAI,CAACb,IAAI;IAAEc,MAAM,EAAE;EAAK,CAAC,CAAC;EAElEF,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;IACvCR,QAAQ,CAACS,OAAO,CAAC,IAAI3B,sCAAsC,CACzD,IAAI,CAACQ,QAAQ,EACbkB,OAAO,EACP,IAAI,CAACjB,SAAS,CAACN,UAAU,EACzB,IAAI,CAACM,SAAS,CAACL,SAAS,EACxB,IAAI,CAACK,SAAS,CAACH,GACjB,CAAC,CAAC;EACJ,CAAC,CAACsB,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;IAC5BZ,QAAQ,CAACa,MAAM,CAACD,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIrC,CAAC,CAACuC,UAAU,CAAClB,QAAQ,CAAC,EAAE;IAC1BI,QAAQ,CAACI,OAAO,CAACW,OAAO,CAACnB,QAAQ,CAAC;EACpC;EAEA,OAAOI,QAAQ,CAACI,OAAO;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArB,qCAAqC,CAACsE,SAAS,CAACwB,MAAM,GAAG,SACrDA,MAAMA,CAACjF,QAAQ,EAAE;EACnB,IAAII,QAAQ,GAAG3B,CAAC,CAAC4B,KAAK,CAAC,CAAC;EACxB,IAAIG,OAAO,GAAG,IAAI,CAACd,QAAQ,CAACuF,MAAM,CAAC;IAACxE,GAAG,EAAE,IAAI,CAACb,IAAI;IAAEc,MAAM,EAAE;EAAQ,CAAC,CAAC;EAEtEF,OAAO,GAAGA,OAAO,CAACG,IAAI,CAAC,UAASC,OAAO,EAAE;IACvCR,QAAQ,CAACS,OAAO,CAACD,OAAO,CAAC;EAC3B,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC;EAEbN,OAAO,CAACO,KAAK,CAAC,UAASC,KAAK,EAAE;IAC5BZ,QAAQ,CAACa,MAAM,CAACD,KAAK,CAAC;EACxB,CAAC,CAAC;EAEF,IAAIrC,CAAC,CAACuC,UAAU,CAAClB,QAAQ,CAAC,EAAE;IAC1BI,QAAQ,CAACI,OAAO,CAACW,OAAO,CAACnB,QAAQ,CAAC;EACpC;EAEA,OAAOI,QAAQ,CAACI,OAAO;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArB,qCAAqC,CAACsE,SAAS,CAACP,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EACzE,OAAO,IAAI,CAACvD,SAAS;AACvB,CAAC;AAEDR,qCAAqC,CAACsE,SAAS,CAAC7E,IAAI,CAACuE,OAAO,CAACC,MAAM,CAAC,GAAG,SACnED,OAAOA,CAACE,KAAK,EAAEC,OAAO,EAAE;EAC1B,OAAO1E,IAAI,CAACuE,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC,CAAC,EAAEI,OAAO,CAAC;AAC7C,CAAC;AAED4B,MAAM,CAACC,OAAO,GAAG;EACfnG,kCAAkC,EAAEA,kCAAkC;EACtEC,kCAAkC,EAAEA,kCAAkC;EACtEC,sCAAsC,EAAEA,sCAAsC;EAC9EC,qCAAqC,EAAEA;AACzC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}