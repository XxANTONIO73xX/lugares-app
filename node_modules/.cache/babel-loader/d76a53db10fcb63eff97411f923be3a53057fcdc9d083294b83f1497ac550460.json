{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../../../base/values'); /* jshint ignore:line */\n\nvar MessageInteractionList;\nvar MessageInteractionPage;\nvar MessageInteractionInstance;\nvar MessageInteractionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageInteractionList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList\n *\n * @param {Twilio.Proxy.V1} version - Version of the resource\n * @param {string} serviceSid - Service Sid.\n * @param {string} sessionSid - Session Sid.\n * @param {string} participantSid - Participant Sid.\n */\n/* jshint ignore:end */\nMessageInteractionList = function MessageInteractionList(version, serviceSid, sessionSid, participantSid) {\n  /* jshint ignore:start */\n  /**\n   * @function messageInteractions\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext}\n   */\n  /* jshint ignore:end */\n  function MessageInteractionListInstance(sid) {\n    return MessageInteractionListInstance.get(sid);\n  }\n  MessageInteractionListInstance._version = version;\n  // Path Solution\n  MessageInteractionListInstance._solution = {\n    serviceSid: serviceSid,\n    sessionSid: sessionSid,\n    participantSid: participantSid\n  };\n  MessageInteractionListInstance._uri = _.template('/Services/<%= serviceSid %>/Sessions/<%= sessionSid %>/Participants/<%= participantSid %>/MessageInteractions' // jshint ignore:line\n  )(MessageInteractionListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a MessageInteractionInstance\n   *\n   * @function create\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.body] - Message body\n   * @param {string|list} [opts.mediaUrl] - Not supported in beta\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed MessageInteractionInstance\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Body': _.get(opts, 'body'),\n      'MediaUrl': serialize.map(_.get(opts, 'mediaUrl'), function (e) {\n        return e;\n      })\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessageInteractionInstance(this._version, payload, this._solution.serviceSid, this._solution.sessionSid, this._solution.participantSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams MessageInteractionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists MessageInteractionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of MessageInteractionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessageInteractionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of MessageInteractionInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessageInteractionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a message_interaction\n   *\n   * @function get\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext}\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.get = function get(sid) {\n    return new MessageInteractionContext(this._version, this._solution.serviceSid, this._solution.sessionSid, this._solution.participantSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  MessageInteractionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return MessageInteractionListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageInteractionPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MessageInteractionSolution} solution - Path solution\n *\n * @returns MessageInteractionPage\n */\n/* jshint ignore:end */\nMessageInteractionPage = function MessageInteractionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(MessageInteractionPage.prototype, Page.prototype);\nMessageInteractionPage.prototype.constructor = MessageInteractionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of MessageInteractionInstance\n *\n * @function getInstance\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionPage#\n *\n * @param {MessageInteractionPayload} payload - Payload response from the API\n *\n * @returns MessageInteractionInstance\n */\n/* jshint ignore:end */\nMessageInteractionPage.prototype.getInstance = function getInstance(payload) {\n  return new MessageInteractionInstance(this._version, payload, this._solution.serviceSid, this._solution.sessionSid, this._solution.participantSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessageInteractionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nMessageInteractionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageInteractionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionInstance\n *\n * @property {string} sid -\n *          A string that uniquely identifies this Message Interaction.\n * @property {string} sessionSid - Session Sid.\n * @property {string} serviceSid - Service Sid.\n * @property {string} accountSid - Account Sid.\n * @property {string} data - Message body\n * @property {message_interaction.type} type - The Type of this Message Interaction\n * @property {string} participantSid - Participant Sid.\n * @property {string} inboundParticipantSid -\n *          Always empty for Message Interactions.\n * @property {string} inboundResourceSid - Always empty for Message Interactions.\n * @property {message_interaction.resource_status} inboundResourceStatus -\n *          Always empty for Message Interactions.\n * @property {string} inboundResourceType - Always empty for Message Interactions.\n * @property {string} inboundResourceUrl - Always empty for Message Interactions.\n * @property {string} outboundParticipantSid - Outbound Participant Sid.\n * @property {string} outboundResourceSid - Outbound message resource Sid.\n * @property {message_interaction.resource_status} outboundResourceStatus -\n *          The Outbound Resource Status of this Message Interaction\n * @property {string} outboundResourceType - Message\n * @property {string} outboundResourceUrl - The URL of the Twilio message resource.\n * @property {Date} dateCreated - The date this Message Interaction was created\n * @property {Date} dateUpdated -\n *          The date this Message Interaction was last updated\n * @property {string} url - The URL of this resource.\n *\n * @param {V1} version - Version of the resource\n * @param {MessageInteractionPayload} payload - The instance payload\n * @param {sid} serviceSid - Service Sid.\n * @param {sid} sessionSid - Session Sid.\n * @param {sid} participantSid - Participant Sid.\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nMessageInteractionInstance = function MessageInteractionInstance(version, payload, serviceSid, sessionSid, participantSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.sessionSid = payload.session_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.data = payload.data; // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.participantSid = payload.participant_sid; // jshint ignore:line\n  this.inboundParticipantSid = payload.inbound_participant_sid; // jshint ignore:line\n  this.inboundResourceSid = payload.inbound_resource_sid; // jshint ignore:line\n  this.inboundResourceStatus = payload.inbound_resource_status; // jshint ignore:line\n  this.inboundResourceType = payload.inbound_resource_type; // jshint ignore:line\n  this.inboundResourceUrl = payload.inbound_resource_url; // jshint ignore:line\n  this.outboundParticipantSid = payload.outbound_participant_sid; // jshint ignore:line\n  this.outboundResourceSid = payload.outbound_resource_sid; // jshint ignore:line\n  this.outboundResourceStatus = payload.outbound_resource_status; // jshint ignore:line\n  this.outboundResourceType = payload.outbound_resource_type; // jshint ignore:line\n  this.outboundResourceUrl = payload.outbound_resource_url; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sessionSid: sessionSid,\n    participantSid: participantSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(MessageInteractionInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new MessageInteractionContext(this._version, this._solution.serviceSid, this._solution.sessionSid, this._solution.participantSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a MessageInteractionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInteractionInstance\n */\n/* jshint ignore:end */\nMessageInteractionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessageInteractionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nMessageInteractionInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageInteractionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid - The service_sid\n * @param {sid} sessionSid - The session_sid\n * @param {sid} participantSid - The participant_sid\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nMessageInteractionContext = function MessageInteractionContext(version, serviceSid, sessionSid, participantSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    serviceSid: serviceSid,\n    sessionSid: sessionSid,\n    participantSid: participantSid,\n    sid: sid\n  };\n  this._uri = _.template('/Services/<%= serviceSid %>/Sessions/<%= sessionSid %>/Participants/<%= participantSid %>/MessageInteractions/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MessageInteractionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInteractionInstance\n */\n/* jshint ignore:end */\nMessageInteractionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MessageInteractionInstance(this._version, payload, this._solution.serviceSid, this._solution.sessionSid, this._solution.participantSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessageInteractionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nMessageInteractionContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  MessageInteractionList: MessageInteractionList,\n  MessageInteractionPage: MessageInteractionPage,\n  MessageInteractionInstance: MessageInteractionInstance,\n  MessageInteractionContext: MessageInteractionContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","MessageInteractionList","MessageInteractionPage","MessageInteractionInstance","MessageInteractionContext","version","serviceSid","sessionSid","participantSid","MessageInteractionListInstance","sid","get","_version","_solution","_uri","template","create","opts","callback","isFunction","deferred","defer","data","of","map","e","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","pageLimit","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","session_sid","service_sid","accountSid","account_sid","type","participant_sid","inboundParticipantSid","inbound_participant_sid","inboundResourceSid","inbound_resource_sid","inboundResourceStatus","inbound_resource_status","inboundResourceType","inbound_resource_type","inboundResourceUrl","inbound_resource_url","outboundParticipantSid","outbound_participant_sid","outboundResourceSid","outbound_resource_sid","outboundResourceStatus","outbound_resource_status","outboundResourceType","outbound_resource_type","outboundResourceUrl","outbound_resource_url","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/proxy/v1/service/session/participant/messageInteraction.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../../base/values');  /* jshint ignore:line */\n\nvar MessageInteractionList;\nvar MessageInteractionPage;\nvar MessageInteractionInstance;\nvar MessageInteractionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageInteractionList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList\n *\n * @param {Twilio.Proxy.V1} version - Version of the resource\n * @param {string} serviceSid - Service Sid.\n * @param {string} sessionSid - Session Sid.\n * @param {string} participantSid - Participant Sid.\n */\n/* jshint ignore:end */\nMessageInteractionList = function MessageInteractionList(version, serviceSid,\n                                                          sessionSid,\n                                                          participantSid) {\n  /* jshint ignore:start */\n  /**\n   * @function messageInteractions\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext}\n   */\n  /* jshint ignore:end */\n  function MessageInteractionListInstance(sid) {\n    return MessageInteractionListInstance.get(sid);\n  }\n\n  MessageInteractionListInstance._version = version;\n  // Path Solution\n  MessageInteractionListInstance._solution = {\n    serviceSid: serviceSid,\n    sessionSid: sessionSid,\n    participantSid: participantSid\n  };\n  MessageInteractionListInstance._uri = _.template(\n    '/Services/<%= serviceSid %>/Sessions/<%= sessionSid %>/Participants/<%= participantSid %>/MessageInteractions' // jshint ignore:line\n  )(MessageInteractionListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a MessageInteractionInstance\n   *\n   * @function create\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.body] - Message body\n   * @param {string|list} [opts.mediaUrl] - Not supported in beta\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed MessageInteractionInstance\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Body': _.get(opts, 'body'),\n      'MediaUrl': serialize.map(_.get(opts, 'mediaUrl'), function(e) { return e; })\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessageInteractionInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.sessionSid,\n        this._solution.participantSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams MessageInteractionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists MessageInteractionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of MessageInteractionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessageInteractionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of MessageInteractionInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessageInteractionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a message_interaction\n   *\n   * @function get\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext}\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.get = function get(sid) {\n    return new MessageInteractionContext(\n      this._version,\n      this._solution.serviceSid,\n      this._solution.sessionSid,\n      this._solution.participantSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MessageInteractionListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MessageInteractionListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageInteractionPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MessageInteractionSolution} solution - Path solution\n *\n * @returns MessageInteractionPage\n */\n/* jshint ignore:end */\nMessageInteractionPage = function MessageInteractionPage(version, response,\n                                                          solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MessageInteractionPage.prototype, Page.prototype);\nMessageInteractionPage.prototype.constructor = MessageInteractionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of MessageInteractionInstance\n *\n * @function getInstance\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionPage#\n *\n * @param {MessageInteractionPayload} payload - Payload response from the API\n *\n * @returns MessageInteractionInstance\n */\n/* jshint ignore:end */\nMessageInteractionPage.prototype.getInstance = function getInstance(payload) {\n  return new MessageInteractionInstance(\n    this._version,\n    payload,\n    this._solution.serviceSid,\n    this._solution.sessionSid,\n    this._solution.participantSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessageInteractionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMessageInteractionPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageInteractionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionInstance\n *\n * @property {string} sid -\n *          A string that uniquely identifies this Message Interaction.\n * @property {string} sessionSid - Session Sid.\n * @property {string} serviceSid - Service Sid.\n * @property {string} accountSid - Account Sid.\n * @property {string} data - Message body\n * @property {message_interaction.type} type - The Type of this Message Interaction\n * @property {string} participantSid - Participant Sid.\n * @property {string} inboundParticipantSid -\n *          Always empty for Message Interactions.\n * @property {string} inboundResourceSid - Always empty for Message Interactions.\n * @property {message_interaction.resource_status} inboundResourceStatus -\n *          Always empty for Message Interactions.\n * @property {string} inboundResourceType - Always empty for Message Interactions.\n * @property {string} inboundResourceUrl - Always empty for Message Interactions.\n * @property {string} outboundParticipantSid - Outbound Participant Sid.\n * @property {string} outboundResourceSid - Outbound message resource Sid.\n * @property {message_interaction.resource_status} outboundResourceStatus -\n *          The Outbound Resource Status of this Message Interaction\n * @property {string} outboundResourceType - Message\n * @property {string} outboundResourceUrl - The URL of the Twilio message resource.\n * @property {Date} dateCreated - The date this Message Interaction was created\n * @property {Date} dateUpdated -\n *          The date this Message Interaction was last updated\n * @property {string} url - The URL of this resource.\n *\n * @param {V1} version - Version of the resource\n * @param {MessageInteractionPayload} payload - The instance payload\n * @param {sid} serviceSid - Service Sid.\n * @param {sid} sessionSid - Session Sid.\n * @param {sid} participantSid - Participant Sid.\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nMessageInteractionInstance = function MessageInteractionInstance(version,\n    payload, serviceSid, sessionSid, participantSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.sessionSid = payload.session_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.data = payload.data; // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.participantSid = payload.participant_sid; // jshint ignore:line\n  this.inboundParticipantSid = payload.inbound_participant_sid; // jshint ignore:line\n  this.inboundResourceSid = payload.inbound_resource_sid; // jshint ignore:line\n  this.inboundResourceStatus = payload.inbound_resource_status; // jshint ignore:line\n  this.inboundResourceType = payload.inbound_resource_type; // jshint ignore:line\n  this.inboundResourceUrl = payload.inbound_resource_url; // jshint ignore:line\n  this.outboundParticipantSid = payload.outbound_participant_sid; // jshint ignore:line\n  this.outboundResourceSid = payload.outbound_resource_sid; // jshint ignore:line\n  this.outboundResourceStatus = payload.outbound_resource_status; // jshint ignore:line\n  this.outboundResourceType = payload.outbound_resource_type; // jshint ignore:line\n  this.outboundResourceUrl = payload.outbound_resource_url; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sessionSid: sessionSid,\n    participantSid: participantSid,\n    sid: sid || this.sid,\n  };\n};\n\nObject.defineProperty(MessageInteractionInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new MessageInteractionContext(\n        this._version,\n        this._solution.serviceSid,\n        this._solution.sessionSid,\n        this._solution.participantSid,\n        this._solution.sid\n      );\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a MessageInteractionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInteractionInstance\n */\n/* jshint ignore:end */\nMessageInteractionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessageInteractionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMessageInteractionInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageInteractionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid - The service_sid\n * @param {sid} sessionSid - The session_sid\n * @param {sid} participantSid - The participant_sid\n * @param {sid} sid - The sid\n */\n/* jshint ignore:end */\nMessageInteractionContext = function MessageInteractionContext(version,\n    serviceSid, sessionSid, participantSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    serviceSid: serviceSid,\n    sessionSid: sessionSid,\n    participantSid: participantSid,\n    sid: sid,\n  };\n  this._uri = _.template(\n    '/Services/<%= serviceSid %>/Sessions/<%= sessionSid %>/Participants/<%= participantSid %>/MessageInteractions/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MessageInteractionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInteractionInstance\n */\n/* jshint ignore:end */\nMessageInteractionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new MessageInteractionInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sessionSid,\n      this._solution.participantSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessageInteractionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nMessageInteractionContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MessageInteractionList: MessageInteractionList,\n  MessageInteractionPage: MessageInteractionPage,\n  MessageInteractionInstance: MessageInteractionInstance,\n  MessageInteractionContext: MessageInteractionContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}