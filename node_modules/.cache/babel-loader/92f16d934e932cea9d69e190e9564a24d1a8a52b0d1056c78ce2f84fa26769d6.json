{"ast":null,"code":"'use strict';\n\nvar crypto = require('crypto');\nvar _ = require('lodash');\nvar scmp = require('scmp');\nvar url = require('url');\n\n/**\n Utility function to get the expected signature for a given request\n\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {string} url - The full URL (with query string) you configured to handle this request\n @param {object} params - the parameters sent with this request\n @returns {string} - signature\n */\nfunction getExpectedTwilioSignature(authToken, url, params) {\n  if (url.indexOf('bodySHA256') != -1) params = {};\n  var data = Object.keys(params).sort().reduce((acc, key) => acc + key + params[key], url);\n  return crypto.createHmac('sha1', authToken).update(Buffer.from(data, 'utf-8')).digest('base64');\n}\n\n/**\n Utility function to get the expected body hash for a given request's body\n\n @param {string} body - The plain-text body of the request\n */\nfunction getExpectedBodyHash(body) {\n  return crypto.createHash('sha256').update(Buffer.from(body, 'utf-8')).digest('hex');\n}\n\n/**\n Utility function to validate an incoming request is indeed from Twilio\n\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {string} twilioHeader - The value of the X-Twilio-Signature header from the request\n @param {string} url - The full URL (with query string) you configured to handle this request\n @param {object} params - the parameters sent with this request\n @returns {boolean} - valid\n */\nfunction validateRequest(authToken, twilioHeader, url, params) {\n  var expectedSignature = getExpectedTwilioSignature(authToken, url, params);\n  return scmp(Buffer.from(twilioHeader), Buffer.from(expectedSignature));\n}\n\n/**\n Utility function to validate an incoming request is indeed from Twilio. This also validates\n the request body against the bodySHA256 post parameter.\n\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {string} twilioHeader - The value of the X-Twilio-Signature header from the request\n @param {string} requestUrl - The full URL (with query string) you configured to handle this request\n @param {string} body - The body of the request\n @returns {boolean} - valid\n */\nfunction validateRequestWithBody(authToken, twilioHeader, requestUrl, body) {\n  var urlObject = new url.URL(requestUrl);\n  return validateRequest(authToken, twilioHeader, requestUrl, {}) && validateBody(body, urlObject.searchParams.get('bodySHA256'));\n}\nfunction validateBody(body, bodyHash) {\n  var expectedHash = getExpectedBodyHash(body);\n  return scmp(Buffer.from(bodyHash), Buffer.from(expectedHash));\n}\n\n/**\n Utility function to validate an incoming request is indeed from Twilio (for use with express).\n adapted from https://github.com/crabasa/twiliosig\n\n @param {object} request - An expressjs request object (http://expressjs.com/api.html#req.params)\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {object} opts - options for request validation:\n    - url: The full URL (with query string) you used to configure the webhook with Twilio - overrides host/protocol options\n    - host: manually specify the host name used by Twilio in a number's webhook config\n    - protocol: manually specify the protocol used by Twilio in a number's webhook config\n */\nfunction validateExpressRequest(request, authToken, opts) {\n  var options = opts || {};\n  var webhookUrl;\n  if (options.url) {\n    // Let the user specify the full URL\n    webhookUrl = options.url;\n  } else {\n    // Use configured host/protocol, or infer based on request\n    var protocol = options.protocol || request.protocol;\n    var host = options.host || request.headers.host;\n    webhookUrl = url.format({\n      protocol: protocol,\n      host: host,\n      pathname: request.originalUrl\n    });\n    if (request.originalUrl.search(/\\?/) >= 0) {\n      webhookUrl = webhookUrl.replace(\"%3F\", \"?\");\n    }\n  }\n  if (webhookUrl.indexOf('bodySHA256') > 0) {\n    return validateRequestWithBody(authToken, request.header('X-Twilio-Signature'), webhookUrl, request.body || {});\n  } else {\n    return validateRequest(authToken, request.header('X-Twilio-Signature'), webhookUrl, request.body || {});\n  }\n}\n\n/**\nExpress middleware to accompany a Twilio webhook. Provides Twilio\nrequest validation, and makes the response a little more friendly for our\nTwiML generator.  Request validation requires the express.urlencoded middleware\nto have been applied (e.g. app.use(express.urlencoded()); in your app config).\n\nOptions:\n- validate: {Boolean} whether or not the middleware should validate the request\n    came from Twilio.  Default true. If the request does not originate from\n    Twilio, we will return a text body and a 403.  If there is no configured\n    auth token and validate=true, this is an error condition, so we will return\n    a 500.\n- host: manually specify the host name used by Twilio in a number's webhook config\n- protocol: manually specify the protocol used by Twilio in a number's webhook config\n\nReturns a middleware function.\n\nExamples:\nvar webhookMiddleware = twilio.webhook();\nvar webhookMiddleware = twilio.webhook('asdha9dhjasd'); //init with auth token\nvar webhookMiddleware = twilio.webhook({\n    validate:false // don't attempt request validation\n});\nvar webhookMiddleware = twilio.webhook({\n    host: 'hook.twilio.com',\n    protocol: 'https'\n});\n */\nfunction webhook() {\n  var opts = {\n    validate: true\n  };\n\n  // Process arguments\n  var tokenString;\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    var arg = arguments[i];\n    if (typeof arg === 'string') {\n      tokenString = arg;\n    } else {\n      opts = _.extend(opts, arg);\n    }\n  }\n\n  // set auth token from input or environment variable\n  opts.authToken = tokenString ? tokenString : process.env.TWILIO_AUTH_TOKEN;\n\n  // Create middleware function\n  return function hook(request, response, next) {\n    // Do validation if requested\n    if (opts.validate) {\n      // Check for a valid auth token\n      if (!opts.authToken) {\n        console.error('[Twilio]: Error - Twilio auth token is required for webhook request validation.');\n        response.type('text/plain').status(500).send('Webhook Error - we attempted to validate this request without first configuring our auth token.');\n      } else {\n        // Check that the request originated from Twilio\n        var valid = validateExpressRequest(request, opts.authToken, {\n          url: opts.url,\n          host: opts.host,\n          protocol: opts.protocol\n        });\n        if (valid) {\n          next();\n        } else {\n          return response.type('text/plain').status(403).send('Twilio Request Validation Failed.');\n        }\n      }\n    } else {\n      next();\n    }\n  };\n}\nmodule.exports = {\n  getExpectedTwilioSignature,\n  getExpectedBodyHash,\n  validateRequest,\n  validateRequestWithBody,\n  validateExpressRequest,\n  validateBody,\n  webhook\n};","map":{"version":3,"names":["crypto","require","_","scmp","url","getExpectedTwilioSignature","authToken","params","indexOf","data","Object","keys","sort","reduce","acc","key","createHmac","update","Buffer","from","digest","getExpectedBodyHash","body","createHash","validateRequest","twilioHeader","expectedSignature","validateRequestWithBody","requestUrl","urlObject","URL","validateBody","searchParams","get","bodyHash","expectedHash","validateExpressRequest","request","opts","options","webhookUrl","protocol","host","headers","format","pathname","originalUrl","search","replace","header","webhook","validate","tokenString","i","l","arguments","length","arg","extend","process","env","TWILIO_AUTH_TOKEN","hook","response","next","console","error","type","status","send","valid","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/webhooks/webhooks.js"],"sourcesContent":["'use strict';\n\nvar crypto = require('crypto');\nvar _ = require('lodash');\nvar scmp = require('scmp');\nvar url = require('url');\n\n/**\n Utility function to get the expected signature for a given request\n\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {string} url - The full URL (with query string) you configured to handle this request\n @param {object} params - the parameters sent with this request\n @returns {string} - signature\n */\nfunction getExpectedTwilioSignature(authToken, url, params) {\n  if (url.indexOf('bodySHA256') != -1) params = {};\n  var data = Object.keys(params)\n    .sort()\n    .reduce((acc, key) => acc + key + params[key], url);\n  \n  return crypto\n    .createHmac('sha1', authToken)\n    .update(Buffer.from(data, 'utf-8'))\n    .digest('base64');\n}\n\n/**\n Utility function to get the expected body hash for a given request's body\n\n @param {string} body - The plain-text body of the request\n */\nfunction getExpectedBodyHash(body) {\n  return crypto\n    .createHash('sha256')\n    .update(Buffer.from(body, 'utf-8'))\n    .digest('hex');\n}\n\n/**\n Utility function to validate an incoming request is indeed from Twilio\n\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {string} twilioHeader - The value of the X-Twilio-Signature header from the request\n @param {string} url - The full URL (with query string) you configured to handle this request\n @param {object} params - the parameters sent with this request\n @returns {boolean} - valid\n */\nfunction validateRequest(authToken, twilioHeader, url, params) {\n  var expectedSignature = getExpectedTwilioSignature(authToken, url, params);\n  return scmp(Buffer.from(twilioHeader), Buffer.from(expectedSignature));\n}\n\n/**\n Utility function to validate an incoming request is indeed from Twilio. This also validates\n the request body against the bodySHA256 post parameter.\n\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {string} twilioHeader - The value of the X-Twilio-Signature header from the request\n @param {string} requestUrl - The full URL (with query string) you configured to handle this request\n @param {string} body - The body of the request\n @returns {boolean} - valid\n */\nfunction validateRequestWithBody(authToken, twilioHeader, requestUrl, body) {\n  var urlObject = new url.URL(requestUrl);\n  return validateRequest(authToken, twilioHeader, requestUrl, {}) && validateBody(body, urlObject.searchParams.get('bodySHA256'));\n}\n\nfunction validateBody(body, bodyHash) {\n  var expectedHash = getExpectedBodyHash(body);\n  return scmp(Buffer.from(bodyHash), Buffer.from(expectedHash));\n}\n\n/**\n Utility function to validate an incoming request is indeed from Twilio (for use with express).\n adapted from https://github.com/crabasa/twiliosig\n\n @param {object} request - An expressjs request object (http://expressjs.com/api.html#req.params)\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {object} opts - options for request validation:\n    - url: The full URL (with query string) you used to configure the webhook with Twilio - overrides host/protocol options\n    - host: manually specify the host name used by Twilio in a number's webhook config\n    - protocol: manually specify the protocol used by Twilio in a number's webhook config\n */\nfunction validateExpressRequest(request, authToken, opts) {\n  var options = opts || {};\n  var webhookUrl;\n\n  if (options.url) {\n    // Let the user specify the full URL\n    webhookUrl = options.url;\n  } else {\n    // Use configured host/protocol, or infer based on request\n    var protocol = options.protocol || request.protocol;\n    var host = options.host || request.headers.host;\n\n    webhookUrl = url.format({\n        protocol: protocol,\n        host: host,\n        pathname: request.originalUrl\n    });\n    if (request.originalUrl.search(/\\?/) >= 0) {\n      webhookUrl = webhookUrl.replace(\"%3F\",\"?\");\n    }\n\n  }\n\n  if (webhookUrl.indexOf('bodySHA256') > 0) {\n    return validateRequestWithBody(\n      authToken,\n      request.header('X-Twilio-Signature'),\n      webhookUrl,\n      request.body || {}\n    );\n  } else {\n    return validateRequest(\n      authToken,\n      request.header('X-Twilio-Signature'),\n      webhookUrl,\n      request.body || {}\n    );\n  }\n}\n\n/**\nExpress middleware to accompany a Twilio webhook. Provides Twilio\nrequest validation, and makes the response a little more friendly for our\nTwiML generator.  Request validation requires the express.urlencoded middleware\nto have been applied (e.g. app.use(express.urlencoded()); in your app config).\n\nOptions:\n- validate: {Boolean} whether or not the middleware should validate the request\n    came from Twilio.  Default true. If the request does not originate from\n    Twilio, we will return a text body and a 403.  If there is no configured\n    auth token and validate=true, this is an error condition, so we will return\n    a 500.\n- host: manually specify the host name used by Twilio in a number's webhook config\n- protocol: manually specify the protocol used by Twilio in a number's webhook config\n\nReturns a middleware function.\n\nExamples:\nvar webhookMiddleware = twilio.webhook();\nvar webhookMiddleware = twilio.webhook('asdha9dhjasd'); //init with auth token\nvar webhookMiddleware = twilio.webhook({\n    validate:false // don't attempt request validation\n});\nvar webhookMiddleware = twilio.webhook({\n    host: 'hook.twilio.com',\n    protocol: 'https'\n});\n */\nfunction webhook() {\n  var opts = {\n    validate: true,\n  };\n\n  // Process arguments\n  var tokenString;\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    var arg = arguments[i];\n    if (typeof arg === 'string') {\n      tokenString = arg;\n    } else {\n      opts = _.extend(opts, arg);\n    }\n  }\n\n  // set auth token from input or environment variable\n  opts.authToken = tokenString ? tokenString : process.env.TWILIO_AUTH_TOKEN;\n\n  // Create middleware function\n  return function hook(request, response, next) {\n    // Do validation if requested\n    if (opts.validate) {\n      // Check for a valid auth token\n      if (!opts.authToken) {\n        console.error('[Twilio]: Error - Twilio auth token is required for webhook request validation.');\n        response.type('text/plain')\n          .status(500)\n          .send('Webhook Error - we attempted to validate this request without first configuring our auth token.');\n      } else {\n        // Check that the request originated from Twilio\n        var valid = validateExpressRequest(request, opts.authToken, {\n          url: opts.url,\n          host: opts.host,\n          protocol: opts.protocol\n        });\n\n        if (valid) {\n            next();\n        } else {\n          return response\n            .type('text/plain')\n            .status(403)\n            .send('Twilio Request Validation Failed.');\n        }\n      }\n    } else {\n      next();\n    }\n  };\n}\n\nmodule.exports = {\n  getExpectedTwilioSignature,\n  getExpectedBodyHash,\n  validateRequest,\n  validateRequestWithBody,\n  validateExpressRequest,\n  validateBody,\n  webhook,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}