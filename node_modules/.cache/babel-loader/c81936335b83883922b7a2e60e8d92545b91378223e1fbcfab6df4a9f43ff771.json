{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar PublishedTrackList = require('./roomParticipant/roomParticipantPublishedTrack').PublishedTrackList;\nvar SubscribedTrackList = require('./roomParticipant/roomParticipantSubscribedTrack').SubscribedTrackList;\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar ParticipantList;\nvar ParticipantPage;\nvar ParticipantInstance;\nvar ParticipantContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantList\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n * @param {string} roomSid -\n *          A system-generated 34-character string that uniquely identifies.\n */\n/* jshint ignore:end */\nParticipantList = function ParticipantList(version, roomSid) {\n  /* jshint ignore:start */\n  /**\n   * @function participants\n   * @memberof Twilio.Video.V1.RoomContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext}\n   */\n  /* jshint ignore:end */\n  function ParticipantListInstance(sid) {\n    return ParticipantListInstance.get(sid);\n  }\n  ParticipantListInstance._version = version;\n  // Path Solution\n  ParticipantListInstance._solution = {\n    roomSid: roomSid\n  };\n  ParticipantListInstance._uri = _.template('/Rooms/<%= roomSid %>/Participants' // jshint ignore:line\n  )(ParticipantListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams ParticipantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {participant.status} [opts.status] -\n   *          Only show Participants with the given Status.\n   * @param {string} [opts.identity] -\n   *          Only show Participants that connected to the Room using the provided Identity.\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only show Participants that started after this date, given as an UTC ISO 8601 Timestamp.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only show Participants that started before this date, given as an UTC ISO 8601 Timestamp.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ParticipantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {participant.status} [opts.status] -\n   *          Only show Participants with the given Status.\n   * @param {string} [opts.identity] -\n   *          Only show Participants that connected to the Room using the provided Identity.\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only show Participants that started after this date, given as an UTC ISO 8601 Timestamp.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only show Participants that started before this date, given as an UTC ISO 8601 Timestamp.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {participant.status} [opts.status] -\n   *          Only show Participants with the given Status.\n   * @param {string} [opts.identity] -\n   *          Only show Participants that connected to the Room using the provided Identity.\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only show Participants that started after this date, given as an UTC ISO 8601 Timestamp.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only show Participants that started before this date, given as an UTC ISO 8601 Timestamp.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'Identity': _.get(opts, 'identity'),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a participant\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext}\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.get = function get(sid) {\n    return new ParticipantContext(this._version, this._solution.roomSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  ParticipantListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return ParticipantListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantPage\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ParticipantSolution} solution - Path solution\n *\n * @returns ParticipantPage\n */\n/* jshint ignore:end */\nParticipantPage = function ParticipantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(ParticipantPage.prototype, Page.prototype);\nParticipantPage.prototype.constructor = ParticipantPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ParticipantInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomContext.ParticipantPage#\n *\n * @param {ParticipantPayload} payload - Payload response from the API\n *\n * @returns ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantPage.prototype.getInstance = function getInstance(payload) {\n  return new ParticipantInstance(this._version, payload, this._solution.roomSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nParticipantPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantInstance\n *\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} roomSid -\n *          A system-generated 34-character string that uniquely identifies.\n * @property {string} accountSid -\n *          The unique ID of the Account associated with this Room.\n * @property {participant.status} status -\n *          A string representing the status of the Participant.\n * @property {string} identity -\n *          The unique name identifier that is assigned to this Participant.\n * @property {Date} dateCreated -\n *          The date that this resource was created, given as a UTC ISO 8601 Timestamp.\n * @property {Date} dateUpdated -\n *          The date that this resource was last updated, given as a UTC ISO 8601 Timestamp.\n * @property {Date} startTime -\n *          The time of Participant connected to the Room, given as a UTC ISO 8601 Timestamp.\n * @property {Date} endTime -\n *          The time of Participant disconnected from the Room, given as a UTC ISO 8601 Timestamp.\n * @property {number} duration -\n *          Duration of time in seconds this Participant was connected.\n * @property {string} url - The absolute URL for this resource.\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {ParticipantPayload} payload - The instance payload\n * @param {sid} roomSid -\n *          A system-generated 34-character string that uniquely identifies.\n * @param {sid_like} sid - The sid\n */\n/* jshint ignore:end */\nParticipantInstance = function ParticipantInstance(version, payload, roomSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.roomSid = payload.room_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.startTime = deserialize.iso8601DateTime(payload.start_time); // jshint ignore:line\n  this.endTime = deserialize.iso8601DateTime(payload.end_time); // jshint ignore:line\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    roomSid: roomSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(ParticipantInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ParticipantContext(this._version, this._solution.roomSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {participant.status} [opts.status] -\n *          Set to disconnected to remove participant.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the publishedTracks\n *\n * @function publishedTracks\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList}\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.publishedTracks = function publishedTracks() {\n  return this._proxy.publishedTracks;\n};\n\n/* jshint ignore:start */\n/**\n * Access the subscribedTracks\n *\n * @function subscribedTracks\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList}\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.subscribedTracks = function subscribedTracks() {\n  return this._proxy.subscribedTracks;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nParticipantInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext\n *\n * @property {Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList} publishedTracks -\n *          publishedTracks resource\n * @property {Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList} subscribedTracks -\n *          subscribedTracks resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} roomSid - The room_sid\n * @param {sid_like} sid - The sid\n */\n/* jshint ignore:end */\nParticipantContext = function ParticipantContext(version, roomSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    roomSid: roomSid,\n    sid: sid\n  };\n  this._uri = _.template('/Rooms/<%= roomSid %>/Participants/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._publishedTracks = undefined;\n  this._subscribedTracks = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ParticipantInstance(this._version, payload, this._solution.roomSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {participant.status} [opts.status] -\n *          Set to disconnected to remove participant.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ParticipantInstance(this._version, payload, this._solution.roomSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(ParticipantContext.prototype, 'publishedTracks', {\n  get: function () {\n    if (!this._publishedTracks) {\n      this._publishedTracks = new PublishedTrackList(this._version, this._solution.roomSid, this._solution.sid);\n    }\n    return this._publishedTracks;\n  }\n});\nObject.defineProperty(ParticipantContext.prototype, 'subscribedTracks', {\n  get: function () {\n    if (!this._subscribedTracks) {\n      this._subscribedTracks = new SubscribedTrackList(this._version, this._solution.roomSid, this._solution.sid);\n    }\n    return this._subscribedTracks;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nParticipantContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  ParticipantList: ParticipantList,\n  ParticipantPage: ParticipantPage,\n  ParticipantInstance: ParticipantInstance,\n  ParticipantContext: ParticipantContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","PublishedTrackList","SubscribedTrackList","deserialize","serialize","values","ParticipantList","ParticipantPage","ParticipantInstance","ParticipantContext","version","roomSid","ParticipantListInstance","sid","get","_version","_solution","_uri","template","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601DateTime","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","room_sid","accountSid","account_sid","status","identity","dateCreated","date_created","dateUpdated","date_updated","startTime","start_time","endTime","end_time","duration","integer","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","publishedTracks","subscribedTracks","_publishedTracks","_subscribedTracks","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/video/v1/room/roomParticipant.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar PublishedTrackList = require(\n    './roomParticipant/roomParticipantPublishedTrack').PublishedTrackList;\nvar SubscribedTrackList = require(\n    './roomParticipant/roomParticipantSubscribedTrack').SubscribedTrackList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar ParticipantList;\nvar ParticipantPage;\nvar ParticipantInstance;\nvar ParticipantContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantList\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n * @param {string} roomSid -\n *          A system-generated 34-character string that uniquely identifies.\n */\n/* jshint ignore:end */\nParticipantList = function ParticipantList(version, roomSid) {\n  /* jshint ignore:start */\n  /**\n   * @function participants\n   * @memberof Twilio.Video.V1.RoomContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext}\n   */\n  /* jshint ignore:end */\n  function ParticipantListInstance(sid) {\n    return ParticipantListInstance.get(sid);\n  }\n\n  ParticipantListInstance._version = version;\n  // Path Solution\n  ParticipantListInstance._solution = {roomSid: roomSid};\n  ParticipantListInstance._uri = _.template(\n    '/Rooms/<%= roomSid %>/Participants' // jshint ignore:line\n  )(ParticipantListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams ParticipantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {participant.status} [opts.status] -\n   *          Only show Participants with the given Status.\n   * @param {string} [opts.identity] -\n   *          Only show Participants that connected to the Room using the provided Identity.\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only show Participants that started after this date, given as an UTC ISO 8601 Timestamp.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only show Participants that started before this date, given as an UTC ISO 8601 Timestamp.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ParticipantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {participant.status} [opts.status] -\n   *          Only show Participants with the given Status.\n   * @param {string} [opts.identity] -\n   *          Only show Participants that connected to the Room using the provided Identity.\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only show Participants that started after this date, given as an UTC ISO 8601 Timestamp.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only show Participants that started before this date, given as an UTC ISO 8601 Timestamp.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {participant.status} [opts.status] -\n   *          Only show Participants with the given Status.\n   * @param {string} [opts.identity] -\n   *          Only show Participants that connected to the Room using the provided Identity.\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only show Participants that started after this date, given as an UTC ISO 8601 Timestamp.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only show Participants that started before this date, given as an UTC ISO 8601 Timestamp.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'Identity': _.get(opts, 'identity'),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a participant\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.Video.V1.RoomContext.ParticipantContext}\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.get = function get(sid) {\n    return new ParticipantContext(this._version, this._solution.roomSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomContext.ParticipantList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ParticipantListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ParticipantListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantPage\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ParticipantSolution} solution - Path solution\n *\n * @returns ParticipantPage\n */\n/* jshint ignore:end */\nParticipantPage = function ParticipantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ParticipantPage.prototype, Page.prototype);\nParticipantPage.prototype.constructor = ParticipantPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ParticipantInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomContext.ParticipantPage#\n *\n * @param {ParticipantPayload} payload - Payload response from the API\n *\n * @returns ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantPage.prototype.getInstance = function getInstance(payload) {\n  return new ParticipantInstance(this._version, payload, this._solution.roomSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nParticipantPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantInstance\n *\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} roomSid -\n *          A system-generated 34-character string that uniquely identifies.\n * @property {string} accountSid -\n *          The unique ID of the Account associated with this Room.\n * @property {participant.status} status -\n *          A string representing the status of the Participant.\n * @property {string} identity -\n *          The unique name identifier that is assigned to this Participant.\n * @property {Date} dateCreated -\n *          The date that this resource was created, given as a UTC ISO 8601 Timestamp.\n * @property {Date} dateUpdated -\n *          The date that this resource was last updated, given as a UTC ISO 8601 Timestamp.\n * @property {Date} startTime -\n *          The time of Participant connected to the Room, given as a UTC ISO 8601 Timestamp.\n * @property {Date} endTime -\n *          The time of Participant disconnected from the Room, given as a UTC ISO 8601 Timestamp.\n * @property {number} duration -\n *          Duration of time in seconds this Participant was connected.\n * @property {string} url - The absolute URL for this resource.\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {ParticipantPayload} payload - The instance payload\n * @param {sid} roomSid -\n *          A system-generated 34-character string that uniquely identifies.\n * @param {sid_like} sid - The sid\n */\n/* jshint ignore:end */\nParticipantInstance = function ParticipantInstance(version, payload, roomSid,\n                                                    sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.roomSid = payload.room_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.startTime = deserialize.iso8601DateTime(payload.start_time); // jshint ignore:line\n  this.endTime = deserialize.iso8601DateTime(payload.end_time); // jshint ignore:line\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {roomSid: roomSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(ParticipantInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new ParticipantContext(this._version, this._solution.roomSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {participant.status} [opts.status] -\n *          Set to disconnected to remove participant.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the publishedTracks\n *\n * @function publishedTracks\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList}\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.publishedTracks = function publishedTracks() {\n  return this._proxy.publishedTracks;\n};\n\n/* jshint ignore:start */\n/**\n * Access the subscribedTracks\n *\n * @function subscribedTracks\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList}\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.subscribedTracks = function subscribedTracks() {\n  return this._proxy.subscribedTracks;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nParticipantInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantContext\n *\n * @constructor Twilio.Video.V1.RoomContext.ParticipantContext\n *\n * @property {Twilio.Video.V1.RoomContext.ParticipantContext.PublishedTrackList} publishedTracks -\n *          publishedTracks resource\n * @property {Twilio.Video.V1.RoomContext.ParticipantContext.SubscribedTrackList} subscribedTracks -\n *          subscribedTracks resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} roomSid - The room_sid\n * @param {sid_like} sid - The sid\n */\n/* jshint ignore:end */\nParticipantContext = function ParticipantContext(version, roomSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {roomSid: roomSid, sid: sid, };\n  this._uri = _.template(\n    '/Rooms/<%= roomSid %>/Participants/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._publishedTracks = undefined;\n  this._subscribedTracks = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ParticipantInstance(\n      this._version,\n      payload,\n      this._solution.roomSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ParticipantInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {participant.status} [opts.status] -\n *          Set to disconnected to remove participant.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'Status': _.get(opts, 'status')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ParticipantInstance(\n      this._version,\n      payload,\n      this._solution.roomSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ParticipantContext.prototype,\n  'publishedTracks', {\n  get: function() {\n    if (!this._publishedTracks) {\n      this._publishedTracks = new PublishedTrackList(\n        this._version,\n        this._solution.roomSid,\n        this._solution.sid\n      );\n    }\n    return this._publishedTracks;\n  }\n});\n\nObject.defineProperty(ParticipantContext.prototype,\n  'subscribedTracks', {\n  get: function() {\n    if (!this._subscribedTracks) {\n      this._subscribedTracks = new SubscribedTrackList(\n        this._version,\n        this._solution.roomSid,\n        this._solution.sid\n      );\n    }\n    return this._subscribedTracks;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.ParticipantContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nParticipantContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ParticipantList: ParticipantList,\n  ParticipantPage: ParticipantPage,\n  ParticipantInstance: ParticipantInstance,\n  ParticipantContext: ParticipantContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}