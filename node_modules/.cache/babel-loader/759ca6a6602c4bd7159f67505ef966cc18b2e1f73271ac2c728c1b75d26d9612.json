{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar RestException = require('./RestException');\n\n/**\n * @constructor\n *\n * @description Base version object\n *\n * @param {Domain} domain twilio domain\n * @param {Version} version api version\n */\nfunction Version(domain, version) {\n  this._domain = domain;\n  this._version = version;\n}\n\n/**\n * Generate absolute url from a uri\n *\n * @param  {string} uri uri to transform\n * @return {string} transformed url\n */\nVersion.prototype.absoluteUrl = function (uri) {\n  return this._domain.absoluteUrl(this.relativeUrl(uri));\n};\n\n/**\n * Generate relative url from a uri\n *\n * @param  {string} uri uri to transform\n * @return {string} transformed url\n */\nVersion.prototype.relativeUrl = function (uri) {\n  return _.trim(this._version, '/') + '/' + _.trim(uri, '/');\n};\n\n/**\n * Make a request against the domain\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to request response\n */\nVersion.prototype.request = function (opts) {\n  return this._domain.request(_.assign({}, opts, {\n    uri: this.relativeUrl(opts.uri)\n  }));\n};\n\n/**\n * Fetch a instance of a record\n * @throws {Error} If response returns non 2xx status code\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to fetched result\n */\nVersion.prototype.fetch = function (opts) {\n  var qResponse = this.request(opts);\n  qResponse = qResponse.then(function success(response) {\n    if (response.statusCode < 200 || response.statusCode >= 300) {\n      throw new RestException(response);\n    }\n    return JSON.parse(response.body);\n  });\n  return qResponse;\n};\n\n/**\n * Update a record\n * @throws {Error} If response returns non 2xx status code\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to updated result\n */\nVersion.prototype.update = function (opts) {\n  var qResponse = this.request(opts);\n  qResponse = qResponse.then(function success(response) {\n    if (response.statusCode < 200 || response.statusCode >= 300) {\n      throw new RestException(response);\n    }\n    return JSON.parse(response.body);\n  });\n  return qResponse;\n};\n\n/**\n * Delete a record\n * @throws {Error} If response returns a 5xx status\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to true if record was deleted\n */\nVersion.prototype.remove = function (opts) {\n  var qResponse = this.request(opts);\n  qResponse = qResponse.then(function success(response) {\n    if (response.statusCode < 200 || response.statusCode >= 300) {\n      throw new RestException(response);\n    }\n    return response.statusCode === 204;\n  });\n  return qResponse;\n};\n\n/**\n * Create a new record\n * @throws {Error} If response returns non 2xx or 201 status code\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to created record\n */\nVersion.prototype.create = function (opts) {\n  var qResponse = this.request(opts);\n  qResponse = qResponse.then(function success(response) {\n    if (response.statusCode < 200 || response.statusCode >= 300) {\n      throw new RestException(response);\n    }\n    return JSON.parse(response.body);\n  });\n  return qResponse;\n};\n\n/**\n * Fetch a page of records\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to page of records\n */\nVersion.prototype.page = function (opts) {\n  return this.request(opts);\n};\n\n/**\n * Process limits for list requests\n *\n * @param {object} [opts] ...\n * @param {number} [opts.limit] The maximum number of items to fetch\n * @param {number} [opts.pageSize] The maximum number of items to return\n *                                  with every request\n */\nVersion.prototype.readLimits = function (opts) {\n  var limit = opts.limit;\n  var pageLimit;\n  var pageSize = opts.pageSize;\n  if (!_.isNil(limit) && (!_.isFinite(limit) || limit <= 0)) {\n    throw new TypeError('Parameter limit must be a positive integer');\n  }\n  if (!_.isNil(pageSize) && (!_.isFinite(pageSize) || pageSize <= 0)) {\n    throw new TypeError('Parameter pageSize must be a positive integer');\n  }\n  if (limit) {\n    if (!pageSize) {\n      pageSize = limit;\n    }\n    pageLimit = parseInt(Math.ceil(limit / parseFloat(pageSize)), 10);\n  }\n  return {\n    limit: limit,\n    pageSize: pageSize,\n    pageLimit: pageLimit\n  };\n};\nmodule.exports = Version;","map":{"version":3,"names":["_","require","RestException","Version","domain","version","_domain","_version","prototype","absoluteUrl","uri","relativeUrl","trim","request","opts","assign","fetch","qResponse","then","success","response","statusCode","JSON","parse","body","update","remove","create","page","readLimits","limit","pageLimit","pageSize","isNil","isFinite","TypeError","parseInt","Math","ceil","parseFloat","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/base/Version.js"],"sourcesContent":["'use strict';\nvar _ = require('lodash');\nvar RestException = require('./RestException');\n\n/**\n * @constructor\n *\n * @description Base version object\n *\n * @param {Domain} domain twilio domain\n * @param {Version} version api version\n */\nfunction Version(domain, version) {\n  this._domain = domain;\n  this._version = version;\n}\n\n/**\n * Generate absolute url from a uri\n *\n * @param  {string} uri uri to transform\n * @return {string} transformed url\n */\nVersion.prototype.absoluteUrl = function(uri) {\n  return this._domain.absoluteUrl(this.relativeUrl(uri));\n};\n\n/**\n * Generate relative url from a uri\n *\n * @param  {string} uri uri to transform\n * @return {string} transformed url\n */\nVersion.prototype.relativeUrl = function(uri) {\n  return _.trim(this._version, '/') + '/' + _.trim(uri, '/');\n};\n\n/**\n * Make a request against the domain\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to request response\n */\nVersion.prototype.request = function(opts) {\n  return this._domain.request(_.assign({}, opts, {\n    uri: this.relativeUrl(opts.uri),\n  }));\n};\n\n/**\n * Fetch a instance of a record\n * @throws {Error} If response returns non 2xx status code\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to fetched result\n */\nVersion.prototype.fetch = function(opts) {\n  var qResponse = this.request(opts);\n\n  qResponse = qResponse.then(\n    function success(response) {\n      if (response.statusCode < 200 || response.statusCode >= 300) {\n        throw new RestException(response);\n      }\n\n      return JSON.parse(response.body);\n    }\n  );\n\n  return qResponse;\n};\n\n/**\n * Update a record\n * @throws {Error} If response returns non 2xx status code\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to updated result\n */\nVersion.prototype.update = function(opts) {\n  var qResponse = this.request(opts);\n  qResponse = qResponse.then(\n    function success(response) {\n      if (response.statusCode < 200 || response.statusCode >= 300) {\n        throw new RestException(response);\n      }\n\n      return JSON.parse(response.body);\n    }\n  );\n\n  return qResponse;\n};\n\n/**\n * Delete a record\n * @throws {Error} If response returns a 5xx status\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to true if record was deleted\n */\nVersion.prototype.remove = function(opts) {\n  var qResponse = this.request(opts);\n  qResponse = qResponse.then(\n    function success(response) {\n      if (response.statusCode < 200 || response.statusCode >= 300) {\n        throw new RestException(response);\n      }\n\n      return response.statusCode === 204;\n    }\n  );\n\n  return qResponse;\n};\n\n/**\n * Create a new record\n * @throws {Error} If response returns non 2xx or 201 status code\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to created record\n */\nVersion.prototype.create = function(opts) {\n  var qResponse = this.request(opts);\n  qResponse = qResponse.then(\n    function success(response) {\n      if (response.statusCode < 200 || response.statusCode >= 300) {\n        throw new RestException(response);\n      }\n\n      return JSON.parse(response.body);\n    }\n  );\n\n  return qResponse;\n};\n\n/**\n * Fetch a page of records\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to page of records\n */\nVersion.prototype.page = function(opts) {\n  return this.request(opts);\n};\n\n/**\n * Process limits for list requests\n *\n * @param {object} [opts] ...\n * @param {number} [opts.limit] The maximum number of items to fetch\n * @param {number} [opts.pageSize] The maximum number of items to return\n *                                  with every request\n */\nVersion.prototype.readLimits = function(opts) {\n  var limit = opts.limit;\n  var pageLimit;\n  var pageSize = opts.pageSize;\n  if (!_.isNil(limit) && (!_.isFinite(limit) || limit <= 0)) {\n    throw new TypeError('Parameter limit must be a positive integer');\n  }\n\n  if (!_.isNil(pageSize) && (!_.isFinite(pageSize) || pageSize <= 0)) {\n    throw new TypeError('Parameter pageSize must be a positive integer');\n  }\n\n  if (limit) {\n    if (!pageSize) {\n      pageSize = limit;\n    }\n\n    pageLimit = parseInt(Math.ceil(limit / parseFloat(pageSize)), 10);\n  }\n\n  return {\n    limit: limit,\n    pageSize: pageSize,\n    pageLimit: pageLimit,\n  };\n};\n\nmodule.exports = Version;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}