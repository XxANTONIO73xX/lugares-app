{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar EventList;\nvar EventPage;\nvar EventInstance;\nvar EventContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the EventList\n *\n * @constructor Twilio.Monitor.V1.EventList\n *\n * @param {Twilio.Monitor.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nEventList = function EventList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function events\n   * @memberof Twilio.Monitor.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Monitor.V1.EventContext}\n   */\n  /* jshint ignore:end */\n  function EventListInstance(sid) {\n    return EventListInstance.get(sid);\n  }\n  EventListInstance._version = version;\n  // Path Solution\n  EventListInstance._solution = {};\n  EventListInstance._uri = _.template('/Events' // jshint ignore:line\n  )(EventListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams EventInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.actorSid] - Only include Events initiated by this Actor\n   * @param {string} [opts.eventType] - Only include Events of this EventType\n   * @param {string} [opts.resourceSid] -\n   *          Only include Events referring to this resource\n   * @param {string} [opts.sourceIpAddress] -\n   *          Only include Events that originated from this IP address\n   * @param {Date} [opts.startDate] - Only show events on or after this date\n   * @param {Date} [opts.endDate] - Only show events on or before this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  EventListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists EventInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.actorSid] - Only include Events initiated by this Actor\n   * @param {string} [opts.eventType] - Only include Events of this EventType\n   * @param {string} [opts.resourceSid] -\n   *          Only include Events referring to this resource\n   * @param {string} [opts.sourceIpAddress] -\n   *          Only include Events that originated from this IP address\n   * @param {Date} [opts.startDate] - Only show events on or after this date\n   * @param {Date} [opts.endDate] - Only show events on or before this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EventListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of EventInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.actorSid] - Only include Events initiated by this Actor\n   * @param {string} [opts.eventType] - Only include Events of this EventType\n   * @param {string} [opts.resourceSid] -\n   *          Only include Events referring to this resource\n   * @param {string} [opts.sourceIpAddress] -\n   *          Only include Events that originated from this IP address\n   * @param {Date} [opts.startDate] - Only show events on or after this date\n   * @param {Date} [opts.endDate] - Only show events on or before this date\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EventListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'ActorSid': _.get(opts, 'actorSid'),\n      'EventType': _.get(opts, 'eventType'),\n      'ResourceSid': _.get(opts, 'resourceSid'),\n      'SourceIpAddress': _.get(opts, 'sourceIpAddress'),\n      'StartDate': serialize.iso8601DateTime(_.get(opts, 'startDate')),\n      'EndDate': serialize.iso8601DateTime(_.get(opts, 'endDate')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EventPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of EventInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EventListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EventPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a event\n   *\n   * @function get\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {string} sid - A 34 character string that uniquely identifies this event.\n   *\n   * @returns {Twilio.Monitor.V1.EventContext}\n   */\n  /* jshint ignore:end */\n  EventListInstance.get = function get(sid) {\n    return new EventContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  EventListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  EventListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return EventListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the EventPage\n *\n * @constructor Twilio.Monitor.V1.EventPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {EventSolution} solution - Path solution\n *\n * @returns EventPage\n */\n/* jshint ignore:end */\nEventPage = function EventPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(EventPage.prototype, Page.prototype);\nEventPage.prototype.constructor = EventPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of EventInstance\n *\n * @function getInstance\n * @memberof Twilio.Monitor.V1.EventPage#\n *\n * @param {EventPayload} payload - Payload response from the API\n *\n * @returns EventInstance\n */\n/* jshint ignore:end */\nEventPage.prototype.getInstance = function getInstance(payload) {\n  return new EventInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Monitor.V1.EventPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEventPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nEventPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the EventContext\n *\n * @constructor Twilio.Monitor.V1.EventInstance\n *\n * @property {string} accountSid -\n *          A 34 character string identifying the Account for which this Event was recorded.\n * @property {string} actorSid -\n *          If available, a 34 character string identifying the actor that caused this event. May be null.\n * @property {string} actorType - The type of actor that caused this event\n * @property {string} description -\n *          A human-readable description of the event.  May be null.\n * @property {string} eventData -\n *          A freeform json object encoding additional data about the event\n * @property {Date} eventDate - The date-time the event was recorded\n * @property {string} eventType - The event's type, as a string.\n * @property {string} resourceSid -\n *          A 34 character string identifying the resource that was affected.\n * @property {string} resourceType - The type of resource that was affected\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this event.\n * @property {string} source -\n *          The originating system or interface that caused the event.  web for events caused by user action in the Twilio Console.  api for events caused through a request to the REST API.  twilio for events caused by an automated or internal Twilio system.\n * @property {string} sourceIpAddress - The IP address of the source\n * @property {string} url - The url\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {EventPayload} payload - The instance payload\n * @param {sid} sid - A 34 character string that uniquely identifies this event.\n */\n/* jshint ignore:end */\nEventInstance = function EventInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.actorSid = payload.actor_sid; // jshint ignore:line\n  this.actorType = payload.actor_type; // jshint ignore:line\n  this.description = payload.description; // jshint ignore:line\n  this.eventData = payload.event_data; // jshint ignore:line\n  this.eventDate = deserialize.iso8601DateTime(payload.event_date); // jshint ignore:line\n  this.eventType = payload.event_type; // jshint ignore:line\n  this.resourceSid = payload.resource_sid; // jshint ignore:line\n  this.resourceType = payload.resource_type; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.source = payload.source; // jshint ignore:line\n  this.sourceIpAddress = payload.source_ip_address; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(EventInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new EventContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a EventInstance\n *\n * @function fetch\n * @memberof Twilio.Monitor.V1.EventInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EventInstance\n */\n/* jshint ignore:end */\nEventInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Monitor.V1.EventInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEventInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nEventInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the EventContext\n *\n * @constructor Twilio.Monitor.V1.EventContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - A 34 character string that uniquely identifies this event.\n */\n/* jshint ignore:end */\nEventContext = function EventContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = _.template('/Events/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a EventInstance\n *\n * @function fetch\n * @memberof Twilio.Monitor.V1.EventContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EventInstance\n */\n/* jshint ignore:end */\nEventContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new EventInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Monitor.V1.EventContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEventContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nEventContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  EventList: EventList,\n  EventPage: EventPage,\n  EventInstance: EventInstance,\n  EventContext: EventContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","EventList","EventPage","EventInstance","EventContext","version","EventListInstance","sid","get","_version","_solution","_uri","template","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601DateTime","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","actorSid","actor_sid","actorType","actor_type","description","eventData","event_data","eventDate","event_date","eventType","event_type","resourceSid","resource_sid","resourceType","resource_type","source","sourceIpAddress","source_ip_address","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/monitor/v1/event.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar EventList;\nvar EventPage;\nvar EventInstance;\nvar EventContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the EventList\n *\n * @constructor Twilio.Monitor.V1.EventList\n *\n * @param {Twilio.Monitor.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nEventList = function EventList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function events\n   * @memberof Twilio.Monitor.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Monitor.V1.EventContext}\n   */\n  /* jshint ignore:end */\n  function EventListInstance(sid) {\n    return EventListInstance.get(sid);\n  }\n\n  EventListInstance._version = version;\n  // Path Solution\n  EventListInstance._solution = {};\n  EventListInstance._uri = _.template(\n    '/Events' // jshint ignore:line\n  )(EventListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams EventInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.actorSid] - Only include Events initiated by this Actor\n   * @param {string} [opts.eventType] - Only include Events of this EventType\n   * @param {string} [opts.resourceSid] -\n   *          Only include Events referring to this resource\n   * @param {string} [opts.sourceIpAddress] -\n   *          Only include Events that originated from this IP address\n   * @param {Date} [opts.startDate] - Only show events on or after this date\n   * @param {Date} [opts.endDate] - Only show events on or before this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  EventListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists EventInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.actorSid] - Only include Events initiated by this Actor\n   * @param {string} [opts.eventType] - Only include Events of this EventType\n   * @param {string} [opts.resourceSid] -\n   *          Only include Events referring to this resource\n   * @param {string} [opts.sourceIpAddress] -\n   *          Only include Events that originated from this IP address\n   * @param {Date} [opts.startDate] - Only show events on or after this date\n   * @param {Date} [opts.endDate] - Only show events on or before this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EventListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of EventInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.actorSid] - Only include Events initiated by this Actor\n   * @param {string} [opts.eventType] - Only include Events of this EventType\n   * @param {string} [opts.resourceSid] -\n   *          Only include Events referring to this resource\n   * @param {string} [opts.sourceIpAddress] -\n   *          Only include Events that originated from this IP address\n   * @param {Date} [opts.startDate] - Only show events on or after this date\n   * @param {Date} [opts.endDate] - Only show events on or before this date\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EventListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'ActorSid': _.get(opts, 'actorSid'),\n      'EventType': _.get(opts, 'eventType'),\n      'ResourceSid': _.get(opts, 'resourceSid'),\n      'SourceIpAddress': _.get(opts, 'sourceIpAddress'),\n      'StartDate': serialize.iso8601DateTime(_.get(opts, 'startDate')),\n      'EndDate': serialize.iso8601DateTime(_.get(opts, 'endDate')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EventPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of EventInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EventListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EventPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a event\n   *\n   * @function get\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {string} sid - A 34 character string that uniquely identifies this event.\n   *\n   * @returns {Twilio.Monitor.V1.EventContext}\n   */\n  /* jshint ignore:end */\n  EventListInstance.get = function get(sid) {\n    return new EventContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  EventListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  EventListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return EventListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EventPage\n *\n * @constructor Twilio.Monitor.V1.EventPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {EventSolution} solution - Path solution\n *\n * @returns EventPage\n */\n/* jshint ignore:end */\nEventPage = function EventPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(EventPage.prototype, Page.prototype);\nEventPage.prototype.constructor = EventPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of EventInstance\n *\n * @function getInstance\n * @memberof Twilio.Monitor.V1.EventPage#\n *\n * @param {EventPayload} payload - Payload response from the API\n *\n * @returns EventInstance\n */\n/* jshint ignore:end */\nEventPage.prototype.getInstance = function getInstance(payload) {\n  return new EventInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Monitor.V1.EventPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEventPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nEventPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EventContext\n *\n * @constructor Twilio.Monitor.V1.EventInstance\n *\n * @property {string} accountSid -\n *          A 34 character string identifying the Account for which this Event was recorded.\n * @property {string} actorSid -\n *          If available, a 34 character string identifying the actor that caused this event. May be null.\n * @property {string} actorType - The type of actor that caused this event\n * @property {string} description -\n *          A human-readable description of the event.  May be null.\n * @property {string} eventData -\n *          A freeform json object encoding additional data about the event\n * @property {Date} eventDate - The date-time the event was recorded\n * @property {string} eventType - The event's type, as a string.\n * @property {string} resourceSid -\n *          A 34 character string identifying the resource that was affected.\n * @property {string} resourceType - The type of resource that was affected\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this event.\n * @property {string} source -\n *          The originating system or interface that caused the event.  web for events caused by user action in the Twilio Console.  api for events caused through a request to the REST API.  twilio for events caused by an automated or internal Twilio system.\n * @property {string} sourceIpAddress - The IP address of the source\n * @property {string} url - The url\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {EventPayload} payload - The instance payload\n * @param {sid} sid - A 34 character string that uniquely identifies this event.\n */\n/* jshint ignore:end */\nEventInstance = function EventInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.actorSid = payload.actor_sid; // jshint ignore:line\n  this.actorType = payload.actor_type; // jshint ignore:line\n  this.description = payload.description; // jshint ignore:line\n  this.eventData = payload.event_data; // jshint ignore:line\n  this.eventDate = deserialize.iso8601DateTime(payload.event_date); // jshint ignore:line\n  this.eventType = payload.event_type; // jshint ignore:line\n  this.resourceSid = payload.resource_sid; // jshint ignore:line\n  this.resourceType = payload.resource_type; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.source = payload.source; // jshint ignore:line\n  this.sourceIpAddress = payload.source_ip_address; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(EventInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new EventContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a EventInstance\n *\n * @function fetch\n * @memberof Twilio.Monitor.V1.EventInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EventInstance\n */\n/* jshint ignore:end */\nEventInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Monitor.V1.EventInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEventInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nEventInstance.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EventContext\n *\n * @constructor Twilio.Monitor.V1.EventContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - A 34 character string that uniquely identifies this event.\n */\n/* jshint ignore:end */\nEventContext = function EventContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = _.template(\n    '/Events/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a EventInstance\n *\n * @function fetch\n * @memberof Twilio.Monitor.V1.EventContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EventInstance\n */\n/* jshint ignore:end */\nEventContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new EventInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Monitor.V1.EventContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEventContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nEventContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  EventList: EventList,\n  EventPage: EventPage,\n  EventInstance: EventInstance,\n  EventContext: EventContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}