{"ast":null,"code":"'use strict';\n\nvar jwt = require('jsonwebtoken');\nvar _ = require('lodash');\n\n/**\n * Create a new Policy\n *\n * @constructor\n * @param {object} options - ...\n * @param {string} [options.url] - Policy URL\n * @param {string} [options.method] - HTTP Method\n * @param {object} [options.queryFilter] - Request query filter allowances\n * @param {object} [options.postFilter] - Request post filter allowances\n * @param {boolean} [options.allowed] - Allow the policy\n */\nfunction Policy(options) {\n  options = options || {};\n  this.url = options.url;\n  this.method = options.method || 'GET';\n  this.queryFilter = options.queryFilter || {};\n  this.postFilter = options.postFilter || {};\n  this.allow = options.allow || true;\n}\n_.extend(Policy.prototype, {\n  payload: function () {\n    return {\n      url: this.url,\n      method: this.method,\n      query_filter: this.queryFilter,\n      post_filter: this.postFilter,\n      allow: this.allow\n    };\n  }\n});\n\n/**\n * @constructor\n * @param {object} options - ...\n * @param {string} options.accountSid - account sid\n * @param {string} options.authToken - auth token\n * @param {string} options.workspaceSid - workspace sid\n * @param {string} options.channelId - taskrouter channel id\n * @param {string} [options.friendlyName] - friendly name for the jwt\n * @param {number} [options.ttl] - time to live\n * @param {string} [options.version] - taskrouter version\n */\nfunction TaskRouterCapability(options) {\n  if (_.isUndefined(options)) {\n    throw new Error('Required parameter \"options\" missing.');\n  }\n  if (_.isUndefined(options.accountSid)) {\n    throw new Error('Required parameter \"options.accountSid\" missing.');\n  }\n  if (_.isUndefined(options.authToken)) {\n    throw new Error('Required parameter \"options.authToken\" missing.');\n  }\n  if (_.isUndefined(options.workspaceSid)) {\n    throw new Error('Required parameter \"options.workspaceSid\" missing.');\n  }\n  if (_.isUndefined(options.channelId)) {\n    throw new Error('Required parameter \"options.channelId\" missing.');\n  }\n  this.accountSid = options.accountSid;\n  this.authToken = options.authToken;\n  this.workspaceSid = options.workspaceSid;\n  this.channelId = options.channelId;\n  this.friendlyName = options.friendlyName;\n  this.ttl = options.ttl || 3600;\n  this.version = options.version || 'v1';\n  this.policies = [];\n}\nTaskRouterCapability.Policy = Policy;\n_.extend(TaskRouterCapability.prototype, {\n  addPolicy: function (policy) {\n    this.policies.push(policy);\n  },\n  toJwt: function () {\n    var payload = {\n      iss: this.accountSid,\n      exp: Math.floor(new Date() / 1000) + this.ttl,\n      version: this.version,\n      friendly_name: this.friendlyName,\n      account_sid: this.accountSid,\n      channel: this.channelId,\n      workspace_sid: this.workspaceSid,\n      policies: _.map(this.policies, function (policy) {\n        return policy.payload();\n      })\n    };\n    if (_.startsWith(this.channelId, 'WK')) {\n      payload.worker_sid = this.channelId;\n    } else if (_.startsWith(this.channelId, 'WQ')) {\n      payload.taskqueue_sid = this.channelId;\n    }\n    return jwt.sign(payload, this.authToken);\n  }\n});\nmodule.exports = TaskRouterCapability;","map":{"version":3,"names":["jwt","require","_","Policy","options","url","method","queryFilter","postFilter","allow","extend","prototype","payload","query_filter","post_filter","TaskRouterCapability","isUndefined","Error","accountSid","authToken","workspaceSid","channelId","friendlyName","ttl","version","policies","addPolicy","policy","push","toJwt","iss","exp","Math","floor","Date","friendly_name","account_sid","channel","workspace_sid","map","startsWith","worker_sid","taskqueue_sid","sign","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/jwt/taskrouter/TaskRouterCapability.js"],"sourcesContent":["'use strict';\n\nvar jwt = require('jsonwebtoken');\nvar _ = require('lodash');\n\n/**\n * Create a new Policy\n *\n * @constructor\n * @param {object} options - ...\n * @param {string} [options.url] - Policy URL\n * @param {string} [options.method] - HTTP Method\n * @param {object} [options.queryFilter] - Request query filter allowances\n * @param {object} [options.postFilter] - Request post filter allowances\n * @param {boolean} [options.allowed] - Allow the policy\n */\nfunction Policy(options) {\n  options = options || {};\n  this.url = options.url;\n  this.method = options.method || 'GET';\n  this.queryFilter = options.queryFilter || {};\n  this.postFilter = options.postFilter || {};\n  this.allow = options.allow || true;\n}\n\n_.extend(Policy.prototype, {\n  payload: function() {\n    return {\n      url: this.url,\n      method: this.method,\n      query_filter: this.queryFilter,\n      post_filter: this.postFilter,\n      allow: this.allow\n    };\n  }\n});\n\n/**\n * @constructor\n * @param {object} options - ...\n * @param {string} options.accountSid - account sid\n * @param {string} options.authToken - auth token\n * @param {string} options.workspaceSid - workspace sid\n * @param {string} options.channelId - taskrouter channel id\n * @param {string} [options.friendlyName] - friendly name for the jwt\n * @param {number} [options.ttl] - time to live\n * @param {string} [options.version] - taskrouter version\n */\nfunction TaskRouterCapability(options) {\n  if (_.isUndefined(options)) {\n    throw new Error('Required parameter \"options\" missing.');\n  }\n  if (_.isUndefined(options.accountSid)) {\n    throw new Error('Required parameter \"options.accountSid\" missing.');\n  }\n  if (_.isUndefined(options.authToken)) {\n    throw new Error('Required parameter \"options.authToken\" missing.');\n  }\n  if (_.isUndefined(options.workspaceSid)) {\n    throw new Error('Required parameter \"options.workspaceSid\" missing.');\n  }\n  if (_.isUndefined(options.channelId)) {\n    throw new Error('Required parameter \"options.channelId\" missing.');\n  }\n\n  this.accountSid = options.accountSid;\n  this.authToken = options.authToken;\n  this.workspaceSid = options.workspaceSid;\n  this.channelId = options.channelId;\n  this.friendlyName = options.friendlyName;\n  this.ttl = options.ttl || 3600;\n  this.version = options.version || 'v1';\n  this.policies = [];\n}\n\nTaskRouterCapability.Policy = Policy;\n\n_.extend(TaskRouterCapability.prototype, {\n  addPolicy: function(policy) {\n    this.policies.push(policy);\n  },\n\n  toJwt: function() {\n    var payload = {\n      iss: this.accountSid,\n      exp: (Math.floor(new Date() / 1000)) + this.ttl,\n      version: this.version,\n      friendly_name: this.friendlyName,\n      account_sid: this.accountSid,\n      channel: this.channelId,\n      workspace_sid: this.workspaceSid,\n      policies: _.map(this.policies, function(policy) {\n        return policy.payload();\n      })\n    };\n\n    if (_.startsWith(this.channelId, 'WK')) {\n      payload.worker_sid = this.channelId;\n    } else if (_.startsWith(this.channelId, 'WQ')) {\n      payload.taskqueue_sid = this.channelId;\n    }\n\n    return jwt.sign(payload, this.authToken);\n  }\n});\n\nmodule.exports = TaskRouterCapability;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}