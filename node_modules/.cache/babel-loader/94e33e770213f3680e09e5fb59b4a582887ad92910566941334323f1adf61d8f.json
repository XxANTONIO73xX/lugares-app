{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../base/Page'); /* jshint ignore:line */\nvar ParticipantList = require('./room/roomParticipant').ParticipantList;\nvar RoomRecordingList = require('./room/recording').RoomRecordingList;\nvar deserialize = require('../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../base/values'); /* jshint ignore:line */\n\nvar RoomList;\nvar RoomPage;\nvar RoomInstance;\nvar RoomContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomList\n *\n * @constructor Twilio.Video.V1.RoomList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nRoomList = function RoomList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function rooms\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext}\n   */\n  /* jshint ignore:end */\n  function RoomListInstance(sid) {\n    return RoomListInstance.get(sid);\n  }\n  RoomListInstance._version = version;\n  // Path Solution\n  RoomListInstance._solution = {};\n  RoomListInstance._uri = _.template('/Rooms' // jshint ignore:line\n  )(RoomListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a RoomInstance\n   *\n   * @function create\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.enableTurn] -\n   *          Use Twilio Network Traversal for TURN service.\n   * @param {room.room_type} [opts.type] -\n   *          Type of room, either peer-to-peer, group-small or group.\n   * @param {string} [opts.uniqueName] - Name of the Room.\n   * @param {string} [opts.statusCallback] -\n   *          A URL that Twilio sends asynchronous webhook requests to on every room event.\n   * @param {string} [opts.statusCallbackMethod] -\n   *          HTTP method Twilio should use when requesting the above URL.\n   * @param {number} [opts.maxParticipants] -\n   *          Maximum number of Participants in the Room.\n   * @param {boolean} [opts.recordParticipantsOnConnect] -\n   *          Start Participant recording when connected.\n   * @param {room.video_codec|list} [opts.videoCodecs] -\n   *          An array of video codecs supported when publishing a Track in the Room.\n   * @param {string} [opts.mediaRegion] - Region for the media server in Group Rooms.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed RoomInstance\n   */\n  /* jshint ignore:end */\n  RoomListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'EnableTurn': serialize.bool(_.get(opts, 'enableTurn')),\n      'Type': _.get(opts, 'type'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'MaxParticipants': _.get(opts, 'maxParticipants'),\n      'RecordParticipantsOnConnect': serialize.bool(_.get(opts, 'recordParticipantsOnConnect')),\n      'VideoCodecs': serialize.map(_.get(opts, 'videoCodecs'), function (e) {\n        return e;\n      }),\n      'MediaRegion': _.get(opts, 'mediaRegion')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams RoomInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Only show Rooms with the given status.\n   * @param {string} [opts.uniqueName] - Only show Rooms with the provided Name.\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only show Rooms that started on or after this date, given as YYYY-MM-DD.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only show Rooms that started before this date, given as YYYY-MM-DD.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  RoomListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists RoomInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Only show Rooms with the given status.\n   * @param {string} [opts.uniqueName] - Only show Rooms with the provided Name.\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only show Rooms that started on or after this date, given as YYYY-MM-DD.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only show Rooms that started before this date, given as YYYY-MM-DD.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Only show Rooms with the given status.\n   * @param {string} [opts.uniqueName] - Only show Rooms with the provided Name.\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only show Rooms that started on or after this date, given as YYYY-MM-DD.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only show Rooms that started before this date, given as YYYY-MM-DD.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a room\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {string} sid -\n   *          The Room Sid or name that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Video.V1.RoomContext}\n   */\n  /* jshint ignore:end */\n  RoomListInstance.get = function get(sid) {\n    return new RoomContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  RoomListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  RoomListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return RoomListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomPage\n *\n * @constructor Twilio.Video.V1.RoomPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {RoomSolution} solution - Path solution\n *\n * @returns RoomPage\n */\n/* jshint ignore:end */\nRoomPage = function RoomPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(RoomPage.prototype, Page.prototype);\nRoomPage.prototype.constructor = RoomPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of RoomInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomPage#\n *\n * @param {RoomPayload} payload - Payload response from the API\n *\n * @returns RoomInstance\n */\n/* jshint ignore:end */\nRoomPage.prototype.getInstance = function getInstance(payload) {\n  return new RoomInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nRoomPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomContext\n *\n * @constructor Twilio.Video.V1.RoomInstance\n *\n * @property {string} sid -\n *          A system-generated 34-character string that uniquely identifies this resource.\n * @property {room.room_status} status -\n *          A string representing the status of the Room.\n * @property {Date} dateCreated -\n *          The date that this resource was created, given as a UTC ISO 8601 Timestamp.\n * @property {Date} dateUpdated -\n *          The date that this resource was last updated, given as a UTC ISO 8601 Timestamp.\n * @property {string} accountSid -\n *          The unique ID of the Account associated with this Room.\n * @property {boolean} enableTurn - Enable Twilio's Network Traversal TURN service.\n * @property {string} uniqueName - A developer-supplied Name of the Room.\n * @property {string} statusCallback -\n *          A URL that Twilio sends asynchronous webhook requests to on every Room event.\n * @property {string} statusCallbackMethod -\n *          HTTP method Twilio should use when requesting the above URL.\n * @property {Date} endTime -\n *          The end time of the Room, given as a UTC ISO 8601 Timestamp.\n * @property {number} duration - The duration of the Room in seconds.\n * @property {room.room_type} type -\n *          Type of Room, either peer-to-peer, group-small or group.\n * @property {number} maxParticipants -\n *          Maximum number of concurrent Participants allowed in the Room.\n * @property {boolean} recordParticipantsOnConnect -\n *          Start recording when Participants connect.\n * @property {room.video_codec} videoCodecs - The video_codecs\n * @property {string} mediaRegion - Region for the media server in Group Rooms.\n * @property {string} url - The absolute URL for this resource.\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {RoomPayload} payload - The instance payload\n * @param {sid_like} sid -\n *          The Room Sid or name that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nRoomInstance = function RoomInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.enableTurn = payload.enable_turn; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n  this.endTime = deserialize.iso8601DateTime(payload.end_time); // jshint ignore:line\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.maxParticipants = deserialize.integer(payload.max_participants); // jshint ignore:line\n  this.recordParticipantsOnConnect = payload.record_participants_on_connect; // jshint ignore:line\n  this.videoCodecs = payload.video_codecs; // jshint ignore:line\n  this.mediaRegion = payload.media_region; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(RoomInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new RoomContext(this._version, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a RoomInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @param {object} opts - Options for request\n * @param {room.room_status} opts.status - Set to completed to end the Room.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the recordings\n *\n * @function recordings\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.RoomRecordingList}\n */\n/* jshint ignore:end */\nRoomInstance.prototype.recordings = function recordings() {\n  return this._proxy.recordings;\n};\n\n/* jshint ignore:start */\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.ParticipantList}\n */\n/* jshint ignore:end */\nRoomInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nRoomInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomContext\n *\n * @constructor Twilio.Video.V1.RoomContext\n *\n * @property {Twilio.Video.V1.RoomContext.RoomRecordingList} recordings -\n *          recordings resource\n * @property {Twilio.Video.V1.RoomContext.ParticipantList} participants -\n *          participants resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid -\n *          The Room Sid or name that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nRoomContext = function RoomContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    sid: sid\n  };\n  this._uri = _.template('/Rooms/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._recordings = undefined;\n  this._participants = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a RoomInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @param {object} opts - Options for request\n * @param {room.room_status} opts.status - Set to completed to end the Room.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.status)) {\n    throw new Error('Required parameter \"opts.status\" missing.');\n  }\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(RoomContext.prototype, 'recordings', {\n  get: function () {\n    if (!this._recordings) {\n      this._recordings = new RoomRecordingList(this._version, this._solution.sid);\n    }\n    return this._recordings;\n  }\n});\nObject.defineProperty(RoomContext.prototype, 'participants', {\n  get: function () {\n    if (!this._participants) {\n      this._participants = new ParticipantList(this._version, this._solution.sid);\n    }\n    return this._participants;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nRoomContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  RoomList: RoomList,\n  RoomPage: RoomPage,\n  RoomInstance: RoomInstance,\n  RoomContext: RoomContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","ParticipantList","RoomRecordingList","deserialize","serialize","values","RoomList","RoomPage","RoomInstance","RoomContext","version","RoomListInstance","sid","get","_version","_solution","_uri","template","create","opts","callback","isFunction","deferred","defer","data","of","bool","map","e","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","pageLimit","nextPage","merge","list","allResources","resource","push","length","iso8601DateTime","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","status","dateCreated","date_created","dateUpdated","date_updated","accountSid","account_sid","enableTurn","enable_turn","uniqueName","unique_name","statusCallback","status_callback","statusCallbackMethod","status_callback_method","endTime","end_time","duration","integer","type","maxParticipants","max_participants","recordParticipantsOnConnect","record_participants_on_connect","videoCodecs","video_codecs","mediaRegion","media_region","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","recordings","participants","_recordings","_participants","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/video/v1/room.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar ParticipantList = require('./room/roomParticipant').ParticipantList;\nvar RoomRecordingList = require('./room/recording').RoomRecordingList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar RoomList;\nvar RoomPage;\nvar RoomInstance;\nvar RoomContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomList\n *\n * @constructor Twilio.Video.V1.RoomList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nRoomList = function RoomList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function rooms\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext}\n   */\n  /* jshint ignore:end */\n  function RoomListInstance(sid) {\n    return RoomListInstance.get(sid);\n  }\n\n  RoomListInstance._version = version;\n  // Path Solution\n  RoomListInstance._solution = {};\n  RoomListInstance._uri = _.template(\n    '/Rooms' // jshint ignore:line\n  )(RoomListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a RoomInstance\n   *\n   * @function create\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.enableTurn] -\n   *          Use Twilio Network Traversal for TURN service.\n   * @param {room.room_type} [opts.type] -\n   *          Type of room, either peer-to-peer, group-small or group.\n   * @param {string} [opts.uniqueName] - Name of the Room.\n   * @param {string} [opts.statusCallback] -\n   *          A URL that Twilio sends asynchronous webhook requests to on every room event.\n   * @param {string} [opts.statusCallbackMethod] -\n   *          HTTP method Twilio should use when requesting the above URL.\n   * @param {number} [opts.maxParticipants] -\n   *          Maximum number of Participants in the Room.\n   * @param {boolean} [opts.recordParticipantsOnConnect] -\n   *          Start Participant recording when connected.\n   * @param {room.video_codec|list} [opts.videoCodecs] -\n   *          An array of video codecs supported when publishing a Track in the Room.\n   * @param {string} [opts.mediaRegion] - Region for the media server in Group Rooms.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed RoomInstance\n   */\n  /* jshint ignore:end */\n  RoomListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'EnableTurn': serialize.bool(_.get(opts, 'enableTurn')),\n      'Type': _.get(opts, 'type'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'MaxParticipants': _.get(opts, 'maxParticipants'),\n      'RecordParticipantsOnConnect': serialize.bool(_.get(opts, 'recordParticipantsOnConnect')),\n      'VideoCodecs': serialize.map(_.get(opts, 'videoCodecs'), function(e) { return e; }),\n      'MediaRegion': _.get(opts, 'mediaRegion')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams RoomInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Only show Rooms with the given status.\n   * @param {string} [opts.uniqueName] - Only show Rooms with the provided Name.\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only show Rooms that started on or after this date, given as YYYY-MM-DD.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only show Rooms that started before this date, given as YYYY-MM-DD.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  RoomListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists RoomInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Only show Rooms with the given status.\n   * @param {string} [opts.uniqueName] - Only show Rooms with the provided Name.\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only show Rooms that started on or after this date, given as YYYY-MM-DD.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only show Rooms that started before this date, given as YYYY-MM-DD.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Only show Rooms with the given status.\n   * @param {string} [opts.uniqueName] - Only show Rooms with the provided Name.\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Only show Rooms that started on or after this date, given as YYYY-MM-DD.\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Only show Rooms that started before this date, given as YYYY-MM-DD.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a room\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {string} sid -\n   *          The Room Sid or name that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Video.V1.RoomContext}\n   */\n  /* jshint ignore:end */\n  RoomListInstance.get = function get(sid) {\n    return new RoomContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  RoomListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  RoomListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return RoomListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomPage\n *\n * @constructor Twilio.Video.V1.RoomPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {RoomSolution} solution - Path solution\n *\n * @returns RoomPage\n */\n/* jshint ignore:end */\nRoomPage = function RoomPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(RoomPage.prototype, Page.prototype);\nRoomPage.prototype.constructor = RoomPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of RoomInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomPage#\n *\n * @param {RoomPayload} payload - Payload response from the API\n *\n * @returns RoomInstance\n */\n/* jshint ignore:end */\nRoomPage.prototype.getInstance = function getInstance(payload) {\n  return new RoomInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nRoomPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomContext\n *\n * @constructor Twilio.Video.V1.RoomInstance\n *\n * @property {string} sid -\n *          A system-generated 34-character string that uniquely identifies this resource.\n * @property {room.room_status} status -\n *          A string representing the status of the Room.\n * @property {Date} dateCreated -\n *          The date that this resource was created, given as a UTC ISO 8601 Timestamp.\n * @property {Date} dateUpdated -\n *          The date that this resource was last updated, given as a UTC ISO 8601 Timestamp.\n * @property {string} accountSid -\n *          The unique ID of the Account associated with this Room.\n * @property {boolean} enableTurn - Enable Twilio's Network Traversal TURN service.\n * @property {string} uniqueName - A developer-supplied Name of the Room.\n * @property {string} statusCallback -\n *          A URL that Twilio sends asynchronous webhook requests to on every Room event.\n * @property {string} statusCallbackMethod -\n *          HTTP method Twilio should use when requesting the above URL.\n * @property {Date} endTime -\n *          The end time of the Room, given as a UTC ISO 8601 Timestamp.\n * @property {number} duration - The duration of the Room in seconds.\n * @property {room.room_type} type -\n *          Type of Room, either peer-to-peer, group-small or group.\n * @property {number} maxParticipants -\n *          Maximum number of concurrent Participants allowed in the Room.\n * @property {boolean} recordParticipantsOnConnect -\n *          Start recording when Participants connect.\n * @property {room.video_codec} videoCodecs - The video_codecs\n * @property {string} mediaRegion - Region for the media server in Group Rooms.\n * @property {string} url - The absolute URL for this resource.\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {RoomPayload} payload - The instance payload\n * @param {sid_like} sid -\n *          The Room Sid or name that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nRoomInstance = function RoomInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.enableTurn = payload.enable_turn; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n  this.endTime = deserialize.iso8601DateTime(payload.end_time); // jshint ignore:line\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.maxParticipants = deserialize.integer(payload.max_participants); // jshint ignore:line\n  this.recordParticipantsOnConnect = payload.record_participants_on_connect; // jshint ignore:line\n  this.videoCodecs = payload.video_codecs; // jshint ignore:line\n  this.mediaRegion = payload.media_region; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(RoomInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new RoomContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a RoomInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @param {object} opts - Options for request\n * @param {room.room_status} opts.status - Set to completed to end the Room.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the recordings\n *\n * @function recordings\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.RoomRecordingList}\n */\n/* jshint ignore:end */\nRoomInstance.prototype.recordings = function recordings() {\n  return this._proxy.recordings;\n};\n\n/* jshint ignore:start */\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.ParticipantList}\n */\n/* jshint ignore:end */\nRoomInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nRoomInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomContext\n *\n * @constructor Twilio.Video.V1.RoomContext\n *\n * @property {Twilio.Video.V1.RoomContext.RoomRecordingList} recordings -\n *          recordings resource\n * @property {Twilio.Video.V1.RoomContext.ParticipantList} participants -\n *          participants resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid -\n *          The Room Sid or name that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nRoomContext = function RoomContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = _.template(\n    '/Rooms/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._recordings = undefined;\n  this._participants = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a RoomInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @param {object} opts - Options for request\n * @param {room.room_status} opts.status - Set to completed to end the Room.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.status)) {\n    throw new Error('Required parameter \"opts.status\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({'Status': _.get(opts, 'status')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(RoomContext.prototype,\n  'recordings', {\n  get: function() {\n    if (!this._recordings) {\n      this._recordings = new RoomRecordingList(this._version, this._solution.sid);\n    }\n    return this._recordings;\n  }\n});\n\nObject.defineProperty(RoomContext.prototype,\n  'participants', {\n  get: function() {\n    if (!this._participants) {\n      this._participants = new ParticipantList(this._version, this._solution.sid);\n    }\n    return this._participants;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nRoomContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  RoomList: RoomList,\n  RoomPage: RoomPage,\n  RoomInstance: RoomInstance,\n  RoomContext: RoomContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}