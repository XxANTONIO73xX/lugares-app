{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar moment = require('moment');\n\n/**\n * @namespace deserialize\n */\n\nfunction parseDate(s, format) {\n  var m = moment.utc(s, format);\n  if (m.isValid()) {\n    return m.toDate();\n  }\n  return s;\n}\nfunction parseNumber(n, parser) {\n  var parsed = parser(n);\n  if (isNaN(parsed)) {\n    return n;\n  }\n  return parsed;\n}\n\n/**\n * @function iso8601Date\n * @memberOf deserialize\n * @description parse a string into a Date object\n *\n * @param  {string} s date string in YYYY-MM-DD format\n * @return {Date} Date object\n */\nfunction iso8601Date(s) {\n  return parseDate(s, 'YYYY-MM-DD');\n}\n\n/**\n * @function iso8601DateTime\n * @memberOf deserialize\n * @description parse a string into a Date object\n *\n * @param  {String} s date string in YYYY-MM-DD[T]HH:mm:ss[Z] format\n * @return {Date} Date object\n */\nfunction iso8601DateTime(s) {\n  return parseDate(s, 'YYYY-MM-DD[T]HH:mm:ss[Z]');\n}\n\n/**\n * @function rfc2822DateTime\n * @memberOf deserialize\n * @description parse a string into a Date object\n *\n * @param  {String} s date string in ddd, DD MMM YYYY HH:mm:ss [+0000] format\n * @return {Date} Date object\n */\nfunction rfc2822DateTime(s) {\n  return parseDate(s, 'ddd, DD MMM YYYY HH:mm:ss [+0000]');\n}\n\n/**\n * @function decimal\n * @memberOf deserialize\n * @description parse a string into a decimal\n *\n * @param  {string} d decimal value as string\n * @return {number} number object\n */\nfunction decimal(d) {\n  return parseNumber(d, parseFloat);\n}\n\n/**\n * @function integer\n * @memberOf deserialize\n * @description parse a string into a integer\n *\n * @param  {string} i integer value as string\n * @return {number} number object\n */\nfunction integer(i) {\n  return parseNumber(i, _.parseInt);\n}\nmodule.exports = {\n  iso8601Date: iso8601Date,\n  iso8601DateTime: iso8601DateTime,\n  rfc2822DateTime: rfc2822DateTime,\n  decimal: decimal,\n  integer: integer\n};","map":{"version":3,"names":["_","require","moment","parseDate","s","format","m","utc","isValid","toDate","parseNumber","n","parser","parsed","isNaN","iso8601Date","iso8601DateTime","rfc2822DateTime","decimal","d","parseFloat","integer","i","parseInt","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/base/deserialize.js"],"sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar moment = require('moment');\n\n/**\n * @namespace deserialize\n */\n\nfunction parseDate(s, format) {\n  var m = moment.utc(s, format);\n  if (m.isValid()) {\n    return m.toDate();\n  }\n\n  return s;\n}\n\nfunction parseNumber(n, parser) {\n  var parsed = parser(n);\n  if (isNaN(parsed)) {\n    return n;\n  }\n\n  return parsed;\n}\n\n/**\n * @function iso8601Date\n * @memberOf deserialize\n * @description parse a string into a Date object\n *\n * @param  {string} s date string in YYYY-MM-DD format\n * @return {Date} Date object\n */\nfunction iso8601Date(s) {\n  return parseDate(s, 'YYYY-MM-DD');\n}\n\n/**\n * @function iso8601DateTime\n * @memberOf deserialize\n * @description parse a string into a Date object\n *\n * @param  {String} s date string in YYYY-MM-DD[T]HH:mm:ss[Z] format\n * @return {Date} Date object\n */\nfunction iso8601DateTime(s) {\n  return parseDate(s, 'YYYY-MM-DD[T]HH:mm:ss[Z]');\n}\n\n/**\n * @function rfc2822DateTime\n * @memberOf deserialize\n * @description parse a string into a Date object\n *\n * @param  {String} s date string in ddd, DD MMM YYYY HH:mm:ss [+0000] format\n * @return {Date} Date object\n */\nfunction rfc2822DateTime(s) {\n  return parseDate(s, 'ddd, DD MMM YYYY HH:mm:ss [+0000]');\n}\n\n/**\n * @function decimal\n * @memberOf deserialize\n * @description parse a string into a decimal\n *\n * @param  {string} d decimal value as string\n * @return {number} number object\n */\nfunction decimal(d) {\n  return parseNumber(d, parseFloat);\n}\n\n/**\n * @function integer\n * @memberOf deserialize\n * @description parse a string into a integer\n *\n * @param  {string} i integer value as string\n * @return {number} number object\n */\nfunction integer(i) {\n  return parseNumber(i, _.parseInt);\n}\n\nmodule.exports = {\n  iso8601Date: iso8601Date,\n  iso8601DateTime: iso8601DateTime,\n  rfc2822DateTime: rfc2822DateTime,\n  decimal: decimal,\n  integer: integer,\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AACzB,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;;AAE9B;AACA;AACA;;AAEA,SAASE,SAASA,CAACC,CAAC,EAAEC,MAAM,EAAE;EAC5B,IAAIC,CAAC,GAAGJ,MAAM,CAACK,GAAG,CAACH,CAAC,EAAEC,MAAM,CAAC;EAC7B,IAAIC,CAAC,CAACE,OAAO,CAAC,CAAC,EAAE;IACf,OAAOF,CAAC,CAACG,MAAM,CAAC,CAAC;EACnB;EAEA,OAAOL,CAAC;AACV;AAEA,SAASM,WAAWA,CAACC,CAAC,EAAEC,MAAM,EAAE;EAC9B,IAAIC,MAAM,GAAGD,MAAM,CAACD,CAAC,CAAC;EACtB,IAAIG,KAAK,CAACD,MAAM,CAAC,EAAE;IACjB,OAAOF,CAAC;EACV;EAEA,OAAOE,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,WAAWA,CAACX,CAAC,EAAE;EACtB,OAAOD,SAAS,CAACC,CAAC,EAAE,YAAY,CAAC;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASY,eAAeA,CAACZ,CAAC,EAAE;EAC1B,OAAOD,SAAS,CAACC,CAAC,EAAE,0BAA0B,CAAC;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASa,eAAeA,CAACb,CAAC,EAAE;EAC1B,OAAOD,SAAS,CAACC,CAAC,EAAE,mCAAmC,CAAC;AAC1D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASc,OAAOA,CAACC,CAAC,EAAE;EAClB,OAAOT,WAAW,CAACS,CAAC,EAAEC,UAAU,CAAC;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACC,CAAC,EAAE;EAClB,OAAOZ,WAAW,CAACY,CAAC,EAAEtB,CAAC,CAACuB,QAAQ,CAAC;AACnC;AAEAC,MAAM,CAACC,OAAO,GAAG;EACfV,WAAW,EAAEA,WAAW;EACxBC,eAAe,EAAEA,eAAe;EAChCC,eAAe,EAAEA,eAAe;EAChCC,OAAO,EAAEA,OAAO;EAChBG,OAAO,EAAEA;AACX,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}