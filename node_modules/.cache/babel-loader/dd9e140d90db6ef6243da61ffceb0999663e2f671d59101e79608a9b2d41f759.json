{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar LocalList = require('./availablePhoneNumber/local').LocalList;\nvar MachineToMachineList = require('./availablePhoneNumber/machineToMachine').MachineToMachineList;\nvar MobileList = require('./availablePhoneNumber/mobile').MobileList;\nvar NationalList = require('./availablePhoneNumber/national').NationalList;\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar SharedCostList = require('./availablePhoneNumber/sharedCost').SharedCostList;\nvar TollFreeList = require('./availablePhoneNumber/tollFree').TollFreeList;\nvar VoipList = require('./availablePhoneNumber/voip').VoipList;\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar AvailablePhoneNumberCountryList;\nvar AvailablePhoneNumberCountryPage;\nvar AvailablePhoneNumberCountryInstance;\nvar AvailablePhoneNumberCountryContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the AvailablePhoneNumberCountryList\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryList = function AvailablePhoneNumberCountryList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function availablePhoneNumbers\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext}\n   */\n  /* jshint ignore:end */\n  function AvailablePhoneNumberCountryListInstance(sid) {\n    return AvailablePhoneNumberCountryListInstance.get(sid);\n  }\n  AvailablePhoneNumberCountryListInstance._version = version;\n  // Path Solution\n  AvailablePhoneNumberCountryListInstance._solution = {\n    accountSid: accountSid\n  };\n  AvailablePhoneNumberCountryListInstance._uri = _.template('/Accounts/<%= accountSid %>/AvailablePhoneNumbers.json' // jshint ignore:line\n  )(AvailablePhoneNumberCountryListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams AvailablePhoneNumberCountryInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  AvailablePhoneNumberCountryListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists AvailablePhoneNumberCountryInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AvailablePhoneNumberCountryListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of AvailablePhoneNumberCountryInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AvailablePhoneNumberCountryListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AvailablePhoneNumberCountryPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of AvailablePhoneNumberCountryInstance records\n   * from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AvailablePhoneNumberCountryListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AvailablePhoneNumberCountryPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a available_phone_number_country\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {string} countryCode -\n   *          The ISO country code of the country to fetch available phone number information about\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext}\n   */\n  /* jshint ignore:end */\n  AvailablePhoneNumberCountryListInstance.get = function get(countryCode) {\n    return new AvailablePhoneNumberCountryContext(this._version, this._solution.accountSid, countryCode);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  AvailablePhoneNumberCountryListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  AvailablePhoneNumberCountryListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return AvailablePhoneNumberCountryListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the AvailablePhoneNumberCountryPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AvailablePhoneNumberCountrySolution} solution - Path solution\n *\n * @returns AvailablePhoneNumberCountryPage\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryPage = function AvailablePhoneNumberCountryPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(AvailablePhoneNumberCountryPage.prototype, Page.prototype);\nAvailablePhoneNumberCountryPage.prototype.constructor = AvailablePhoneNumberCountryPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of AvailablePhoneNumberCountryInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryPage#\n *\n * @param {AvailablePhoneNumberCountryPayload} payload -\n *          Payload response from the API\n *\n * @returns AvailablePhoneNumberCountryInstance\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryPage.prototype.getInstance = function getInstance(payload) {\n  return new AvailablePhoneNumberCountryInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nAvailablePhoneNumberCountryPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the AvailablePhoneNumberCountryContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance\n *\n * @property {string} countryCode - The ISO-3166-1 country code of the country.\n * @property {string} country - The name of the country\n * @property {string} uri -\n *          The URI of the Country resource, relative to `https://api.twilio.com`\n * @property {boolean} beta -\n *          Whether all phone numbers available in the country are new to the Twilio platform.\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n *\n * @param {V2010} version - Version of the resource\n * @param {AvailablePhoneNumberCountryPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n * @param {iso_country_code} countryCode -\n *          The ISO country code of the country to fetch available phone number information about\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance = function AvailablePhoneNumberCountryInstance(version, payload, accountSid, countryCode) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.countryCode = payload.country_code; // jshint ignore:line\n  this.country = payload.country; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.beta = payload.beta; // jshint ignore:line\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    countryCode: countryCode || this.countryCode\n  };\n};\nObject.defineProperty(AvailablePhoneNumberCountryInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new AvailablePhoneNumberCountryContext(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a AvailablePhoneNumberCountryInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AvailablePhoneNumberCountryInstance\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the local\n *\n * @function local\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.local = function local() {\n  return this._proxy.local;\n};\n\n/* jshint ignore:start */\n/**\n * Access the tollFree\n *\n * @function tollFree\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.tollFree = function tollFree() {\n  return this._proxy.tollFree;\n};\n\n/* jshint ignore:start */\n/**\n * Access the mobile\n *\n * @function mobile\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MobileList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.mobile = function mobile() {\n  return this._proxy.mobile;\n};\n\n/* jshint ignore:start */\n/**\n * Access the national\n *\n * @function national\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.NationalList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.national = function national() {\n  return this._proxy.national;\n};\n\n/* jshint ignore:start */\n/**\n * Access the voip\n *\n * @function voip\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.voip = function voip() {\n  return this._proxy.voip;\n};\n\n/* jshint ignore:start */\n/**\n * Access the sharedCost\n *\n * @function sharedCost\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.SharedCostList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.sharedCost = function sharedCost() {\n  return this._proxy.sharedCost;\n};\n\n/* jshint ignore:start */\n/**\n * Access the machineToMachine\n *\n * @function machineToMachine\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.machineToMachine = function machineToMachine() {\n  return this._proxy.machineToMachine;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nAvailablePhoneNumberCountryInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the AvailablePhoneNumberCountryContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext\n *\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalList} local -\n *          local resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList} tollFree -\n *          tollFree resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MobileList} mobile -\n *          mobile resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.NationalList} national -\n *          national resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList} voip -\n *          voip resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.SharedCostList} sharedCost -\n *          sharedCost resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList} machineToMachine -\n *          machineToMachine resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account requesting the available phone number Country resource\n * @param {iso_country_code} countryCode -\n *          The ISO country code of the country to fetch available phone number information about\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryContext = function AvailablePhoneNumberCountryContext(version, accountSid, countryCode) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    accountSid: accountSid,\n    countryCode: countryCode\n  };\n  this._uri = _.template('/Accounts/<%= accountSid %>/AvailablePhoneNumbers/<%= countryCode %>.json' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._local = undefined;\n  this._tollFree = undefined;\n  this._mobile = undefined;\n  this._national = undefined;\n  this._voip = undefined;\n  this._sharedCost = undefined;\n  this._machineToMachine = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a AvailablePhoneNumberCountryInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AvailablePhoneNumberCountryInstance\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AvailablePhoneNumberCountryInstance(this._version, payload, this._solution.accountSid, this._solution.countryCode));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'local', {\n  get: function () {\n    if (!this._local) {\n      this._local = new LocalList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n    return this._local;\n  }\n});\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'tollFree', {\n  get: function () {\n    if (!this._tollFree) {\n      this._tollFree = new TollFreeList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n    return this._tollFree;\n  }\n});\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'mobile', {\n  get: function () {\n    if (!this._mobile) {\n      this._mobile = new MobileList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n    return this._mobile;\n  }\n});\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'national', {\n  get: function () {\n    if (!this._national) {\n      this._national = new NationalList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n    return this._national;\n  }\n});\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'voip', {\n  get: function () {\n    if (!this._voip) {\n      this._voip = new VoipList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n    return this._voip;\n  }\n});\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'sharedCost', {\n  get: function () {\n    if (!this._sharedCost) {\n      this._sharedCost = new SharedCostList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n    return this._sharedCost;\n  }\n});\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'machineToMachine', {\n  get: function () {\n    if (!this._machineToMachine) {\n      this._machineToMachine = new MachineToMachineList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n    return this._machineToMachine;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nAvailablePhoneNumberCountryContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  AvailablePhoneNumberCountryList: AvailablePhoneNumberCountryList,\n  AvailablePhoneNumberCountryPage: AvailablePhoneNumberCountryPage,\n  AvailablePhoneNumberCountryInstance: AvailablePhoneNumberCountryInstance,\n  AvailablePhoneNumberCountryContext: AvailablePhoneNumberCountryContext\n};","map":{"version":3,"names":["Q","require","_","util","LocalList","MachineToMachineList","MobileList","NationalList","Page","SharedCostList","TollFreeList","VoipList","values","AvailablePhoneNumberCountryList","AvailablePhoneNumberCountryPage","AvailablePhoneNumberCountryInstance","AvailablePhoneNumberCountryContext","version","accountSid","AvailablePhoneNumberCountryListInstance","sid","get","_version","_solution","_uri","template","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","countryCode","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","country_code","country","beta","subresourceUris","subresource_uris","_context","undefined","Object","defineProperty","fetch","_proxy","local","tollFree","mobile","national","voip","sharedCost","machineToMachine","_local","_tollFree","_mobile","_national","_voip","_sharedCost","_machineToMachine","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/api/v2010/account/availablePhoneNumber.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar LocalList = require('./availablePhoneNumber/local').LocalList;\nvar MachineToMachineList = require(\n    './availablePhoneNumber/machineToMachine').MachineToMachineList;\nvar MobileList = require('./availablePhoneNumber/mobile').MobileList;\nvar NationalList = require('./availablePhoneNumber/national').NationalList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar SharedCostList = require(\n    './availablePhoneNumber/sharedCost').SharedCostList;\nvar TollFreeList = require('./availablePhoneNumber/tollFree').TollFreeList;\nvar VoipList = require('./availablePhoneNumber/voip').VoipList;\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar AvailablePhoneNumberCountryList;\nvar AvailablePhoneNumberCountryPage;\nvar AvailablePhoneNumberCountryInstance;\nvar AvailablePhoneNumberCountryContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the AvailablePhoneNumberCountryList\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryList = function\n    AvailablePhoneNumberCountryList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function availablePhoneNumbers\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext}\n   */\n  /* jshint ignore:end */\n  function AvailablePhoneNumberCountryListInstance(sid) {\n    return AvailablePhoneNumberCountryListInstance.get(sid);\n  }\n\n  AvailablePhoneNumberCountryListInstance._version = version;\n  // Path Solution\n  AvailablePhoneNumberCountryListInstance._solution = {accountSid: accountSid};\n  AvailablePhoneNumberCountryListInstance._uri = _.template(\n    '/Accounts/<%= accountSid %>/AvailablePhoneNumbers.json' // jshint ignore:line\n  )(AvailablePhoneNumberCountryListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams AvailablePhoneNumberCountryInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  AvailablePhoneNumberCountryListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists AvailablePhoneNumberCountryInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AvailablePhoneNumberCountryListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of AvailablePhoneNumberCountryInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AvailablePhoneNumberCountryListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AvailablePhoneNumberCountryPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of AvailablePhoneNumberCountryInstance records\n   * from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AvailablePhoneNumberCountryListInstance.getPage = function getPage(targetUrl,\n      callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AvailablePhoneNumberCountryPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a available_phone_number_country\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {string} countryCode -\n   *          The ISO country code of the country to fetch available phone number information about\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext}\n   */\n  /* jshint ignore:end */\n  AvailablePhoneNumberCountryListInstance.get = function get(countryCode) {\n    return new AvailablePhoneNumberCountryContext(\n      this._version,\n      this._solution.accountSid,\n      countryCode\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  AvailablePhoneNumberCountryListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AvailablePhoneNumberCountryListInstance[util.inspect.custom] = function\n      inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AvailablePhoneNumberCountryListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AvailablePhoneNumberCountryPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AvailablePhoneNumberCountrySolution} solution - Path solution\n *\n * @returns AvailablePhoneNumberCountryPage\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryPage = function\n    AvailablePhoneNumberCountryPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AvailablePhoneNumberCountryPage.prototype, Page.prototype);\nAvailablePhoneNumberCountryPage.prototype.constructor = AvailablePhoneNumberCountryPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of AvailablePhoneNumberCountryInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryPage#\n *\n * @param {AvailablePhoneNumberCountryPayload} payload -\n *          Payload response from the API\n *\n * @returns AvailablePhoneNumberCountryInstance\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryPage.prototype.getInstance = function\n    getInstance(payload) {\n  return new AvailablePhoneNumberCountryInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAvailablePhoneNumberCountryPage.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AvailablePhoneNumberCountryContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance\n *\n * @property {string} countryCode - The ISO-3166-1 country code of the country.\n * @property {string} country - The name of the country\n * @property {string} uri -\n *          The URI of the Country resource, relative to `https://api.twilio.com`\n * @property {boolean} beta -\n *          Whether all phone numbers available in the country are new to the Twilio platform.\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n *\n * @param {V2010} version - Version of the resource\n * @param {AvailablePhoneNumberCountryPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n * @param {iso_country_code} countryCode -\n *          The ISO country code of the country to fetch available phone number information about\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance = function\n    AvailablePhoneNumberCountryInstance(version, payload, accountSid,\n    countryCode) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.countryCode = payload.country_code; // jshint ignore:line\n  this.country = payload.country; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.beta = payload.beta; // jshint ignore:line\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, countryCode: countryCode || this.countryCode, };\n};\n\nObject.defineProperty(AvailablePhoneNumberCountryInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new AvailablePhoneNumberCountryContext(\n        this._version,\n        this._solution.accountSid,\n        this._solution.countryCode\n      );\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a AvailablePhoneNumberCountryInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AvailablePhoneNumberCountryInstance\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the local\n *\n * @function local\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.local = function local() {\n  return this._proxy.local;\n};\n\n/* jshint ignore:start */\n/**\n * Access the tollFree\n *\n * @function tollFree\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.tollFree = function tollFree() {\n  return this._proxy.tollFree;\n};\n\n/* jshint ignore:start */\n/**\n * Access the mobile\n *\n * @function mobile\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MobileList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.mobile = function mobile() {\n  return this._proxy.mobile;\n};\n\n/* jshint ignore:start */\n/**\n * Access the national\n *\n * @function national\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.NationalList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.national = function national() {\n  return this._proxy.national;\n};\n\n/* jshint ignore:start */\n/**\n * Access the voip\n *\n * @function voip\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.voip = function voip() {\n  return this._proxy.voip;\n};\n\n/* jshint ignore:start */\n/**\n * Access the sharedCost\n *\n * @function sharedCost\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.SharedCostList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.sharedCost = function sharedCost()\n    {\n  return this._proxy.sharedCost;\n};\n\n/* jshint ignore:start */\n/**\n * Access the machineToMachine\n *\n * @function machineToMachine\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.machineToMachine = function\n    machineToMachine() {\n  return this._proxy.machineToMachine;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAvailablePhoneNumberCountryInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AvailablePhoneNumberCountryContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext\n *\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalList} local -\n *          local resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList} tollFree -\n *          tollFree resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MobileList} mobile -\n *          mobile resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.NationalList} national -\n *          national resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList} voip -\n *          voip resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.SharedCostList} sharedCost -\n *          sharedCost resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList} machineToMachine -\n *          machineToMachine resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account requesting the available phone number Country resource\n * @param {iso_country_code} countryCode -\n *          The ISO country code of the country to fetch available phone number information about\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryContext = function\n    AvailablePhoneNumberCountryContext(version, accountSid, countryCode) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, countryCode: countryCode, };\n  this._uri = _.template(\n    '/Accounts/<%= accountSid %>/AvailablePhoneNumbers/<%= countryCode %>.json' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._local = undefined;\n  this._tollFree = undefined;\n  this._mobile = undefined;\n  this._national = undefined;\n  this._voip = undefined;\n  this._sharedCost = undefined;\n  this._machineToMachine = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a AvailablePhoneNumberCountryInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AvailablePhoneNumberCountryInstance\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new AvailablePhoneNumberCountryInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.countryCode\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype,\n  'local', {\n  get: function() {\n    if (!this._local) {\n      this._local = new LocalList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n    return this._local;\n  }\n});\n\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype,\n  'tollFree', {\n  get: function() {\n    if (!this._tollFree) {\n      this._tollFree = new TollFreeList(\n        this._version,\n        this._solution.accountSid,\n        this._solution.countryCode\n      );\n    }\n    return this._tollFree;\n  }\n});\n\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype,\n  'mobile', {\n  get: function() {\n    if (!this._mobile) {\n      this._mobile = new MobileList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n    return this._mobile;\n  }\n});\n\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype,\n  'national', {\n  get: function() {\n    if (!this._national) {\n      this._national = new NationalList(\n        this._version,\n        this._solution.accountSid,\n        this._solution.countryCode\n      );\n    }\n    return this._national;\n  }\n});\n\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype,\n  'voip', {\n  get: function() {\n    if (!this._voip) {\n      this._voip = new VoipList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n    return this._voip;\n  }\n});\n\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype,\n  'sharedCost', {\n  get: function() {\n    if (!this._sharedCost) {\n      this._sharedCost = new SharedCostList(\n        this._version,\n        this._solution.accountSid,\n        this._solution.countryCode\n      );\n    }\n    return this._sharedCost;\n  }\n});\n\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype,\n  'machineToMachine', {\n  get: function() {\n    if (!this._machineToMachine) {\n      this._machineToMachine = new MachineToMachineList(\n        this._version,\n        this._solution.accountSid,\n        this._solution.countryCode\n      );\n    }\n    return this._machineToMachine;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAvailablePhoneNumberCountryContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AvailablePhoneNumberCountryList: AvailablePhoneNumberCountryList,\n  AvailablePhoneNumberCountryPage: AvailablePhoneNumberCountryPage,\n  AvailablePhoneNumberCountryInstance: AvailablePhoneNumberCountryInstance,\n  AvailablePhoneNumberCountryContext: AvailablePhoneNumberCountryContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}