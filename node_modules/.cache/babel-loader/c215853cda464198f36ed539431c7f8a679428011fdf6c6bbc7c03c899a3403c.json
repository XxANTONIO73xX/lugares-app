{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar ApplicationList;\nvar ApplicationPage;\nvar ApplicationInstance;\nvar ApplicationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ApplicationList\n *\n * @constructor Twilio.Api.V2010.AccountContext.ApplicationList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n */\n/* jshint ignore:end */\nApplicationList = function ApplicationList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function applications\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ApplicationContext}\n   */\n  /* jshint ignore:end */\n  function ApplicationListInstance(sid) {\n    return ApplicationListInstance.get(sid);\n  }\n  ApplicationListInstance._version = version;\n  // Path Solution\n  ApplicationListInstance._solution = {\n    accountSid: accountSid\n  };\n  ApplicationListInstance._uri = _.template('/Accounts/<%= accountSid %>/Applications.json' // jshint ignore:line\n  )(ApplicationListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a ApplicationInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the new resource\n   * @param {string} [opts.apiVersion] -\n   *          The API version to use to start a new TwiML session\n   * @param {string} [opts.voiceUrl] -\n   *          The URL to call when the phone number receives a call\n   * @param {string} [opts.voiceMethod] - The HTTP method to use with the voice_url\n   * @param {string} [opts.voiceFallbackUrl] -\n   *          The URL to call when a TwiML error occurs\n   * @param {string} [opts.voiceFallbackMethod] -\n   *          The HTTP method to use with voice_fallback_url\n   * @param {string} [opts.statusCallback] -\n   *          The URL to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method to use to call status_callback\n   * @param {boolean} [opts.voiceCallerIdLookup] -\n   *          Whether to lookup the caller's name\n   * @param {string} [opts.smsUrl] -\n   *          The URL to call when the phone number receives an incoming SMS message\n   * @param {string} [opts.smsMethod] - The HTTP method to use with sms_url\n   * @param {string} [opts.smsFallbackUrl] -\n   *          The URL to call when an error occurs while retrieving or executing the TwiML\n   * @param {string} [opts.smsFallbackMethod] -\n   *          The HTTP method to use with sms_fallback_url\n   * @param {string} [opts.smsStatusCallback] -\n   *          The URL to send status information to your application\n   * @param {string} [opts.messageStatusCallback] -\n   *          The URL to send message status information to your application\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ApplicationInstance\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'ApiVersion': _.get(opts, 'apiVersion'),\n      'VoiceUrl': _.get(opts, 'voiceUrl'),\n      'VoiceMethod': _.get(opts, 'voiceMethod'),\n      'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),\n      'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'VoiceCallerIdLookup': serialize.bool(_.get(opts, 'voiceCallerIdLookup')),\n      'SmsUrl': _.get(opts, 'smsUrl'),\n      'SmsMethod': _.get(opts, 'smsMethod'),\n      'SmsFallbackUrl': _.get(opts, 'smsFallbackUrl'),\n      'SmsFallbackMethod': _.get(opts, 'smsFallbackMethod'),\n      'SmsStatusCallback': _.get(opts, 'smsStatusCallback'),\n      'MessageStatusCallback': _.get(opts, 'messageStatusCallback')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ApplicationInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ApplicationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Application resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ApplicationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Application resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ApplicationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Application resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ApplicationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ApplicationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ApplicationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a application\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ApplicationContext}\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.get = function get(sid) {\n    return new ApplicationContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  ApplicationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return ApplicationListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ApplicationPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.ApplicationPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ApplicationSolution} solution - Path solution\n *\n * @returns ApplicationPage\n */\n/* jshint ignore:end */\nApplicationPage = function ApplicationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(ApplicationPage.prototype, Page.prototype);\nApplicationPage.prototype.constructor = ApplicationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ApplicationInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationPage#\n *\n * @param {ApplicationPayload} payload - Payload response from the API\n *\n * @returns ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationPage.prototype.getInstance = function getInstance(payload) {\n  return new ApplicationInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nApplicationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nApplicationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ApplicationContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ApplicationInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} apiVersion -\n *          The API version used to start a new TwiML session\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} messageStatusCallback -\n *          The URL to send message status information to your application\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} smsFallbackMethod -\n *          The HTTP method used with sms_fallback_url\n * @property {string} smsFallbackUrl -\n *          The URL that we call when an error occurs while retrieving or executing the TwiML\n * @property {string} smsMethod - The HTTP method to use with sms_url\n * @property {string} smsStatusCallback -\n *          The URL to send status information to your application\n * @property {string} smsUrl -\n *          The URL we call when the phone number receives an incoming SMS message\n * @property {string} statusCallback -\n *          The URL to send status information to your application\n * @property {string} statusCallbackMethod -\n *          The HTTP method we use to call status_callback\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {boolean} voiceCallerIdLookup - Whether to lookup the caller's name\n * @property {string} voiceFallbackMethod -\n *          The HTTP method used with voice_fallback_url\n * @property {string} voiceFallbackUrl - The URL we call when a TwiML error occurs\n * @property {string} voiceMethod - The HTTP method used with the voice_url\n * @property {string} voiceUrl -\n *          The URL we call when the phone number receives a call\n *\n * @param {V2010} version - Version of the resource\n * @param {ApplicationPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nApplicationInstance = function ApplicationInstance(version, payload, accountSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.messageStatusCallback = payload.message_status_callback; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.smsFallbackMethod = payload.sms_fallback_method; // jshint ignore:line\n  this.smsFallbackUrl = payload.sms_fallback_url; // jshint ignore:line\n  this.smsMethod = payload.sms_method; // jshint ignore:line\n  this.smsStatusCallback = payload.sms_status_callback; // jshint ignore:line\n  this.smsUrl = payload.sms_url; // jshint ignore:line\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.voiceCallerIdLookup = payload.voice_caller_id_lookup; // jshint ignore:line\n  this.voiceFallbackMethod = payload.voice_fallback_method; // jshint ignore:line\n  this.voiceFallbackUrl = payload.voice_fallback_url; // jshint ignore:line\n  this.voiceMethod = payload.voice_method; // jshint ignore:line\n  this.voiceUrl = payload.voice_url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(ApplicationInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ApplicationContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * remove a ApplicationInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ApplicationInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ApplicationInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.apiVersion] -\n *          The API version to use to start a new TwiML session\n * @param {string} [opts.voiceUrl] -\n *          The URL to call when the phone number receives a call\n * @param {string} [opts.voiceMethod] - The HTTP method to use with the voice_url\n * @param {string} [opts.voiceFallbackUrl] -\n *          The URL to call when a TwiML error occurs\n * @param {string} [opts.voiceFallbackMethod] -\n *          The HTTP method to use with voice_fallback_url\n * @param {string} [opts.statusCallback] -\n *          The URL to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method to use to call status_callback\n * @param {boolean} [opts.voiceCallerIdLookup] -\n *          Whether to lookup the caller's name\n * @param {string} [opts.smsUrl] -\n *          The URL to call when the phone number receives an incoming SMS message\n * @param {string} [opts.smsMethod] - The HTTP method to use with sms_url\n * @param {string} [opts.smsFallbackUrl] -\n *          The URL to call when an error occurs while retrieving or executing the TwiML\n * @param {string} [opts.smsFallbackMethod] -\n *          The HTTP method to use with sms_fallback_url\n * @param {string} [opts.smsStatusCallback] -\n *          The URL to send status information to your application\n * @param {string} [opts.messageStatusCallback] -\n *          The URL to send message status information to your application\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nApplicationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nApplicationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the ApplicationContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ApplicationContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nApplicationContext = function ApplicationContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = _.template('/Accounts/<%= accountSid %>/Applications/<%= sid %>.json' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ApplicationInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ApplicationInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ApplicationInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ApplicationInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.apiVersion] -\n *          The API version to use to start a new TwiML session\n * @param {string} [opts.voiceUrl] -\n *          The URL to call when the phone number receives a call\n * @param {string} [opts.voiceMethod] - The HTTP method to use with the voice_url\n * @param {string} [opts.voiceFallbackUrl] -\n *          The URL to call when a TwiML error occurs\n * @param {string} [opts.voiceFallbackMethod] -\n *          The HTTP method to use with voice_fallback_url\n * @param {string} [opts.statusCallback] -\n *          The URL to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method to use to call status_callback\n * @param {boolean} [opts.voiceCallerIdLookup] -\n *          Whether to lookup the caller's name\n * @param {string} [opts.smsUrl] -\n *          The URL to call when the phone number receives an incoming SMS message\n * @param {string} [opts.smsMethod] - The HTTP method to use with sms_url\n * @param {string} [opts.smsFallbackUrl] -\n *          The URL to call when an error occurs while retrieving or executing the TwiML\n * @param {string} [opts.smsFallbackMethod] -\n *          The HTTP method to use with sms_fallback_url\n * @param {string} [opts.smsStatusCallback] -\n *          The URL to send status information to your application\n * @param {string} [opts.messageStatusCallback] -\n *          The URL to send message status information to your application\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'ApiVersion': _.get(opts, 'apiVersion'),\n    'VoiceUrl': _.get(opts, 'voiceUrl'),\n    'VoiceMethod': _.get(opts, 'voiceMethod'),\n    'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),\n    'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n    'VoiceCallerIdLookup': serialize.bool(_.get(opts, 'voiceCallerIdLookup')),\n    'SmsUrl': _.get(opts, 'smsUrl'),\n    'SmsMethod': _.get(opts, 'smsMethod'),\n    'SmsFallbackUrl': _.get(opts, 'smsFallbackUrl'),\n    'SmsFallbackMethod': _.get(opts, 'smsFallbackMethod'),\n    'SmsStatusCallback': _.get(opts, 'smsStatusCallback'),\n    'MessageStatusCallback': _.get(opts, 'messageStatusCallback')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ApplicationInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nApplicationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nApplicationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  ApplicationList: ApplicationList,\n  ApplicationPage: ApplicationPage,\n  ApplicationInstance: ApplicationInstance,\n  ApplicationContext: ApplicationContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","ApplicationList","ApplicationPage","ApplicationInstance","ApplicationContext","version","accountSid","ApplicationListInstance","sid","get","_version","_solution","_uri","template","create","opts","callback","isUndefined","Error","friendlyName","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","pageLimit","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","apiVersion","api_version","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","friendly_name","messageStatusCallback","message_status_callback","smsFallbackMethod","sms_fallback_method","smsFallbackUrl","sms_fallback_url","smsMethod","sms_method","smsStatusCallback","sms_status_callback","smsUrl","sms_url","statusCallback","status_callback","statusCallbackMethod","status_callback_method","voiceCallerIdLookup","voice_caller_id_lookup","voiceFallbackMethod","voice_fallback_method","voiceFallbackUrl","voice_fallback_url","voiceMethod","voice_method","voiceUrl","voice_url","_context","undefined","Object","defineProperty","remove","_proxy","fetch","update","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/api/v2010/account/application.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar ApplicationList;\nvar ApplicationPage;\nvar ApplicationInstance;\nvar ApplicationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ApplicationList\n *\n * @constructor Twilio.Api.V2010.AccountContext.ApplicationList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n */\n/* jshint ignore:end */\nApplicationList = function ApplicationList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function applications\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ApplicationContext}\n   */\n  /* jshint ignore:end */\n  function ApplicationListInstance(sid) {\n    return ApplicationListInstance.get(sid);\n  }\n\n  ApplicationListInstance._version = version;\n  // Path Solution\n  ApplicationListInstance._solution = {accountSid: accountSid};\n  ApplicationListInstance._uri = _.template(\n    '/Accounts/<%= accountSid %>/Applications.json' // jshint ignore:line\n  )(ApplicationListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a ApplicationInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the new resource\n   * @param {string} [opts.apiVersion] -\n   *          The API version to use to start a new TwiML session\n   * @param {string} [opts.voiceUrl] -\n   *          The URL to call when the phone number receives a call\n   * @param {string} [opts.voiceMethod] - The HTTP method to use with the voice_url\n   * @param {string} [opts.voiceFallbackUrl] -\n   *          The URL to call when a TwiML error occurs\n   * @param {string} [opts.voiceFallbackMethod] -\n   *          The HTTP method to use with voice_fallback_url\n   * @param {string} [opts.statusCallback] -\n   *          The URL to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method to use to call status_callback\n   * @param {boolean} [opts.voiceCallerIdLookup] -\n   *          Whether to lookup the caller's name\n   * @param {string} [opts.smsUrl] -\n   *          The URL to call when the phone number receives an incoming SMS message\n   * @param {string} [opts.smsMethod] - The HTTP method to use with sms_url\n   * @param {string} [opts.smsFallbackUrl] -\n   *          The URL to call when an error occurs while retrieving or executing the TwiML\n   * @param {string} [opts.smsFallbackMethod] -\n   *          The HTTP method to use with sms_fallback_url\n   * @param {string} [opts.smsStatusCallback] -\n   *          The URL to send status information to your application\n   * @param {string} [opts.messageStatusCallback] -\n   *          The URL to send message status information to your application\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ApplicationInstance\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'ApiVersion': _.get(opts, 'apiVersion'),\n      'VoiceUrl': _.get(opts, 'voiceUrl'),\n      'VoiceMethod': _.get(opts, 'voiceMethod'),\n      'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),\n      'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'VoiceCallerIdLookup': serialize.bool(_.get(opts, 'voiceCallerIdLookup')),\n      'SmsUrl': _.get(opts, 'smsUrl'),\n      'SmsMethod': _.get(opts, 'smsMethod'),\n      'SmsFallbackUrl': _.get(opts, 'smsFallbackUrl'),\n      'SmsFallbackMethod': _.get(opts, 'smsFallbackMethod'),\n      'SmsStatusCallback': _.get(opts, 'smsStatusCallback'),\n      'MessageStatusCallback': _.get(opts, 'messageStatusCallback')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ApplicationInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ApplicationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Application resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ApplicationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Application resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ApplicationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the Application resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ApplicationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ApplicationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ApplicationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a application\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ApplicationContext}\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.get = function get(sid) {\n    return new ApplicationContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.ApplicationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ApplicationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ApplicationListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ApplicationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ApplicationPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.ApplicationPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ApplicationSolution} solution - Path solution\n *\n * @returns ApplicationPage\n */\n/* jshint ignore:end */\nApplicationPage = function ApplicationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ApplicationPage.prototype, Page.prototype);\nApplicationPage.prototype.constructor = ApplicationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ApplicationInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationPage#\n *\n * @param {ApplicationPayload} payload - Payload response from the API\n *\n * @returns ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationPage.prototype.getInstance = function getInstance(payload) {\n  return new ApplicationInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nApplicationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nApplicationPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ApplicationContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ApplicationInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} apiVersion -\n *          The API version used to start a new TwiML session\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} messageStatusCallback -\n *          The URL to send message status information to your application\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} smsFallbackMethod -\n *          The HTTP method used with sms_fallback_url\n * @property {string} smsFallbackUrl -\n *          The URL that we call when an error occurs while retrieving or executing the TwiML\n * @property {string} smsMethod - The HTTP method to use with sms_url\n * @property {string} smsStatusCallback -\n *          The URL to send status information to your application\n * @property {string} smsUrl -\n *          The URL we call when the phone number receives an incoming SMS message\n * @property {string} statusCallback -\n *          The URL to send status information to your application\n * @property {string} statusCallbackMethod -\n *          The HTTP method we use to call status_callback\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {boolean} voiceCallerIdLookup - Whether to lookup the caller's name\n * @property {string} voiceFallbackMethod -\n *          The HTTP method used with voice_fallback_url\n * @property {string} voiceFallbackUrl - The URL we call when a TwiML error occurs\n * @property {string} voiceMethod - The HTTP method used with the voice_url\n * @property {string} voiceUrl -\n *          The URL we call when the phone number receives a call\n *\n * @param {V2010} version - Version of the resource\n * @param {ApplicationPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nApplicationInstance = function ApplicationInstance(version, payload, accountSid,\n                                                    sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.messageStatusCallback = payload.message_status_callback; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.smsFallbackMethod = payload.sms_fallback_method; // jshint ignore:line\n  this.smsFallbackUrl = payload.sms_fallback_url; // jshint ignore:line\n  this.smsMethod = payload.sms_method; // jshint ignore:line\n  this.smsStatusCallback = payload.sms_status_callback; // jshint ignore:line\n  this.smsUrl = payload.sms_url; // jshint ignore:line\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.voiceCallerIdLookup = payload.voice_caller_id_lookup; // jshint ignore:line\n  this.voiceFallbackMethod = payload.voice_fallback_method; // jshint ignore:line\n  this.voiceFallbackUrl = payload.voice_fallback_url; // jshint ignore:line\n  this.voiceMethod = payload.voice_method; // jshint ignore:line\n  this.voiceUrl = payload.voice_url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(ApplicationInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new ApplicationContext(\n        this._version,\n        this._solution.accountSid,\n        this._solution.sid\n      );\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * remove a ApplicationInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ApplicationInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ApplicationInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.apiVersion] -\n *          The API version to use to start a new TwiML session\n * @param {string} [opts.voiceUrl] -\n *          The URL to call when the phone number receives a call\n * @param {string} [opts.voiceMethod] - The HTTP method to use with the voice_url\n * @param {string} [opts.voiceFallbackUrl] -\n *          The URL to call when a TwiML error occurs\n * @param {string} [opts.voiceFallbackMethod] -\n *          The HTTP method to use with voice_fallback_url\n * @param {string} [opts.statusCallback] -\n *          The URL to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method to use to call status_callback\n * @param {boolean} [opts.voiceCallerIdLookup] -\n *          Whether to lookup the caller's name\n * @param {string} [opts.smsUrl] -\n *          The URL to call when the phone number receives an incoming SMS message\n * @param {string} [opts.smsMethod] - The HTTP method to use with sms_url\n * @param {string} [opts.smsFallbackUrl] -\n *          The URL to call when an error occurs while retrieving or executing the TwiML\n * @param {string} [opts.smsFallbackMethod] -\n *          The HTTP method to use with sms_fallback_url\n * @param {string} [opts.smsStatusCallback] -\n *          The URL to send status information to your application\n * @param {string} [opts.messageStatusCallback] -\n *          The URL to send message status information to your application\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nApplicationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nApplicationInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ApplicationContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ApplicationContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nApplicationContext = function ApplicationContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, sid: sid, };\n  this._uri = _.template(\n    '/Accounts/<%= accountSid %>/Applications/<%= sid %>.json' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ApplicationInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ApplicationInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ApplicationInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ApplicationInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.apiVersion] -\n *          The API version to use to start a new TwiML session\n * @param {string} [opts.voiceUrl] -\n *          The URL to call when the phone number receives a call\n * @param {string} [opts.voiceMethod] - The HTTP method to use with the voice_url\n * @param {string} [opts.voiceFallbackUrl] -\n *          The URL to call when a TwiML error occurs\n * @param {string} [opts.voiceFallbackMethod] -\n *          The HTTP method to use with voice_fallback_url\n * @param {string} [opts.statusCallback] -\n *          The URL to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method to use to call status_callback\n * @param {boolean} [opts.voiceCallerIdLookup] -\n *          Whether to lookup the caller's name\n * @param {string} [opts.smsUrl] -\n *          The URL to call when the phone number receives an incoming SMS message\n * @param {string} [opts.smsMethod] - The HTTP method to use with sms_url\n * @param {string} [opts.smsFallbackUrl] -\n *          The URL to call when an error occurs while retrieving or executing the TwiML\n * @param {string} [opts.smsFallbackMethod] -\n *          The HTTP method to use with sms_fallback_url\n * @param {string} [opts.smsStatusCallback] -\n *          The URL to send status information to your application\n * @param {string} [opts.messageStatusCallback] -\n *          The URL to send message status information to your application\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ApplicationInstance\n */\n/* jshint ignore:end */\nApplicationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'ApiVersion': _.get(opts, 'apiVersion'),\n    'VoiceUrl': _.get(opts, 'voiceUrl'),\n    'VoiceMethod': _.get(opts, 'voiceMethod'),\n    'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),\n    'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n    'VoiceCallerIdLookup': serialize.bool(_.get(opts, 'voiceCallerIdLookup')),\n    'SmsUrl': _.get(opts, 'smsUrl'),\n    'SmsMethod': _.get(opts, 'smsMethod'),\n    'SmsFallbackUrl': _.get(opts, 'smsFallbackUrl'),\n    'SmsFallbackMethod': _.get(opts, 'smsFallbackMethod'),\n    'SmsStatusCallback': _.get(opts, 'smsStatusCallback'),\n    'MessageStatusCallback': _.get(opts, 'messageStatusCallback')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ApplicationInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ApplicationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nApplicationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nApplicationContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ApplicationList: ApplicationList,\n  ApplicationPage: ApplicationPage,\n  ApplicationInstance: ApplicationInstance,\n  ApplicationContext: ApplicationContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}