{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar FieldList = require('./task/field').FieldList;\nvar Page = require('../../../../base/Page'); /* jshint ignore:line */\nvar SampleList = require('./task/sample').SampleList;\nvar TaskActionsList = require('./task/taskActions').TaskActionsList;\nvar TaskStatisticsList = require('./task/taskStatistics').TaskStatisticsList;\nvar deserialize = require('../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../base/values'); /* jshint ignore:line */\n\nvar TaskList;\nvar TaskPage;\nvar TaskInstance;\nvar TaskContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskList\n *\n * @param {Twilio.Autopilot.V1} version - Version of the resource\n * @param {string} assistantSid - The unique ID of the Assistant.\n */\n/* jshint ignore:end */\nTaskList = function TaskList(version, assistantSid) {\n  /* jshint ignore:start */\n  /**\n   * @function tasks\n   * @memberof Twilio.Autopilot.V1.AssistantContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext}\n   */\n  /* jshint ignore:end */\n  function TaskListInstance(sid) {\n    return TaskListInstance.get(sid);\n  }\n  TaskListInstance._version = version;\n  // Path Solution\n  TaskListInstance._solution = {\n    assistantSid: assistantSid\n  };\n  TaskListInstance._uri = _.template('/Assistants/<%= assistantSid %>/Tasks' // jshint ignore:line\n  )(TaskListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams TaskInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TaskListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TaskInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a TaskInstance\n   *\n   * @function create\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.uniqueName -\n   *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n   * @param {string} [opts.friendlyName] -\n   *          A user-provided string that identifies this resource. It is non-unique and can be up to 255 characters long.\n   * @param {string} [opts.actions] -\n   *          A user-provided JSON object encoded as a string to specify the actions for this task. It is optional and non-unique.\n   * @param {string} [opts.actionsUrl] -\n   *          User-provided HTTP endpoint where the assistant can fetch actions.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TaskInstance\n   */\n  /* jshint ignore:end */\n  TaskListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.uniqueName)) {\n      throw new Error('Required parameter \"opts.uniqueName\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Actions': serialize.object(_.get(opts, 'actions')),\n      'ActionsUrl': _.get(opts, 'actionsUrl')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskInstance(this._version, payload, this._solution.assistantSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a task\n   *\n   * @function get\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {string} sid -\n   *          A 34-character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext}\n   */\n  /* jshint ignore:end */\n  TaskListInstance.get = function get(sid) {\n    return new TaskContext(this._version, this._solution.assistantSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TaskListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  TaskListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return TaskListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TaskSolution} solution - Path solution\n *\n * @returns TaskPage\n */\n/* jshint ignore:end */\nTaskPage = function TaskPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(TaskPage.prototype, Page.prototype);\nTaskPage.prototype.constructor = TaskPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TaskInstance\n *\n * @function getInstance\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskPage#\n *\n * @param {TaskPayload} payload - Payload response from the API\n *\n * @returns TaskInstance\n */\n/* jshint ignore:end */\nTaskPage.prototype.getInstance = function getInstance(payload) {\n  return new TaskInstance(this._version, payload, this._solution.assistantSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nTaskPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account that created this Task.\n * @property {Date} dateCreated - The date that this resource was created\n * @property {Date} dateUpdated - The date that this resource was last updated\n * @property {string} friendlyName -\n *          A user-provided string that identifies this resource. It is non-unique and can be up to 255 characters long.\n * @property {string} links - The links\n * @property {string} assistantSid - The unique ID of the Assistant.\n * @property {string} sid -\n *          A 34-character string that uniquely identifies this resource.\n * @property {string} uniqueName -\n *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n * @property {string} actionsUrl -\n *          A user-provided HTTP endpoint where the assistant can fetch actions.\n * @property {string} url - The url\n *\n * @param {V1} version - Version of the resource\n * @param {TaskPayload} payload - The instance payload\n * @param {sid} assistantSid - The unique ID of the Assistant.\n * @param {sid_like} sid -\n *          A 34-character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nTaskInstance = function TaskInstance(version, payload, assistantSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.assistantSid = payload.assistant_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.actionsUrl = payload.actions_url; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    assistantSid: assistantSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(TaskInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new TaskContext(this._version, this._solution.assistantSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A user-provided string that identifies this resource. It is non-unique and can be up to 255 characters long.\n * @param {string} [opts.uniqueName] -\n *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n * @param {string} [opts.actions] -\n *          A user-provided JSON object encoded as a string to specify the actions for this task. It is optional and non-unique.\n * @param {string} [opts.actionsUrl] -\n *          User-provided HTTP endpoint where the assistant can fetch actions.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the fields\n *\n * @function fields\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.FieldList}\n */\n/* jshint ignore:end */\nTaskInstance.prototype.fields = function fields() {\n  return this._proxy.fields;\n};\n\n/* jshint ignore:start */\n/**\n * Access the samples\n *\n * @function samples\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList}\n */\n/* jshint ignore:end */\nTaskInstance.prototype.samples = function samples() {\n  return this._proxy.samples;\n};\n\n/* jshint ignore:start */\n/**\n * Access the taskActions\n *\n * @function taskActions\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.TaskActionsList}\n */\n/* jshint ignore:end */\nTaskInstance.prototype.taskActions = function taskActions() {\n  return this._proxy.taskActions;\n};\n\n/* jshint ignore:start */\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.TaskStatisticsList}\n */\n/* jshint ignore:end */\nTaskInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nTaskInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskContext\n *\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskContext.FieldList} fields -\n *          fields resource\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList} samples -\n *          samples resource\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskContext.TaskActionsList} taskActions -\n *          taskActions resource\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskContext.TaskStatisticsList} statistics -\n *          statistics resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} assistantSid - The unique ID of the Assistant.\n * @param {sid_like} sid -\n *          A 34-character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nTaskContext = function TaskContext(version, assistantSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    assistantSid: assistantSid,\n    sid: sid\n  };\n  this._uri = _.template('/Assistants/<%= assistantSid %>/Tasks/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._fields = undefined;\n  this._samples = undefined;\n  this._taskActions = undefined;\n  this._statistics = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TaskInstance(this._version, payload, this._solution.assistantSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A user-provided string that identifies this resource. It is non-unique and can be up to 255 characters long.\n * @param {string} [opts.uniqueName] -\n *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n * @param {string} [opts.actions] -\n *          A user-provided JSON object encoded as a string to specify the actions for this task. It is optional and non-unique.\n * @param {string} [opts.actionsUrl] -\n *          User-provided HTTP endpoint where the assistant can fetch actions.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'Actions': serialize.object(_.get(opts, 'actions')),\n    'ActionsUrl': _.get(opts, 'actionsUrl')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TaskInstance(this._version, payload, this._solution.assistantSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\nObject.defineProperty(TaskContext.prototype, 'fields', {\n  get: function () {\n    if (!this._fields) {\n      this._fields = new FieldList(this._version, this._solution.assistantSid, this._solution.sid);\n    }\n    return this._fields;\n  }\n});\nObject.defineProperty(TaskContext.prototype, 'samples', {\n  get: function () {\n    if (!this._samples) {\n      this._samples = new SampleList(this._version, this._solution.assistantSid, this._solution.sid);\n    }\n    return this._samples;\n  }\n});\nObject.defineProperty(TaskContext.prototype, 'taskActions', {\n  get: function () {\n    if (!this._taskActions) {\n      this._taskActions = new TaskActionsList(this._version, this._solution.assistantSid, this._solution.sid);\n    }\n    return this._taskActions;\n  }\n});\nObject.defineProperty(TaskContext.prototype, 'statistics', {\n  get: function () {\n    if (!this._statistics) {\n      this._statistics = new TaskStatisticsList(this._version, this._solution.assistantSid, this._solution.sid);\n    }\n    return this._statistics;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nTaskContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  TaskList: TaskList,\n  TaskPage: TaskPage,\n  TaskInstance: TaskInstance,\n  TaskContext: TaskContext\n};","map":{"version":3,"names":["Q","require","_","util","FieldList","Page","SampleList","TaskActionsList","TaskStatisticsList","deserialize","serialize","values","TaskList","TaskPage","TaskInstance","TaskContext","version","assistantSid","TaskListInstance","sid","get","_version","_solution","_uri","template","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","uniqueName","object","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","friendlyName","friendly_name","links","assistant_sid","unique_name","actionsUrl","actions_url","url","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","fields","samples","taskActions","statistics","_fields","_samples","_taskActions","_statistics","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/autopilot/v1/assistant/task.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar FieldList = require('./task/field').FieldList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar SampleList = require('./task/sample').SampleList;\nvar TaskActionsList = require('./task/taskActions').TaskActionsList;\nvar TaskStatisticsList = require('./task/taskStatistics').TaskStatisticsList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar TaskList;\nvar TaskPage;\nvar TaskInstance;\nvar TaskContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskList\n *\n * @param {Twilio.Autopilot.V1} version - Version of the resource\n * @param {string} assistantSid - The unique ID of the Assistant.\n */\n/* jshint ignore:end */\nTaskList = function TaskList(version, assistantSid) {\n  /* jshint ignore:start */\n  /**\n   * @function tasks\n   * @memberof Twilio.Autopilot.V1.AssistantContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext}\n   */\n  /* jshint ignore:end */\n  function TaskListInstance(sid) {\n    return TaskListInstance.get(sid);\n  }\n\n  TaskListInstance._version = version;\n  // Path Solution\n  TaskListInstance._solution = {assistantSid: assistantSid};\n  TaskListInstance._uri = _.template(\n    '/Assistants/<%= assistantSid %>/Tasks' // jshint ignore:line\n  )(TaskListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams TaskInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TaskListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TaskInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a TaskInstance\n   *\n   * @function create\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.uniqueName -\n   *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n   * @param {string} [opts.friendlyName] -\n   *          A user-provided string that identifies this resource. It is non-unique and can be up to 255 characters long.\n   * @param {string} [opts.actions] -\n   *          A user-provided JSON object encoded as a string to specify the actions for this task. It is optional and non-unique.\n   * @param {string} [opts.actionsUrl] -\n   *          User-provided HTTP endpoint where the assistant can fetch actions.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TaskInstance\n   */\n  /* jshint ignore:end */\n  TaskListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.uniqueName)) {\n      throw new Error('Required parameter \"opts.uniqueName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Actions': serialize.object(_.get(opts, 'actions')),\n      'ActionsUrl': _.get(opts, 'actionsUrl')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskInstance(\n        this._version,\n        payload,\n        this._solution.assistantSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a task\n   *\n   * @function get\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {string} sid -\n   *          A 34-character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext}\n   */\n  /* jshint ignore:end */\n  TaskListInstance.get = function get(sid) {\n    return new TaskContext(this._version, this._solution.assistantSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TaskListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TaskListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TaskListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TaskSolution} solution - Path solution\n *\n * @returns TaskPage\n */\n/* jshint ignore:end */\nTaskPage = function TaskPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TaskPage.prototype, Page.prototype);\nTaskPage.prototype.constructor = TaskPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TaskInstance\n *\n * @function getInstance\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskPage#\n *\n * @param {TaskPayload} payload - Payload response from the API\n *\n * @returns TaskInstance\n */\n/* jshint ignore:end */\nTaskPage.prototype.getInstance = function getInstance(payload) {\n  return new TaskInstance(this._version, payload, this._solution.assistantSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTaskPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account that created this Task.\n * @property {Date} dateCreated - The date that this resource was created\n * @property {Date} dateUpdated - The date that this resource was last updated\n * @property {string} friendlyName -\n *          A user-provided string that identifies this resource. It is non-unique and can be up to 255 characters long.\n * @property {string} links - The links\n * @property {string} assistantSid - The unique ID of the Assistant.\n * @property {string} sid -\n *          A 34-character string that uniquely identifies this resource.\n * @property {string} uniqueName -\n *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n * @property {string} actionsUrl -\n *          A user-provided HTTP endpoint where the assistant can fetch actions.\n * @property {string} url - The url\n *\n * @param {V1} version - Version of the resource\n * @param {TaskPayload} payload - The instance payload\n * @param {sid} assistantSid - The unique ID of the Assistant.\n * @param {sid_like} sid -\n *          A 34-character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nTaskInstance = function TaskInstance(version, payload, assistantSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.assistantSid = payload.assistant_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.actionsUrl = payload.actions_url; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {assistantSid: assistantSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(TaskInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new TaskContext(this._version, this._solution.assistantSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A user-provided string that identifies this resource. It is non-unique and can be up to 255 characters long.\n * @param {string} [opts.uniqueName] -\n *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n * @param {string} [opts.actions] -\n *          A user-provided JSON object encoded as a string to specify the actions for this task. It is optional and non-unique.\n * @param {string} [opts.actionsUrl] -\n *          User-provided HTTP endpoint where the assistant can fetch actions.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the fields\n *\n * @function fields\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.FieldList}\n */\n/* jshint ignore:end */\nTaskInstance.prototype.fields = function fields() {\n  return this._proxy.fields;\n};\n\n/* jshint ignore:start */\n/**\n * Access the samples\n *\n * @function samples\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList}\n */\n/* jshint ignore:end */\nTaskInstance.prototype.samples = function samples() {\n  return this._proxy.samples;\n};\n\n/* jshint ignore:start */\n/**\n * Access the taskActions\n *\n * @function taskActions\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.TaskActionsList}\n */\n/* jshint ignore:end */\nTaskInstance.prototype.taskActions = function taskActions() {\n  return this._proxy.taskActions;\n};\n\n/* jshint ignore:start */\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.TaskStatisticsList}\n */\n/* jshint ignore:end */\nTaskInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTaskInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskContext\n *\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskContext.FieldList} fields -\n *          fields resource\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList} samples -\n *          samples resource\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskContext.TaskActionsList} taskActions -\n *          taskActions resource\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskContext.TaskStatisticsList} statistics -\n *          statistics resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} assistantSid - The unique ID of the Assistant.\n * @param {sid_like} sid -\n *          A 34-character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nTaskContext = function TaskContext(version, assistantSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {assistantSid: assistantSid, sid: sid, };\n  this._uri = _.template(\n    '/Assistants/<%= assistantSid %>/Tasks/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n\n  // Dependents\n  this._fields = undefined;\n  this._samples = undefined;\n  this._taskActions = undefined;\n  this._statistics = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TaskInstance(\n      this._version,\n      payload,\n      this._solution.assistantSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A user-provided string that identifies this resource. It is non-unique and can be up to 255 characters long.\n * @param {string} [opts.uniqueName] -\n *          A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.\n * @param {string} [opts.actions] -\n *          A user-provided JSON object encoded as a string to specify the actions for this task. It is optional and non-unique.\n * @param {string} [opts.actionsUrl] -\n *          User-provided HTTP endpoint where the assistant can fetch actions.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'Actions': serialize.object(_.get(opts, 'actions')),\n    'ActionsUrl': _.get(opts, 'actionsUrl')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TaskInstance(\n      this._version,\n      payload,\n      this._solution.assistantSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TaskContext.prototype,\n  'fields', {\n  get: function() {\n    if (!this._fields) {\n      this._fields = new FieldList(this._version, this._solution.assistantSid, this._solution.sid);\n    }\n    return this._fields;\n  }\n});\n\nObject.defineProperty(TaskContext.prototype,\n  'samples', {\n  get: function() {\n    if (!this._samples) {\n      this._samples = new SampleList(this._version, this._solution.assistantSid, this._solution.sid);\n    }\n    return this._samples;\n  }\n});\n\nObject.defineProperty(TaskContext.prototype,\n  'taskActions', {\n  get: function() {\n    if (!this._taskActions) {\n      this._taskActions = new TaskActionsList(\n        this._version,\n        this._solution.assistantSid,\n        this._solution.sid\n      );\n    }\n    return this._taskActions;\n  }\n});\n\nObject.defineProperty(TaskContext.prototype,\n  'statistics', {\n  get: function() {\n    if (!this._statistics) {\n      this._statistics = new TaskStatisticsList(\n        this._version,\n        this._solution.assistantSid,\n        this._solution.sid\n      );\n    }\n    return this._statistics;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTaskContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TaskList: TaskList,\n  TaskPage: TaskPage,\n  TaskInstance: TaskInstance,\n  TaskContext: TaskContext\n};\n"],"mappings":"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AAI,CAACwF,MAAM,CAACD,KAAK,CAACvF,QAAQ,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAb,YAAY,CAACuE,SAAS,CAAC+B,MAAM,GAAG,SAASA,MAAMA,CAAC1F,IAAI,EAAEC,QAAQ,EAAE;EAC9D,OAAO,IAAI,CAACwF,MAAM,CAACC,MAAM,CAAC1F,IAAI,EAAEC,QAAQ,CAAC;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAb,YAAY,CAACuE,SAAS,CAACgC,MAAM,GAAG,SAASA,MAAMA,CAAC1F,QAAQ,EAAE;EACxD,OAAO,IAAI,CAACwF,MAAM,CAACE,MAAM,CAAC1F,QAAQ,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAb,YAAY,CAACuE,SAAS,CAACiC,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EAChD,OAAO,IAAI,CAACH,MAAM,CAACG,MAAM;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAxG,YAAY,CAACuE,SAAS,CAACkC,OAAO,GAAG,SAASA,OAAOA,CAAA,EAAG;EAClD,OAAO,IAAI,CAACJ,MAAM,CAACI,OAAO;AAC5B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAzG,YAAY,CAACuE,SAAS,CAACmC,WAAW,GAAG,SAASA,WAAWA,CAAA,EAAG;EAC1D,OAAO,IAAI,CAACL,MAAM,CAACK,WAAW;AAChC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA1G,YAAY,CAACuE,SAAS,CAACoC,UAAU,GAAG,SAASA,UAAUA,CAAA,EAAG;EACxD,OAAO,IAAI,CAACN,MAAM,CAACM,UAAU;AAC/B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AA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"},"metadata":{},"sourceType":"script","externalDependencies":[]}