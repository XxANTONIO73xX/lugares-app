{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../../base/deserialize'); /* jshint ignore:line */\nvar values = require('../../../../../base/values'); /* jshint ignore:line */\n\nvar TriggerList;\nvar TriggerPage;\nvar TriggerInstance;\nvar TriggerContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TriggerList\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nTriggerList = function TriggerList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function triggers\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext}\n   */\n  /* jshint ignore:end */\n  function TriggerListInstance(sid) {\n    return TriggerListInstance.get(sid);\n  }\n  TriggerListInstance._version = version;\n  // Path Solution\n  TriggerListInstance._solution = {\n    accountSid: accountSid\n  };\n  TriggerListInstance._uri = _.template('/Accounts/<%= accountSid %>/Usage/Triggers.json' // jshint ignore:line\n  )(TriggerListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a TriggerInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.callbackUrl - The URL we call when the trigger fires\n   * @param {string} opts.triggerValue -\n   *          The usage value at which the trigger should fire\n   * @param {trigger.usage_category} opts.usageCategory -\n   *          The usage category the trigger watches\n   * @param {string} [opts.callbackMethod] -\n   *          The HTTP method to use to call callback_url\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of a recurring UsageTrigger\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The field in the UsageRecord resource that fires the trigger\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TriggerInstance\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.callbackUrl)) {\n      throw new Error('Required parameter \"opts.callbackUrl\" missing.');\n    }\n    if (_.isUndefined(opts.triggerValue)) {\n      throw new Error('Required parameter \"opts.triggerValue\" missing.');\n    }\n    if (_.isUndefined(opts.usageCategory)) {\n      throw new Error('Required parameter \"opts.usageCategory\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'CallbackUrl': _.get(opts, 'callbackUrl'),\n      'TriggerValue': _.get(opts, 'triggerValue'),\n      'UsageCategory': _.get(opts, 'usageCategory'),\n      'CallbackMethod': _.get(opts, 'callbackMethod'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Recurring': _.get(opts, 'recurring'),\n      'TriggerBy': _.get(opts, 'triggerBy')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TriggerInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams TriggerInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of recurring UsageTriggers to read\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The trigger field of the UsageTriggers to read\n   * @param {trigger.usage_category} [opts.usageCategory] -\n   *          The usage category of the UsageTriggers to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TriggerInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of recurring UsageTriggers to read\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The trigger field of the UsageTriggers to read\n   * @param {trigger.usage_category} [opts.usageCategory] -\n   *          The usage category of the UsageTriggers to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TriggerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of recurring UsageTriggers to read\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The trigger field of the UsageTriggers to read\n   * @param {trigger.usage_category} [opts.usageCategory] -\n   *          The usage category of the UsageTriggers to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Recurring': _.get(opts, 'recurring'),\n      'TriggerBy': _.get(opts, 'triggerBy'),\n      'UsageCategory': _.get(opts, 'usageCategory'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TriggerPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TriggerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TriggerPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a trigger\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext}\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.get = function get(sid) {\n    return new TriggerContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  TriggerListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return TriggerListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the TriggerPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TriggerSolution} solution - Path solution\n *\n * @returns TriggerPage\n */\n/* jshint ignore:end */\nTriggerPage = function TriggerPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(TriggerPage.prototype, Page.prototype);\nTriggerPage.prototype.constructor = TriggerPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TriggerInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerPage#\n *\n * @param {TriggerPayload} payload - Payload response from the API\n *\n * @returns TriggerInstance\n */\n/* jshint ignore:end */\nTriggerPage.prototype.getInstance = function getInstance(payload) {\n  return new TriggerInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTriggerPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nTriggerPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the TriggerContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance\n *\n * @property {string} accountSid -\n *          The SID of the Account that this trigger monitors\n * @property {string} apiVersion - The API version used to create the resource\n * @property {string} callbackMethod - The HTTP method we use to call callback_url\n * @property {string} callbackUrl - he URL we call when the trigger fires\n * @property {string} currentValue -\n *          The current value of the field the trigger is watching\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateFired -\n *          The RFC 2822 date and time in GMT that the trigger was last fired\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the trigger\n * @property {trigger.recurring} recurring -\n *          The frequency of a recurring UsageTrigger\n * @property {string} sid - The unique string that identifies the resource\n * @property {trigger.trigger_field} triggerBy -\n *          The field in the UsageRecord resource that fires the trigger\n * @property {string} triggerValue - The value at which the trigger will fire\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {trigger.usage_category} usageCategory -\n *          The usage category the trigger watches\n * @property {string} usageRecordUri -\n *          The URI of the UsageRecord resource this trigger watches\n *\n * @param {V2010} version - Version of the resource\n * @param {TriggerPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nTriggerInstance = function TriggerInstance(version, payload, accountSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.callbackMethod = payload.callback_method; // jshint ignore:line\n  this.callbackUrl = payload.callback_url; // jshint ignore:line\n  this.currentValue = payload.current_value; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateFired = deserialize.rfc2822DateTime(payload.date_fired); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.recurring = payload.recurring; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.triggerBy = payload.trigger_by; // jshint ignore:line\n  this.triggerValue = payload.trigger_value; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.usageCategory = payload.usage_category; // jshint ignore:line\n  this.usageRecordUri = payload.usage_record_uri; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(TriggerInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new TriggerContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TriggerInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TriggerInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.callbackMethod] -\n *          The HTTP method to use to call callback_url\n * @param {string} [opts.callbackUrl] - The URL we call when the trigger fires\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TriggerInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTriggerInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nTriggerInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the TriggerContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nTriggerContext = function TriggerContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = _.template('/Accounts/<%= accountSid %>/Usage/Triggers/<%= sid %>.json' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TriggerInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TriggerInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TriggerInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.callbackMethod] -\n *          The HTTP method to use to call callback_url\n * @param {string} [opts.callbackUrl] - The URL we call when the trigger fires\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'CallbackMethod': _.get(opts, 'callbackMethod'),\n    'CallbackUrl': _.get(opts, 'callbackUrl'),\n    'FriendlyName': _.get(opts, 'friendlyName')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TriggerInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TriggerInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTriggerContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nTriggerContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  TriggerList: TriggerList,\n  TriggerPage: TriggerPage,\n  TriggerInstance: TriggerInstance,\n  TriggerContext: TriggerContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","TriggerList","TriggerPage","TriggerInstance","TriggerContext","version","accountSid","TriggerListInstance","sid","get","_version","_solution","_uri","template","create","opts","callback","isUndefined","Error","callbackUrl","triggerValue","usageCategory","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","pageLimit","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","apiVersion","api_version","callbackMethod","callback_method","callback_url","currentValue","current_value","dateCreated","rfc2822DateTime","date_created","dateFired","date_fired","dateUpdated","date_updated","friendlyName","friendly_name","recurring","triggerBy","trigger_by","trigger_value","usage_category","usageRecordUri","usage_record_uri","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/api/v2010/account/usage/trigger.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar TriggerList;\nvar TriggerPage;\nvar TriggerInstance;\nvar TriggerContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TriggerList\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nTriggerList = function TriggerList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function triggers\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext}\n   */\n  /* jshint ignore:end */\n  function TriggerListInstance(sid) {\n    return TriggerListInstance.get(sid);\n  }\n\n  TriggerListInstance._version = version;\n  // Path Solution\n  TriggerListInstance._solution = {accountSid: accountSid};\n  TriggerListInstance._uri = _.template(\n    '/Accounts/<%= accountSid %>/Usage/Triggers.json' // jshint ignore:line\n  )(TriggerListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a TriggerInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.callbackUrl - The URL we call when the trigger fires\n   * @param {string} opts.triggerValue -\n   *          The usage value at which the trigger should fire\n   * @param {trigger.usage_category} opts.usageCategory -\n   *          The usage category the trigger watches\n   * @param {string} [opts.callbackMethod] -\n   *          The HTTP method to use to call callback_url\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of a recurring UsageTrigger\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The field in the UsageRecord resource that fires the trigger\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TriggerInstance\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.callbackUrl)) {\n      throw new Error('Required parameter \"opts.callbackUrl\" missing.');\n    }\n    if (_.isUndefined(opts.triggerValue)) {\n      throw new Error('Required parameter \"opts.triggerValue\" missing.');\n    }\n    if (_.isUndefined(opts.usageCategory)) {\n      throw new Error('Required parameter \"opts.usageCategory\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'CallbackUrl': _.get(opts, 'callbackUrl'),\n      'TriggerValue': _.get(opts, 'triggerValue'),\n      'UsageCategory': _.get(opts, 'usageCategory'),\n      'CallbackMethod': _.get(opts, 'callbackMethod'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Recurring': _.get(opts, 'recurring'),\n      'TriggerBy': _.get(opts, 'triggerBy')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TriggerInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams TriggerInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of recurring UsageTriggers to read\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The trigger field of the UsageTriggers to read\n   * @param {trigger.usage_category} [opts.usageCategory] -\n   *          The usage category of the UsageTriggers to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TriggerInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of recurring UsageTriggers to read\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The trigger field of the UsageTriggers to read\n   * @param {trigger.usage_category} [opts.usageCategory] -\n   *          The usage category of the UsageTriggers to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TriggerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of recurring UsageTriggers to read\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The trigger field of the UsageTriggers to read\n   * @param {trigger.usage_category} [opts.usageCategory] -\n   *          The usage category of the UsageTriggers to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Recurring': _.get(opts, 'recurring'),\n      'TriggerBy': _.get(opts, 'triggerBy'),\n      'UsageCategory': _.get(opts, 'usageCategory'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TriggerPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TriggerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TriggerPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a trigger\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext}\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.get = function get(sid) {\n    return new TriggerContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TriggerListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TriggerListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TriggerPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TriggerSolution} solution - Path solution\n *\n * @returns TriggerPage\n */\n/* jshint ignore:end */\nTriggerPage = function TriggerPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TriggerPage.prototype, Page.prototype);\nTriggerPage.prototype.constructor = TriggerPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TriggerInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerPage#\n *\n * @param {TriggerPayload} payload - Payload response from the API\n *\n * @returns TriggerInstance\n */\n/* jshint ignore:end */\nTriggerPage.prototype.getInstance = function getInstance(payload) {\n  return new TriggerInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTriggerPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTriggerPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TriggerContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance\n *\n * @property {string} accountSid -\n *          The SID of the Account that this trigger monitors\n * @property {string} apiVersion - The API version used to create the resource\n * @property {string} callbackMethod - The HTTP method we use to call callback_url\n * @property {string} callbackUrl - he URL we call when the trigger fires\n * @property {string} currentValue -\n *          The current value of the field the trigger is watching\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateFired -\n *          The RFC 2822 date and time in GMT that the trigger was last fired\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the trigger\n * @property {trigger.recurring} recurring -\n *          The frequency of a recurring UsageTrigger\n * @property {string} sid - The unique string that identifies the resource\n * @property {trigger.trigger_field} triggerBy -\n *          The field in the UsageRecord resource that fires the trigger\n * @property {string} triggerValue - The value at which the trigger will fire\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {trigger.usage_category} usageCategory -\n *          The usage category the trigger watches\n * @property {string} usageRecordUri -\n *          The URI of the UsageRecord resource this trigger watches\n *\n * @param {V2010} version - Version of the resource\n * @param {TriggerPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nTriggerInstance = function TriggerInstance(version, payload, accountSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.callbackMethod = payload.callback_method; // jshint ignore:line\n  this.callbackUrl = payload.callback_url; // jshint ignore:line\n  this.currentValue = payload.current_value; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateFired = deserialize.rfc2822DateTime(payload.date_fired); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.recurring = payload.recurring; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.triggerBy = payload.trigger_by; // jshint ignore:line\n  this.triggerValue = payload.trigger_value; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.usageCategory = payload.usage_category; // jshint ignore:line\n  this.usageRecordUri = payload.usage_record_uri; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(TriggerInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new TriggerContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TriggerInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TriggerInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.callbackMethod] -\n *          The HTTP method to use to call callback_url\n * @param {string} [opts.callbackUrl] - The URL we call when the trigger fires\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TriggerInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTriggerInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTriggerInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TriggerContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nTriggerContext = function TriggerContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, sid: sid, };\n  this._uri = _.template(\n    '/Accounts/<%= accountSid %>/Usage/Triggers/<%= sid %>.json' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TriggerInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TriggerInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TriggerInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.callbackMethod] -\n *          The HTTP method to use to call callback_url\n * @param {string} [opts.callbackUrl] - The URL we call when the trigger fires\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'CallbackMethod': _.get(opts, 'callbackMethod'),\n    'CallbackUrl': _.get(opts, 'callbackUrl'),\n    'FriendlyName': _.get(opts, 'friendlyName')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TriggerInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TriggerInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTriggerContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTriggerContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TriggerList: TriggerList,\n  TriggerPage: TriggerPage,\n  TriggerInstance: TriggerInstance,\n  TriggerContext: TriggerContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}