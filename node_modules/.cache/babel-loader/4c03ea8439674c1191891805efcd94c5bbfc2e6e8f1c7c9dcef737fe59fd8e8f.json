{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../../base/deserialize'); /* jshint ignore:line */\nvar serialize = require('../../../../../base/serialize'); /* jshint ignore:line */\nvar values = require('../../../../../base/values'); /* jshint ignore:line */\n\nvar MemberList;\nvar MemberPage;\nvar MemberInstance;\nvar MemberContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the MemberList\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList\n *\n * @param {Twilio.Chat.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} channelSid - The unique ID of the Channel for the member\n */\n/* jshint ignore:end */\nMemberList = function MemberList(version, serviceSid, channelSid) {\n  /* jshint ignore:start */\n  /**\n   * @function members\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext.MemberContext}\n   */\n  /* jshint ignore:end */\n  function MemberListInstance(sid) {\n    return MemberListInstance.get(sid);\n  }\n  MemberListInstance._version = version;\n  // Path Solution\n  MemberListInstance._solution = {\n    serviceSid: serviceSid,\n    channelSid: channelSid\n  };\n  MemberListInstance._uri = _.template('/Services/<%= serviceSid %>/Channels/<%= channelSid %>/Members' // jshint ignore:line\n  )(MemberListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a MemberInstance\n   *\n   * @function create\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.identity -\n   *          The `identity` value that identifies the new resource's User\n   * @param {string} [opts.roleSid] - The SID of the Role to assign to the member\n   * @param {number} [opts.lastConsumedMessageIndex] -\n   *          The index of the last Message in the Channel the Member has read\n   * @param {Date} [opts.lastConsumptionTimestamp] -\n   *          The ISO 8601 based timestamp string representing the date-time of the last Message read event for the Member within the Channel\n   * @param {Date} [opts.dateCreated] -\n   *          The ISO 8601 date and time in GMT when the resource was created\n   * @param {Date} [opts.dateUpdated] -\n   *          The ISO 8601 date and time in GMT when the resource was updated\n   * @param {string} [opts.attributes] -\n   *          A valid JSON string that contains application-specific data\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed MemberInstance\n   */\n  /* jshint ignore:end */\n  MemberListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.identity)) {\n      throw new Error('Required parameter \"opts.identity\" missing.');\n    }\n    var deferred = Q.defer();\n    var data = values.of({\n      'Identity': _.get(opts, 'identity'),\n      'RoleSid': _.get(opts, 'roleSid'),\n      'LastConsumedMessageIndex': _.get(opts, 'lastConsumedMessageIndex'),\n      'LastConsumptionTimestamp': serialize.iso8601DateTime(_.get(opts, 'lastConsumptionTimestamp')),\n      'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n      'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n      'Attributes': _.get(opts, 'attributes')\n    });\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MemberInstance(this._version, payload, this._solution.serviceSid, this._solution.channelSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams MemberInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string|list} [opts.identity] -\n   *          The `identity` value of the resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  MemberListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists MemberInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string|list} [opts.identity] -\n   *          The `identity` value of the resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MemberListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of MemberInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string|list} [opts.identity] -\n   *          The `identity` value of the resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MemberListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Identity': serialize.map(_.get(opts, 'identity'), function (e) {\n        return e;\n      }),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MemberPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of MemberInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MemberListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MemberPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a member\n   *\n   * @function get\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext.MemberContext}\n   */\n  /* jshint ignore:end */\n  MemberListInstance.get = function get(sid) {\n    return new MemberContext(this._version, this._solution.serviceSid, this._solution.channelSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  MemberListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  MemberListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return MemberListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the MemberPage\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.MemberPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MemberSolution} solution - Path solution\n *\n * @returns MemberPage\n */\n/* jshint ignore:end */\nMemberPage = function MemberPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(MemberPage.prototype, Page.prototype);\nMemberPage.prototype.constructor = MemberPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of MemberInstance\n *\n * @function getInstance\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberPage#\n *\n * @param {MemberPayload} payload - Payload response from the API\n *\n * @returns MemberInstance\n */\n/* jshint ignore:end */\nMemberPage.prototype.getInstance = function getInstance(payload) {\n  return new MemberInstance(this._version, payload, this._solution.serviceSid, this._solution.channelSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMemberPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nMemberPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the MemberContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.MemberInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} channelSid - The unique ID of the Channel for the member\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {string} identity - The string that identifies the resource's User\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} roleSid - The SID of the Role assigned to the member\n * @property {number} lastConsumedMessageIndex -\n *          The index of the last Message that the Member has read within the Channel\n * @property {Date} lastConsumptionTimestamp -\n *          The ISO 8601 based timestamp string that represents the date-time of the last Message read event for the Member within the Channel\n * @property {string} url - The absolute URL of the Member resource\n * @property {string} attributes -\n *          The JSON string that stores application-specific data\n *\n * @param {V2} version - Version of the resource\n * @param {MemberPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {sid} channelSid - The unique ID of the Channel for the member\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nMemberInstance = function MemberInstance(version, payload, serviceSid, channelSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.channelSid = payload.channel_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.roleSid = payload.role_sid; // jshint ignore:line\n  this.lastConsumedMessageIndex = deserialize.integer(payload.last_consumed_message_index); // jshint ignore:line\n  this.lastConsumptionTimestamp = deserialize.iso8601DateTime(payload.last_consumption_timestamp); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    channelSid: channelSid,\n    sid: sid || this.sid\n  };\n};\nObject.defineProperty(MemberInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new MemberContext(this._version, this._solution.serviceSid, this._solution.channelSid, this._solution.sid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a MemberInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MemberInstance\n */\n/* jshint ignore:end */\nMemberInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a MemberInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MemberInstance\n */\n/* jshint ignore:end */\nMemberInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a MemberInstance\n *\n * @function update\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.roleSid] - The SID of the Role to assign to the member\n * @param {number} [opts.lastConsumedMessageIndex] -\n *          The index of the last consumed Message for the Channel for the Member\n * @param {Date} [opts.lastConsumptionTimestamp] -\n *          The ISO 8601 based timestamp string representing the date-time of the last Message read event for the Member within the Channel\n * @param {Date} [opts.dateCreated] -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @param {Date} [opts.dateUpdated] -\n *          The ISO 8601 date and time in GMT when the resource was updated\n * @param {string} [opts.attributes] -\n *          A valid JSON string that contains application-specific data\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MemberInstance\n */\n/* jshint ignore:end */\nMemberInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMemberInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nMemberInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the MemberContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.MemberContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid - The SID of the Service to fetch the resource from\n * @param {sid_like} channelSid -\n *          The unique ID of the channel the member belongs to\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nMemberContext = function MemberContext(version, serviceSid, channelSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    serviceSid: serviceSid,\n    channelSid: channelSid,\n    sid: sid\n  };\n  this._uri = _.template('/Services/<%= serviceSid %>/Channels/<%= channelSid %>/Members/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MemberInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MemberInstance\n */\n/* jshint ignore:end */\nMemberContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MemberInstance(this._version, payload, this._solution.serviceSid, this._solution.channelSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a MemberInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MemberInstance\n */\n/* jshint ignore:end */\nMemberContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a MemberInstance\n *\n * @function update\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.roleSid] - The SID of the Role to assign to the member\n * @param {number} [opts.lastConsumedMessageIndex] -\n *          The index of the last consumed Message for the Channel for the Member\n * @param {Date} [opts.lastConsumptionTimestamp] -\n *          The ISO 8601 based timestamp string representing the date-time of the last Message read event for the Member within the Channel\n * @param {Date} [opts.dateCreated] -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @param {Date} [opts.dateUpdated] -\n *          The ISO 8601 date and time in GMT when the resource was updated\n * @param {string} [opts.attributes] -\n *          A valid JSON string that contains application-specific data\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MemberInstance\n */\n/* jshint ignore:end */\nMemberContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'RoleSid': _.get(opts, 'roleSid'),\n    'LastConsumedMessageIndex': _.get(opts, 'lastConsumedMessageIndex'),\n    'LastConsumptionTimestamp': serialize.iso8601DateTime(_.get(opts, 'lastConsumptionTimestamp')),\n    'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n    'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n    'Attributes': _.get(opts, 'attributes')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MemberInstance(this._version, payload, this._solution.serviceSid, this._solution.channelSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMemberContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nMemberContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  MemberList: MemberList,\n  MemberPage: MemberPage,\n  MemberInstance: MemberInstance,\n  MemberContext: MemberContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","serialize","values","MemberList","MemberPage","MemberInstance","MemberContext","version","serviceSid","channelSid","MemberListInstance","sid","get","_version","_solution","_uri","template","create","opts","callback","isUndefined","Error","identity","deferred","defer","data","of","iso8601DateTime","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","pageLimit","nextPage","merge","list","allResources","resource","push","length","map","e","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","channel_sid","service_sid","dateCreated","date_created","dateUpdated","date_updated","roleSid","role_sid","lastConsumedMessageIndex","integer","last_consumed_message_index","lastConsumptionTimestamp","last_consumption_timestamp","url","attributes","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/chat/v2/service/channel/member.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar MemberList;\nvar MemberPage;\nvar MemberInstance;\nvar MemberContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the MemberList\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList\n *\n * @param {Twilio.Chat.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} channelSid - The unique ID of the Channel for the member\n */\n/* jshint ignore:end */\nMemberList = function MemberList(version, serviceSid, channelSid) {\n  /* jshint ignore:start */\n  /**\n   * @function members\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext.MemberContext}\n   */\n  /* jshint ignore:end */\n  function MemberListInstance(sid) {\n    return MemberListInstance.get(sid);\n  }\n\n  MemberListInstance._version = version;\n  // Path Solution\n  MemberListInstance._solution = {serviceSid: serviceSid, channelSid: channelSid};\n  MemberListInstance._uri = _.template(\n    '/Services/<%= serviceSid %>/Channels/<%= channelSid %>/Members' // jshint ignore:line\n  )(MemberListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * create a MemberInstance\n   *\n   * @function create\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.identity -\n   *          The `identity` value that identifies the new resource's User\n   * @param {string} [opts.roleSid] - The SID of the Role to assign to the member\n   * @param {number} [opts.lastConsumedMessageIndex] -\n   *          The index of the last Message in the Channel the Member has read\n   * @param {Date} [opts.lastConsumptionTimestamp] -\n   *          The ISO 8601 based timestamp string representing the date-time of the last Message read event for the Member within the Channel\n   * @param {Date} [opts.dateCreated] -\n   *          The ISO 8601 date and time in GMT when the resource was created\n   * @param {Date} [opts.dateUpdated] -\n   *          The ISO 8601 date and time in GMT when the resource was updated\n   * @param {string} [opts.attributes] -\n   *          A valid JSON string that contains application-specific data\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed MemberInstance\n   */\n  /* jshint ignore:end */\n  MemberListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.identity)) {\n      throw new Error('Required parameter \"opts.identity\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Identity': _.get(opts, 'identity'),\n      'RoleSid': _.get(opts, 'roleSid'),\n      'LastConsumedMessageIndex': _.get(opts, 'lastConsumedMessageIndex'),\n      'LastConsumptionTimestamp': serialize.iso8601DateTime(_.get(opts, 'lastConsumptionTimestamp')),\n      'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n      'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n      'Attributes': _.get(opts, 'attributes')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MemberInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.channelSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams MemberInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string|list} [opts.identity] -\n   *          The `identity` value of the resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  MemberListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists MemberInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string|list} [opts.identity] -\n   *          The `identity` value of the resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MemberListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of MemberInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string|list} [opts.identity] -\n   *          The `identity` value of the resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MemberListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Identity': serialize.map(_.get(opts, 'identity'), function(e) { return e; }),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MemberPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of MemberInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MemberListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MemberPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a member\n   *\n   * @function get\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext.MemberContext}\n   */\n  /* jshint ignore:end */\n  MemberListInstance.get = function get(sid) {\n    return new MemberContext(this._version, this._solution.serviceSid, this._solution.channelSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  MemberListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MemberListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MemberListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MemberPage\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.MemberPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MemberSolution} solution - Path solution\n *\n * @returns MemberPage\n */\n/* jshint ignore:end */\nMemberPage = function MemberPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MemberPage.prototype, Page.prototype);\nMemberPage.prototype.constructor = MemberPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of MemberInstance\n *\n * @function getInstance\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberPage#\n *\n * @param {MemberPayload} payload - Payload response from the API\n *\n * @returns MemberInstance\n */\n/* jshint ignore:end */\nMemberPage.prototype.getInstance = function getInstance(payload) {\n  return new MemberInstance(\n    this._version,\n    payload,\n    this._solution.serviceSid,\n    this._solution.channelSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMemberPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMemberPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MemberContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.MemberInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} channelSid - The unique ID of the Channel for the member\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {string} identity - The string that identifies the resource's User\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} roleSid - The SID of the Role assigned to the member\n * @property {number} lastConsumedMessageIndex -\n *          The index of the last Message that the Member has read within the Channel\n * @property {Date} lastConsumptionTimestamp -\n *          The ISO 8601 based timestamp string that represents the date-time of the last Message read event for the Member within the Channel\n * @property {string} url - The absolute URL of the Member resource\n * @property {string} attributes -\n *          The JSON string that stores application-specific data\n *\n * @param {V2} version - Version of the resource\n * @param {MemberPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {sid} channelSid - The unique ID of the Channel for the member\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nMemberInstance = function MemberInstance(version, payload, serviceSid,\n                                          channelSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.channelSid = payload.channel_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.roleSid = payload.role_sid; // jshint ignore:line\n  this.lastConsumedMessageIndex = deserialize.integer(payload.last_consumed_message_index); // jshint ignore:line\n  this.lastConsumptionTimestamp = deserialize.iso8601DateTime(payload.last_consumption_timestamp); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, channelSid: channelSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(MemberInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new MemberContext(\n        this._version,\n        this._solution.serviceSid,\n        this._solution.channelSid,\n        this._solution.sid\n      );\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a MemberInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MemberInstance\n */\n/* jshint ignore:end */\nMemberInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a MemberInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MemberInstance\n */\n/* jshint ignore:end */\nMemberInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a MemberInstance\n *\n * @function update\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.roleSid] - The SID of the Role to assign to the member\n * @param {number} [opts.lastConsumedMessageIndex] -\n *          The index of the last consumed Message for the Channel for the Member\n * @param {Date} [opts.lastConsumptionTimestamp] -\n *          The ISO 8601 based timestamp string representing the date-time of the last Message read event for the Member within the Channel\n * @param {Date} [opts.dateCreated] -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @param {Date} [opts.dateUpdated] -\n *          The ISO 8601 date and time in GMT when the resource was updated\n * @param {string} [opts.attributes] -\n *          A valid JSON string that contains application-specific data\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MemberInstance\n */\n/* jshint ignore:end */\nMemberInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMemberInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMemberInstance.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MemberContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.MemberContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid - The SID of the Service to fetch the resource from\n * @param {sid_like} channelSid -\n *          The unique ID of the channel the member belongs to\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nMemberContext = function MemberContext(version, serviceSid, channelSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, channelSid: channelSid, sid: sid, };\n  this._uri = _.template(\n    '/Services/<%= serviceSid %>/Channels/<%= channelSid %>/Members/<%= sid %>' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MemberInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MemberInstance\n */\n/* jshint ignore:end */\nMemberContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new MemberInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.channelSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a MemberInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MemberInstance\n */\n/* jshint ignore:end */\nMemberContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a MemberInstance\n *\n * @function update\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.roleSid] - The SID of the Role to assign to the member\n * @param {number} [opts.lastConsumedMessageIndex] -\n *          The index of the last consumed Message for the Channel for the Member\n * @param {Date} [opts.lastConsumptionTimestamp] -\n *          The ISO 8601 based timestamp string representing the date-time of the last Message read event for the Member within the Channel\n * @param {Date} [opts.dateCreated] -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @param {Date} [opts.dateUpdated] -\n *          The ISO 8601 date and time in GMT when the resource was updated\n * @param {string} [opts.attributes] -\n *          A valid JSON string that contains application-specific data\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MemberInstance\n */\n/* jshint ignore:end */\nMemberContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'RoleSid': _.get(opts, 'roleSid'),\n    'LastConsumedMessageIndex': _.get(opts, 'lastConsumedMessageIndex'),\n    'LastConsumptionTimestamp': serialize.iso8601DateTime(_.get(opts, 'lastConsumptionTimestamp')),\n    'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n    'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n    'Attributes': _.get(opts, 'attributes')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new MemberInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.channelSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.MemberContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMemberContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nMemberContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MemberList: MemberList,\n  MemberPage: MemberPage,\n  MemberInstance: MemberInstance,\n  MemberContext: MemberContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}