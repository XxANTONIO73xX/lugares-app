{"ast":null,"code":"'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\nvar Q = require('q'); /* jshint ignore:line */\nvar _ = require('lodash'); /* jshint ignore:line */\nvar util = require('util'); /* jshint ignore:line */\nvar Page = require('../../../../../base/Page'); /* jshint ignore:line */\nvar deserialize = require('../../../../../base/deserialize'); /* jshint ignore:line */\nvar values = require('../../../../../base/values'); /* jshint ignore:line */\n\nvar UserChannelList;\nvar UserChannelPage;\nvar UserChannelInstance;\nvar UserChannelContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the UserChannelList\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelList\n *\n * @param {Twilio.IpMessaging.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} userSid - The SID of the User the User Channel belongs to\n */\n/* jshint ignore:end */\nUserChannelList = function UserChannelList(version, serviceSid, userSid) {\n  /* jshint ignore:start */\n  /**\n   * @function userChannels\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelContext}\n   */\n  /* jshint ignore:end */\n  function UserChannelListInstance(sid) {\n    return UserChannelListInstance.get(sid);\n  }\n  UserChannelListInstance._version = version;\n  // Path Solution\n  UserChannelListInstance._solution = {\n    serviceSid: serviceSid,\n    userSid: userSid\n  };\n  UserChannelListInstance._uri = _.template('/Services/<%= serviceSid %>/Users/<%= userSid %>/Channels' // jshint ignore:line\n  )(UserChannelListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams UserChannelInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  UserChannelListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n          currentResource++;\n          callback(instance, onComplete);\n        });\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists UserChannelInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserChannelListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of UserChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserChannelListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new UserChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of UserChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserChannelListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n    promise = promise.then(function (payload) {\n      deferred.resolve(new UserChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a user_channel\n   *\n   * @function get\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {string} channelSid -\n   *          The SID of the Channel that has the User Channel to fetch\n   *\n   * @returns {Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelContext}\n   */\n  /* jshint ignore:end */\n  UserChannelListInstance.get = function get(channelSid) {\n    return new UserChannelContext(this._version, this._solution.serviceSid, this._solution.userSid, channelSid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  UserChannelListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n  UserChannelListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n  return UserChannelListInstance;\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the UserChannelPage\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {UserChannelSolution} solution - Path solution\n *\n * @returns UserChannelPage\n */\n/* jshint ignore:end */\nUserChannelPage = function UserChannelPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n_.extend(UserChannelPage.prototype, Page.prototype);\nUserChannelPage.prototype.constructor = UserChannelPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of UserChannelInstance\n *\n * @function getInstance\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelPage#\n *\n * @param {UserChannelPayload} payload - Payload response from the API\n *\n * @returns UserChannelInstance\n */\n/* jshint ignore:end */\nUserChannelPage.prototype.getInstance = function getInstance(payload) {\n  return new UserChannelInstance(this._version, payload, this._solution.serviceSid, this._solution.userSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserChannelPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nUserChannelPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the UserChannelContext\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {string} channelSid - The SID of the Channel the resource belongs to\n * @property {string} userSid - The SID of the User the User Channel belongs to\n * @property {string} memberSid - The SID of the User as a Member in the Channel\n * @property {user_channel.channel_status} status -\n *          The status of the User on the Channel\n * @property {number} lastConsumedMessageIndex -\n *          The index of the last Message in the Channel the Member has read\n * @property {number} unreadMessagesCount -\n *          The number of unread Messages in the Channel for the User\n * @property {string} links -\n *          Absolute URLs to access the Members, Messages , Invites and, if it exists, the last Message for the Channel\n * @property {string} url - The absolute URL of the resource\n * @property {user_channel.notification_level} notificationLevel -\n *          The push notification level of the User for the Channel\n *\n * @param {V2} version - Version of the resource\n * @param {UserChannelPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {sid} userSid - The SID of the User the User Channel belongs to\n * @param {sid_like} channelSid -\n *          The SID of the Channel that has the User Channel to fetch\n */\n/* jshint ignore:end */\nUserChannelInstance = function UserChannelInstance(version, payload, serviceSid, userSid, channelSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.channelSid = payload.channel_sid; // jshint ignore:line\n  this.userSid = payload.user_sid; // jshint ignore:line\n  this.memberSid = payload.member_sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.lastConsumedMessageIndex = deserialize.integer(payload.last_consumed_message_index); // jshint ignore:line\n  this.unreadMessagesCount = deserialize.integer(payload.unread_messages_count); // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.notificationLevel = payload.notification_level; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    userSid: userSid,\n    channelSid: channelSid || this.channelSid\n  };\n};\nObject.defineProperty(UserChannelInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new UserChannelContext(this._version, this._solution.serviceSid, this._solution.userSid, this._solution.channelSid);\n    }\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a UserChannelInstance\n *\n * @function fetch\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n/* jshint ignore:end */\nUserChannelInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a UserChannelInstance\n *\n * @function update\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelInstance#\n *\n * @param {object} opts - Options for request\n * @param {user_channel.notification_level} opts.notificationLevel -\n *          The push notification level to assign to the User Channel\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n/* jshint ignore:end */\nUserChannelInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserChannelInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\nUserChannelInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n/* jshint ignore:start */\n/**\n * Initialize the UserChannelContext\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid -\n *          The SID of the Service to fetch the User Channel resource from\n * @param {sid_like} userSid -\n *          The SID of the User to fetch the User Channel resource from\n * @param {sid_like} channelSid -\n *          The SID of the Channel that has the User Channel to fetch\n */\n/* jshint ignore:end */\nUserChannelContext = function UserChannelContext(version, serviceSid, userSid, channelSid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    serviceSid: serviceSid,\n    userSid: userSid,\n    channelSid: channelSid\n  };\n  this._uri = _.template('/Services/<%= serviceSid %>/Users/<%= userSid %>/Channels/<%= channelSid %>' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a UserChannelInstance\n *\n * @function fetch\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n/* jshint ignore:end */\nUserChannelContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new UserChannelInstance(this._version, payload, this._solution.serviceSid, this._solution.userSid, this._solution.channelSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a UserChannelInstance\n *\n * @function update\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelContext#\n *\n * @param {object} opts - Options for request\n * @param {user_channel.notification_level} opts.notificationLevel -\n *          The push notification level to assign to the User Channel\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n/* jshint ignore:end */\nUserChannelContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.notificationLevel)) {\n    throw new Error('Required parameter \"opts.notificationLevel\" missing.');\n  }\n  var deferred = Q.defer();\n  var data = values.of({\n    'NotificationLevel': _.get(opts, 'notificationLevel')\n  });\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n  promise = promise.then(function (payload) {\n    deferred.resolve(new UserChannelInstance(this._version, payload, this._solution.serviceSid, this._solution.userSid, this._solution.channelSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserChannelContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\nUserChannelContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\nmodule.exports = {\n  UserChannelList: UserChannelList,\n  UserChannelPage: UserChannelPage,\n  UserChannelInstance: UserChannelInstance,\n  UserChannelContext: UserChannelContext\n};","map":{"version":3,"names":["Q","require","_","util","Page","deserialize","values","UserChannelList","UserChannelPage","UserChannelInstance","UserChannelContext","version","serviceSid","userSid","UserChannelListInstance","sid","get","_version","_solution","_uri","template","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","channelSid","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","channel_sid","user_sid","memberSid","member_sid","status","lastConsumedMessageIndex","integer","last_consumed_message_index","unreadMessagesCount","unread_messages_count","links","url","notificationLevel","notification_level","_context","undefined","Object","defineProperty","fetch","_proxy","update","module","exports"],"sources":["C:/Users/spoon/Documents/GitHub/SDI/transportes-app/frontend/node_modules/twilio/lib/rest/ipMessaging/v2/service/user/userChannel.js"],"sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar UserChannelList;\nvar UserChannelPage;\nvar UserChannelInstance;\nvar UserChannelContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the UserChannelList\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelList\n *\n * @param {Twilio.IpMessaging.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} userSid - The SID of the User the User Channel belongs to\n */\n/* jshint ignore:end */\nUserChannelList = function UserChannelList(version, serviceSid, userSid) {\n  /* jshint ignore:start */\n  /**\n   * @function userChannels\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelContext}\n   */\n  /* jshint ignore:end */\n  function UserChannelListInstance(sid) {\n    return UserChannelListInstance.get(sid);\n  }\n\n  UserChannelListInstance._version = version;\n  // Path Solution\n  UserChannelListInstance._solution = {serviceSid: serviceSid, userSid: userSid};\n  UserChannelListInstance._uri = _.template(\n    '/Services/<%= serviceSid %>/Users/<%= userSid %>/Channels' // jshint ignore:line\n  )(UserChannelListInstance._solution);\n  /* jshint ignore:start */\n  /**\n   * Streams UserChannelInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  UserChannelListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists UserChannelInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserChannelListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of UserChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserChannelListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new UserChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of UserChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserChannelListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new UserChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a user_channel\n   *\n   * @function get\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {string} channelSid -\n   *          The SID of the Channel that has the User Channel to fetch\n   *\n   * @returns {Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelContext}\n   */\n  /* jshint ignore:end */\n  UserChannelListInstance.get = function get(channelSid) {\n    return new UserChannelContext(\n      this._version,\n      this._solution.serviceSid,\n      this._solution.userSid,\n      channelSid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  UserChannelListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  UserChannelListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return UserChannelListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the UserChannelPage\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {UserChannelSolution} solution - Path solution\n *\n * @returns UserChannelPage\n */\n/* jshint ignore:end */\nUserChannelPage = function UserChannelPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(UserChannelPage.prototype, Page.prototype);\nUserChannelPage.prototype.constructor = UserChannelPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of UserChannelInstance\n *\n * @function getInstance\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelPage#\n *\n * @param {UserChannelPayload} payload - Payload response from the API\n *\n * @returns UserChannelInstance\n */\n/* jshint ignore:end */\nUserChannelPage.prototype.getInstance = function getInstance(payload) {\n  return new UserChannelInstance(\n    this._version,\n    payload,\n    this._solution.serviceSid,\n    this._solution.userSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserChannelPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nUserChannelPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the UserChannelContext\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {string} channelSid - The SID of the Channel the resource belongs to\n * @property {string} userSid - The SID of the User the User Channel belongs to\n * @property {string} memberSid - The SID of the User as a Member in the Channel\n * @property {user_channel.channel_status} status -\n *          The status of the User on the Channel\n * @property {number} lastConsumedMessageIndex -\n *          The index of the last Message in the Channel the Member has read\n * @property {number} unreadMessagesCount -\n *          The number of unread Messages in the Channel for the User\n * @property {string} links -\n *          Absolute URLs to access the Members, Messages , Invites and, if it exists, the last Message for the Channel\n * @property {string} url - The absolute URL of the resource\n * @property {user_channel.notification_level} notificationLevel -\n *          The push notification level of the User for the Channel\n *\n * @param {V2} version - Version of the resource\n * @param {UserChannelPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {sid} userSid - The SID of the User the User Channel belongs to\n * @param {sid_like} channelSid -\n *          The SID of the Channel that has the User Channel to fetch\n */\n/* jshint ignore:end */\nUserChannelInstance = function UserChannelInstance(version, payload, serviceSid,\n                                                    userSid, channelSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.channelSid = payload.channel_sid; // jshint ignore:line\n  this.userSid = payload.user_sid; // jshint ignore:line\n  this.memberSid = payload.member_sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.lastConsumedMessageIndex = deserialize.integer(payload.last_consumed_message_index); // jshint ignore:line\n  this.unreadMessagesCount = deserialize.integer(payload.unread_messages_count); // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.notificationLevel = payload.notification_level; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    userSid: userSid,\n    channelSid: channelSid || this.channelSid,\n  };\n};\n\nObject.defineProperty(UserChannelInstance.prototype,\n  '_proxy', {\n  get: function() {\n    if (!this._context) {\n      this._context = new UserChannelContext(\n        this._version,\n        this._solution.serviceSid,\n        this._solution.userSid,\n        this._solution.channelSid\n      );\n    }\n\n    return this._context;\n  }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a UserChannelInstance\n *\n * @function fetch\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n/* jshint ignore:end */\nUserChannelInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a UserChannelInstance\n *\n * @function update\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelInstance#\n *\n * @param {object} opts - Options for request\n * @param {user_channel.notification_level} opts.notificationLevel -\n *          The push notification level to assign to the User Channel\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n/* jshint ignore:end */\nUserChannelInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserChannelInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nUserChannelInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the UserChannelContext\n *\n * @constructor Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid -\n *          The SID of the Service to fetch the User Channel resource from\n * @param {sid_like} userSid -\n *          The SID of the User to fetch the User Channel resource from\n * @param {sid_like} channelSid -\n *          The SID of the Channel that has the User Channel to fetch\n */\n/* jshint ignore:end */\nUserChannelContext = function UserChannelContext(version, serviceSid, userSid,\n                                                  channelSid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, userSid: userSid, channelSid: channelSid, };\n  this._uri = _.template(\n    '/Services/<%= serviceSid %>/Users/<%= userSid %>/Channels/<%= channelSid %>' // jshint ignore:line\n  )(this._solution);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a UserChannelInstance\n *\n * @function fetch\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n/* jshint ignore:end */\nUserChannelContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new UserChannelInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.userSid,\n      this._solution.channelSid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a UserChannelInstance\n *\n * @function update\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelContext#\n *\n * @param {object} opts - Options for request\n * @param {user_channel.notification_level} opts.notificationLevel -\n *          The push notification level to assign to the User Channel\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n/* jshint ignore:end */\nUserChannelContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.notificationLevel)) {\n    throw new Error('Required parameter \"opts.notificationLevel\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({'NotificationLevel': _.get(opts, 'notificationLevel')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new UserChannelInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.userSid,\n      this._solution.channelSid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.IpMessaging.V2.ServiceContext.UserContext.UserChannelContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserChannelContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nUserChannelContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  UserChannelList: UserChannelList,\n  UserChannelPage: UserChannelPage,\n  UserChannelInstance: UserChannelInstance,\n  UserChannelContext: UserChannelContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}